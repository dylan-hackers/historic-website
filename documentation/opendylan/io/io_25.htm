<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="io_1.htm">
<LINK REL=UP HREF="io_23.htm">
<LINK REL=PREV HREF="io_24.htm">
<LINK REL=NEXT HREF="io_26.htm">
<TITLE>4.2   Print functions</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING25></A>

<DIV>
<P><A HREF="io_26.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="io_24.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="io_23.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="io_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="io_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="io_333.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4 The Printing Modules</P>

</DIV>
<A NAME=HEADING25-0></A>
<A NAME=UID-print-888039></A>
<H1>4.2   Print functions</H1>
<P>The Print module offers two functions for users to call to print objects, <CODE>print</CODE> and <CODE>print-to-string</CODE>.</P>
<STRONG><A NAME=MARKER-2-189></A><A NAME=MARKER-2-190></A>print</STRONG>
<P><I>Function</I></P>
<PRE>
print <I>object</I> <I>stream</I> #key <I>level length circle? pretty?</I> =&gt; ()
<P></P>
</PRE>
<DL>
<DT><DD>Prints <I>object </I>to <I>stream</I> according to the print request formed by the keyword arguments. A first call to <CODE>print</CODE> creates a printing stream to represent the print request, and recursive calls to <CODE>print</CODE> on this printing stream process the keyword arguments differently (see below). There are inspection functions for querying the print request. When <CODE>print</CODE> actually prints an object, it calls <CODE>print-object</CODE>. Though the inspection functions for querying the print request allow you to inspect any parameter of the print request, <CODE>print-object</CODE> methods should only need to call <CODE>print-length</CODE>. All other aspects of the print request are handled by <CODE>print</CODE>. There is one exception which is described in <A HREF="io_26.htm#MARKER-9-204">Section 4.3</A>.
<DT><DD>The <I>level</I> keyword controls how deep into a nested data structure to print. The value <CODE>#f</CODE> indicates that there is no limit. The default, <CODE>*print-level*</CODE>, has no effect on recursive calls to <CODE>print</CODE>. Recursive calls to <CODE>print</CODE> may change the value of <CODE>print-level</CODE> explicitly, but <CODE>print</CODE> always uses a value to ensure the print request formed by the first call to <CODE>print</CODE> is never exceeded. For example, if a first call to <CODE>print</CODE> set the level to 5, and while at a depth of 3, a recursive call specified a level of 4, the recursive call would only descend 2 more levels, not 4.
<DT><DD>The <I>length</I> keyword controls how many elements of a sequence to print before printing ellipsis notation (<CODE>...</CODE>). The value <CODE>#f</CODE> indicates that there is no limit. The <CODE>print-length</CODE> control can be interpreted loosely by some <CODE>print-object</CODE> methods to control how many <EM>elements</EM> of any kind of object to print; for example, the default <CODE>&lt;object&gt;</CODE> method might regard <CODE>print-length</CODE> to determine how many slot-name/value pairs to print. The default, <CODE>*print-length*</CODE>, has no effect on recursive calls to <CODE>print</CODE>. Recursive calls to <CODE>print</CODE> may change the value of <CODE>print-length</CODE> explicitly, but they may only decrease the value, never increase it.
<DT><DD>The <I>circle?</I> keyword indicates whether printing should check all subcomponent references to make sure the printing process does not infinitely recurse through a data structure. Circular printing also tags objects that occur more than once when they are first printed, and later occurrences are printed as a reference to the previously emitted tag. The default, <CODE>*print-circle?*</CODE>, has no effect on recursive calls to <CODE>print</CODE>. If <CODE>print-circle?</CODE> is already <CODE>#t</CODE>, then it remains <CODE>#t</CODE> throughout all recursive calls. If <CODE>print-circle?</CODE> is <CODE>#f</CODE>, then recursive calls to <CODE>print</CODE> can change the value to <CODE>#t</CODE>; however, when printing exits the dynamic scope of the call that changed the value to <CODE>#t</CODE>, the value reverts back to <CODE>#f</CODE>. If the original call to <CODE>print</CODE> specifies <I>circle?</I> as <CODE>#f</CODE>, and dynamically distinct recursive calls turn circular printing on and off, all output generated while circular printing was on shares the same tagging space; that is, if <CODE>#1#</CODE> is printed twice, once from each of two distinct recursive calls to print, then each <CODE>#1#</CODE> is guaranteed to signify the same <CODE>==</CODE> object.
<DT><DD>The <I>pretty?</I> keyword indicates whether printing should attempt to insert line breaks and indentation to format objects according to how programmers tend to find it easier to read data. The default, <CODE>*print-pretty?*</CODE>, has no effect on recursive calls to <CODE>print</CODE>. If <CODE>print-pretty?</CODE> is already <CODE>#t</CODE>, then it remains <CODE>#t</CODE> throughout all recursive calls. If <CODE>print-pretty?</CODE> is <CODE>#f</CODE>, then recursive calls to <CODE>print</CODE> can change the value to <CODE>#t</CODE>; however, when printing exits the dynamic scope of the call that changed the value to <CODE>#t</CODE>, the value reverts back to <CODE>#f</CODE>.
</DL>
<STRONG><A NAME=MARKER-2-191></A><A NAME=MARKER-2-192></A>print-to-string</STRONG>
<P><I>Function</I></P>
<PRE>
print-to-string <I>object</I> #key <I>level length circle? pretty?</I> =&gt; <I>result</I>
<P></P>
</PRE>
<DL>
<DT><DD>Calls <CODE>print</CODE> to produce output according to the print request formed by the keyword arguments and returns the result as a string. The <I>level</I>, <I>length</I>, <I>circle?</I>, and <I>pretty?</I> keywords are as for <CODE>print</CODE>.
</DL>
<STRONG><A NAME=MARKER-2-193></A><A NAME=MARKER-2-194></A>print-object</STRONG>
<P><I>Open generic function</I></P>
<PRE>
print-object <I>object stream </I>=&gt; ()
<P></P>
</PRE>
<DL>
<DT><DD>Prints an <I>object</I> to a <I>stream</I>. You should extend the ability of <CODE>print</CODE> to print various objects by adding methods to the <CODE>print-object</CODE> function. When <CODE>print</CODE> actually prints an object, it calls <CODE>print-object</CODE>. You should never call <CODE>print-object</CODE> directly.
</DL>
<P>The Print module exports the following variables which provide default values for calls to the print function. Their values are implementation-dependent.</P>
<STRONG><A NAME=MARKER-2-195></A><A NAME=MARKER-2-196></A>*print-level*</STRONG>
<P><I>Variable</I></P>
<DL>
<DT><DD>This is an <CODE>&lt;integer&gt;</CODE> that controls how deeply into a nested expression to print.
</DL>
<STRONG><A NAME=MARKER-2-197></A><A NAME=MARKER-2-198></A>*print-length*</STRONG>
<P><I>Variable</I></P>
<DL>
<DT><DD>This is an <CODE>&lt;integer&gt;</CODE> that controls how many elements at a given level to print.
</DL>
<STRONG><A NAME=MARKER-2-199></A><A NAME=MARKER-2-200></A>*print-circle?*</STRONG>
<P><I>Variable</I></P>
<DL>
<DT><DD>A boolean that controls whether or not to print recursively. When <CODE>*print-circle* </CODE>is <CODE>#f</CODE>, printing proceeds recursively and attempts to print a circular structure results in failure to terminate.
</DL>
<STRONG><A NAME=MARKER-2-201></A><A NAME=MARKER-2-202></A>*print-pretty*</STRONG>
<P><I>Variable</I></P>
<DL>
<DT><DD>A boolean that controls whether or not print does pretty-printing. 
</DL>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>System and I/O Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="io_26.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="io_24.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="io_23.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="io_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="io_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="io_333.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
