<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="io_1.htm">
<LINK REL=UP HREF="io_27.htm">
<LINK REL=PREV HREF="io_27.htm">
<LINK REL=NEXT HREF="io_29.htm">
<TITLE> print</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING28></A>

<DIV>
<P><A HREF="io_29.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="io_27.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="io_27.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="io_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="io_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="io_333.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.4   The PRINT module</P>

</DIV>
<A NAME=HEADING28-0></A>
<H1> <A NAME=MARKER-2-220></A><A NAME=MARKER-2-221></A><A NAME=MARKER-9-222></A>print</H1>
<P><I>Function</I></P>
<H3>Summary</H3>
<P> Prints <I>object </I>to the specified stream.</P>
<H3>Signature</H3>
<dl><dd><pre>print <I>object</I> <I>stream</I> #key <I>level length circle? pretty?</I> =&gt; ()</pre></dl>
<H3>Arguments</H3>
<DL>
<P> </P><DT>object<DD> An instance of <CODE>&lt;object&gt;</CODE>.
<P> </P><DT><I>stream</I><DD> An instance of <CODE>&lt;stream&gt;</CODE>.
<P> </P><DT><I>level<CODE> </CODE></I><DD> #f or an instance of <CODE>&lt;fixed-integer&gt;</CODE>. Default value: <CODE>*print-level*</CODE>.
<P> </P><DT><I>length</I> <DD> <CODE>#f</CODE> or an instance of <CODE>&lt;fixed-integer&gt;</CODE>. Default value: <CODE>*print-length*</CODE>.
<P> </P><DT><I>circle?</I> <DD> An instance of <CODE>&lt;boolean&gt;</CODE>. Default value: <CODE>*print-circle?*</CODE>.
<P> </P><DT><I>pretty?</I> <DD> An instance of <CODE>&lt;boolean&gt;</CODE>. Default value: <CODE>*print-pretty?*</CODE>.
</DL>
<H3>Values</H3>
<DL>
<P> </P><DT>None.<DD>
</DL>
<H3><A NAME=MARKER-10-223></A>Library</H3>
<dl><dd><pre>io</pre></dl>
<H3>Module</H3>
<dl><dd><pre>print</pre></dl>
<H3>Description</H3>
<P> Prints <I>object </I>to <I>stream</I> according to the print request formed by the keyword arguments. A first call to <CODE>print</CODE> creates a printing stream to represent the print request, and recursive calls to <CODE>print</CODE> on this printing stream process the keyword arguments differently (see below). There are inspection functions for querying the print request. When <CODE>print</CODE> actually prints an object, it calls <CODE>print-object</CODE>. Though the inspection functions for querying the print request allow you to inspect any parameter of the print request, <CODE>print-object</CODE> methods should only need to call <CODE>print-length</CODE>. All other aspects of the print request are handled by <CODE>print</CODE>. There is one exception, which is described in <A HREF="io_26.htm#MARKER-9-204">Section 4.3 on page 14</A>.</P>
<P> The <I>level</I> keyword controls how deep into a nested data structure to print. The value <CODE>#f</CODE> indicates that there is no limit. The default, <CODE>*print-level*</CODE>, has no effect on recursive calls to <CODE>print</CODE>. Recursive calls to <CODE>print</CODE> may change the value of <CODE>print-level</CODE> explicitly, but <CODE>print</CODE> always uses a value to ensure the print request formed by the first call to <CODE>print</CODE> is never exceeded. For example, if a first call to <CODE>print</CODE> set the level to 5, and while at a depth of 3, a recursive call specified a level of 4, the recursive call would only descend 2 more levels, not 4.</P>
<P> The <I>length</I> keyword controls how many elements of a sequence to print before printing ellipsis notation (<CODE>...</CODE>). The value <CODE>#f</CODE> indicates that there is no limit. The <CODE>print-length</CODE> control can be interpreted loosely by some <CODE>print-object</CODE> methods to control how many <EM>elements</EM> of any kind of object to print; for example, the default <CODE>&lt;object&gt;</CODE> method might regard <CODE>print-length</CODE> to determine how many slot-name/value pairs to print. The default, <CODE>*print-length*</CODE>, has no effect on recursive calls to <CODE>print</CODE>. Recursive calls to <CODE>print</CODE> may change the value of <CODE>print-length</CODE> explicitly, but they may only decrease the value, never increase it.</P>
<P> The <I>circle?</I> keyword indicates whether printing should check all subcomponent references to make sure the printing process does not infinitely recurse through a data structure. Circular printing also tags objects that occur more than once when they are first printed, and later occurrences are printed as a reference to the previously emitted tag. The default, <CODE>*print-circle?*</CODE>, has no effect on recursive calls to <CODE>print</CODE>. If <CODE>print-circle?</CODE> is already <CODE>#t</CODE>, then it remains <CODE>#t</CODE> throughout all recursive calls. If <CODE>print-circle?</CODE> is <CODE>#f</CODE>, then recursive calls to <CODE>print</CODE> can change the value to <CODE>#t</CODE>; however, when printing exits the dynamic scope of the call that changed the value to <CODE>#t</CODE>, the value reverts back to <CODE>#f</CODE>. If the original call to <CODE>print</CODE> specifies <I>circle?</I> as <CODE>#f</CODE>, and dynamically distinct recursive calls turn circular printing on and off, all output generated while circular printing was on shares the same tagging space; that is, if <CODE>#1#</CODE> is printed twice, once from each of two distinct recursive calls to print, then each <CODE>#1#</CODE> is guaranteed to signify the same <CODE>==</CODE> object.</P>
<P> The <I>pretty?</I> keyword indicates whether printing should attempt to insert line breaks and indentation to format objects according to how programmers tend to find it easier to read data. The default, <CODE>*print-pretty?*</CODE>, has no effect on recursive calls to <CODE>print</CODE>. If <CODE>print-pretty?</CODE> is already <CODE>#t</CODE>, then it remains <CODE>#t</CODE> throughout all recursive calls. If <CODE>print-pretty?</CODE> is <CODE>#f</CODE>, then recursive calls to <CODE>print</CODE> can change the value to <CODE>#t</CODE>; however, when printing exits the dynamic scope of the call that changed the value to <CODE>#t</CODE>, the value reverts back to <CODE>#f</CODE>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>System and I/O Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="io_29.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="io_27.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="io_27.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="io_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="io_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="io_333.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
