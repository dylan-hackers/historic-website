<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="io_1.htm">
<LINK REL=UP HREF="io_42.htm">
<LINK REL=PREV HREF="io_64.htm">
<LINK REL=NEXT HREF="io_66.htm">
<TITLE>5.8   Wrapper streams</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING65></A>

<DIV>
<P><A HREF="io_66.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="io_64.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="io_42.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="io_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="io_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="io_333.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5 The Streams Module</P>

</DIV>
<A NAME=HEADING65-0></A>
<A NAME=UID-streams-886956></A>
<H1>5.8   <A NAME=MARKER-10-374></A><A NAME=MARKER-2-375></A><A NAME=MARKER-2-376></A><A NAME=MARKER-9-377></A>Wrapper streams</H1>
<P>Sometimes stream data requires conversion before an application can use it: you might have a stream over a file of EBCDIC characters which you would prefer to handle as their ASCII equivalents, or you might need to encrypt or decrypt file data. </P>
<P>Wrapper streams provide a mechanism for working with streams which require such conversion. Wrapper streams hold on to an underlying stream, delegating to it most streams operations. The wrapper stream carries out appropriate processing in its own implementations of the streaming protocol.</P>
<P>The Streams module includes a base class called <A HREF="io_136.htm#MARKER-9-777"><CODE>&lt;wrapper-stream&gt;</CODE></A> upon which other wrapping streams can be implemented.</P>
<P>A subclass of <A HREF="io_136.htm#MARKER-9-777"><CODE>&lt;wrapper-stream&gt;</CODE></A> can "pass on" functions such as <BR><A HREF="io_106.htm#MARKER-9-622"><CODE>read-element</CODE></A> and <A HREF="io_138.htm#MARKER-9-787"><CODE>write-element</CODE></A> by simply delegating these operations to the inner stream, as shown below:</P>
<PRE>
define method read-element (ws :: &lt;io-wrapper-stream&gt;, 
                            #key on-end-of-stream)
    =&gt; (element)
  read-element(ws.inner-stream, 
               on-end-of-stream: on-end-of-stream)
end method;
<P></P>
define method write-element (ws :: &lt;io-wrapper-stream&gt;, element)
    =&gt; ()
  write-element(ws.inner-stream, element)
end method;
<P></P>
</PRE>
<P>Assuming that <CODE>&lt;io-wrapper-stream&gt;</CODE> delegates all other operations to its inner stream, the following would suffice to implement a 16-bit Unicode character stream wrapping an 8-bit character stream.</P>
<PRE>
define class &lt;unicode-stream&gt; (&lt;io-wrapper-stream&gt;) end class;
<P></P>
define method read-element (s :: &lt;unicode-stream&gt;,
                            #key on-end-of-stream) 
    =&gt; (ch :: &lt;unicode-character&gt;)
  with-stream-locked (s)
    let first-char =  read-element(s.inner-stream, 
                                   on-end-of-stream);
    let second-char = read-element(s.inner-stream,
                                   on-end-of-stream)
  end;
  convert-byte-pair-to-unicode(first-char, second-char)
end method;
<P></P>
define method write-element  (s :: &lt;unicode-stream&gt;, 
                              c :: &lt;character&gt;)
    =&gt; ()
  let (first-char, second-char) = 
        convert-unicode-to-byte-pair(c);
  with-stream-locked (s)
    write-element(s.inner-stream, first-char);
    write-element(s.inner-stream, second-char)
  end;
  c
end method;
<P></P>
define method stream-position (s :: &lt;unicode-stream&gt;) 
  =&gt;  p :: &lt;integer&gt;;
  truncate/(stream-position(s.inner-stream), 2)
end method;
<P></P>
define method stream-position-setter  (p :: &lt;integer&gt;, 
                                    s :: &lt;unicode-stream&gt;);
  stream-position(s.inner-stream) := p * 2
end method;
<P></P>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC --><DL>
<DL>
<DT><A REL=BELOW HREF="io_66.htm#HEADING66-0"><B>5.8.1  </B> - Wrapper streams and delegation</A>
<DD>
</DL>
</DL>


</DIV>

<HR>
<ADDRESS>System and I/O Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="io_66.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="io_64.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="io_42.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="io_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="io_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="io_333.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
