<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="io_1.htm">
<LINK REL=UP HREF="io_23.htm">
<LINK REL=PREV HREF="io_25.htm">
<LINK REL=NEXT HREF="io_27.htm">
<TITLE>4.3   Pretty printing</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING26></A>

<DIV>
<P><A HREF="io_27.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="io_25.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="io_23.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="io_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="io_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="io_333.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4 The Printing Modules</P>

</DIV>
<A NAME=HEADING26-0></A>
<A NAME=UID-print-888122></A>
<H1>4.3   <A NAME=MARKER-2-203></A><A NAME=MARKER-9-204></A>Pretty printing</H1>
<P>When writing <CODE>print-object</CODE> methods, you can ignore whether pretty printing is in effect. If you write your <CODE>print-object</CODE> method using pretty printing functions, then when pretty printing is in effect, the output is pretty printed. When pretty printing is not in effect, your method produces output as though you had not written it to use pretty printing. All <CODE>print-object</CODE> methods that are written to do pretty printing must call the pretty printing functions within the dynamic scope of a call to <CODE>pprint-logical-block</CODE>; otherwise, the pretty printing functions are no-ops.</P>
<P>The following interfaces are exported from the <CODE>pprint</CODE> module:</P>
<STRONG><A NAME=MARKER-2-205></A><A NAME=MARKER-2-206></A>*default-line-length*</STRONG>
<P><I>Variable</I></P>
<DL>
<DT><DD>An integer that controls the line length used by the pretty printer to determine how much output will fit on a single line. The value must be an integer. The default is 80.
</DL>
<STRONG><A NAME=MARKER-2-207></A><A NAME=MARKER-2-208></A>*print-miser-width*</STRONG>
<P><I>Variable</I></P>
<DL>
<DT><DD>An integer that controls <EM>miser mode</EM>. Whenever a logical block (see <CODE>pprint-logical-block</CODE>) begins in a column of output that is greater than <CODE>*default-line-length* - *print-miser-width*</CODE>, then pretty printing is in miser mode. The value must be an integer or <CODE>#f</CODE> (the default). <CODE>#f</CODE> indicates that the pretty printer should never enter miser mode.
</DL>
<STRONG><A NAME=MARKER-2-209></A><A NAME=MARKER-2-210></A>pprint-logical-block</STRONG>
<P><I>Function</I></P>
<PRE>
pprint-logical-block <I>stream</I> #key <I>prefix per-line-prefix body suffix column</I> =&gt; ()
<P></P>
</PRE>
<DL>
<DT><DD>Groups printing into a logical block. The logical block provides boundaries for new levels of indentation, affects <CODE>#&quot;linear&quot;</CODE> newlines, and so on. The <I>prefix</I> keyword is a string to print at the beginning of the logical block. The blocks indentation is automatically set to be one character position greater than the column in which <I>prefix</I> ends. Alternatively, <I>per-line-prefix</I> is a string to print on every line of the logical block. The <CODE>pprint-logical-block</CODE> function signals an error if it is called with both <I>prefix</I> and <I>per-line-prefix</I> supplied as non-<CODE>#f</CODE>. 
<DT><DD>The <I>suffix</I> keyword is a string to print at the end of the logical block.
<DT><DD>The <I>column</I> keyword advises the pretty printer as to the current column of the output stream (the default is zero). This keyword may be ignored entirely by some methods, and it may be ignored in some cases by methods that can better determine the stream's current output column.
<DT><DD>The <I>body</I> keyword must be a function that can take one argument, and this argument is a stream. The function specified by <I>body</I> should use the <I>stream</I> argument passed to it; the <I>body</I> function should not close over the <I>stream</I> argument to <CODE>pprint-logical-block</CODE>. The function <CODE>pprint-logical-block</CODE> wraps <I>stream</I> with a pretty printing stream when <I>stream</I> is any other kind of stream. If <I>stream</I> is already a pretty printing stream, then the <I>body</I> function is called on <I>stream</I>.
<DT><DD>All <CODE>print-object</CODE> methods that are written to do pretty printing must call the other pretty printing functions within the dynamic scope of a call to <CODE>pprint-logical-block</CODE>; otherwise, the pretty printing functions are no-ops.
</DL>
<STRONG><A NAME=MARKER-2-211></A><A NAME=MARKER-2-212></A>pprint-newline</STRONG>
<P><I>Function</I></P>
<PRE>
pprint-newline <I>kind stream</I> =&gt; ()
<P></P>
</PRE>
<DL>
<DT><DD>Announces a conditional newline to the pretty printer. The pretty printer emits a newline depending on the <I>kind</I> and the state of the pretty printer's current line buffer. The <I>kind</I> argument can be one of the following:
<DT><CODE>#&quot;fill&quot;</CODE><DD><P> Emit a newline if the current <EM>section</EM> of output does not fit on one line.</P>
<DT><CODE>#&quot;linear&quot;</CODE><DD><P> Emit a newline if any <CODE>#&quot;linear&quot;</CODE> newline in the current <EM>section</EM> needs to be emitted. That is, if a current <EM>section</EM> of output cannot fit on one line, and any one of the <CODE>#&quot;linear&quot;</CODE> newlines in the section needs to be emitted, then emit them all.</P>
<DT><CODE>#&quot;miser&quot;</CODE><DD><P> Emit a newline as if it were a <CODE>#&quot;linear&quot;</CODE> newline, but only when <EM>miser</EM> <EM>mode</EM> is in effect. Miser style is in effect when a logical block starts past a particular column of output.</P>
<DT><CODE>#&quot;mandatory&quot;</CODE><DD><P> Emit a newline always. Establish that any containing <EM>sections</EM> cannot be printed on a single line so that <CODE>#&quot;linear&quot;</CODE> and <CODE>#&quot;miser&quot;</CODE> newlines will be emitted as appropriate.</P>
</DL>
<STRONG><A NAME=MARKER-2-213></A><A NAME=MARKER-2-214></A>pprint-indent</STRONG>
<P><I>Function</I></P>
<PRE>
pprint-indent <I>relative-to n stream</I> =&gt; ()
<P></P>
</PRE>
<DL>
<DT><DD>Specifies the indentation to use within the current logical block. When <I>relative-to</I> is <CODE>#&quot;block&quot;</CODE>, then <CODE>pprint-indent</CODE> sets the indentation to the column of the first character of the logical block plus <I>n</I>. When <I>relative-to</I> is <CODE>#&quot;current&quot;</CODE>, then <CODE>pprint-indent</CODE> sets the indentation to the current column plus <I>n</I>. In both cases, <I>n</I> is a <CODE>&lt;fixed-integer&gt;</CODE>.
</DL>
<STRONG><A NAME=MARKER-2-215></A><A NAME=MARKER-2-216></A>pprint-tab</STRONG>
<P><I>Function</I></P>
<PRE>
pprint-tab <I>kind colnum colinc stream</I> =&gt; ()
<P></P>
</PRE>
<DL>
<DT><I>kind</I><DD><P> One of <CODE>#&quot;line&quot;</CODE>, <CODE>#&quot;line-relative&quot;</CODE>, <CODE>#&quot;section&quot;</CODE>, <CODE>#&quot;section-relative&quot;</CODE>.</P>
<DT><I>colnum</I><DD><P> An instance of <CODE>&lt;fixed-integer&gt;</CODE>.</P>
<DT><I>colinc</I><DD><P> An instance of <CODE>&lt;fixed-integer&gt;</CODE>.</P>
<DT><I>stream</I><DD><P> An instance of <CODE>&lt;stream&gt;</CODE>.</P>
<DT><DD>Announces a tab to the pretty printer. <I>Colnum</I> and <I>colinc</I> have meaning based on the value of <I>kind</I>, which can be one of the following:
<DT><CODE>#&quot;line&quot;</CODE><DD><P> Tab to output column <I>colnum</I>. If the output is already at or beyond <I>colnum</I>, then add <I>colinc</I> to <I>colnum</I> until printing can continue at a column beyond the end of the output already on the line.</P>
<DT><CODE>#&quot;line-relative&quot;</CODE> <DD><P></P>
<DT><DD>Output <I>colnum</I> spaces. Then output enough spaces to tab to a column that is a multiple of <I>colinc</I> from the beginning of the line.
<DT><CODE>#&quot;section&quot;</CODE><DD><P> This is similar to <CODE>#&quot;line&quot;</CODE>, but column counting is relative to the beginning of the current <EM>section</EM> rather than the beginning of the line.</P>
<DT><CODE>#&quot;section-relative&quot;</CODE> <DD><P></P>
<DT><DD>This is similar to <CODE>#&quot;line-relative&quot;</CODE>, but column counting is relative to the beginning of the current <EM>section</EM> rather than the beginning of the line.
<DT><DD>In all cases, <I>colnum</I> and <I>colinc</I> are instances of <CODE>&lt;fixed-integer&gt;</CODE>.
</DL>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>System and I/O Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="io_27.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="io_25.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="io_23.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="io_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="io_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="io_333.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
