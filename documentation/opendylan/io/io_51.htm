<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="io_1.htm">
<LINK REL=UP HREF="io_49.htm">
<LINK REL=PREV HREF="io_50.htm">
<LINK REL=NEXT HREF="io_52.htm">
<TITLE>5.5.1.2   Options when creating file streams</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING51></A>

<DIV>
<P><A HREF="io_52.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="io_50.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="io_49.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="io_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="io_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="io_333.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5.5.1   Creating streams</P>

</DIV>
<A NAME=HEADING51-0></A>
<H1>5.5.1.2   <A NAME=MARKER-9-288></A>Options when creating file streams</H1>
<P>When creating file streams, you can supply the following init-keywords to <CODE>make</CODE> in addition to those described in <A HREF="io_50.htm#MARKER-9-285">Section 5.5.1.1 on page 37</A>: </P>
<DL>
<DT><CODE>if-exists:</CODE><DD><P> An action to take if the file already exists.</P>
<DT><CODE>if-does-not-exist</CODE>:<DD><P></P>
<DT><DD>An action to take if the file does not already exist.
<DT><CODE>element-type:</CODE><DD><P> How the elements of the underlying file are accessed.</P>
<DT><CODE>asynchronous?:</CODE><DD><P> Allows asynchronous writing of stream data to disk.</P>
<DT><CODE>share-mode:</CODE><DD><P> How the file can be accessed while the stream is operating on it.</P>
</DL>
<P>The <CODE>if-exists:</CODE> init-keyword allows you to specify an action to take if the file named by <I>filename</I> already exists. The options are:</P>
<DL>
<DT><CODE>#f</CODE> <DD><P> The file is opened with the stream position at the beginning. This is the default when the stream's direction is <CODE>#&quot;input&quot;</CODE> or <CODE>#&quot;input-output&quot;</CODE>.</P>
<DT><CODE>#&quot;new-version&quot;</CODE> <DD><P></P>
<DT><DD>If the underlying file system supports file versioning, a new version of the file is created. This is the default when the stream's direction is <CODE>#&quot;output&quot;</CODE>. 
<DT><DD>If the file system does not support file versioning, the default is <CODE>#&quot;replace&quot;</CODE> when the direction of the stream is <CODE>#&quot;output&quot;</CODE>. 
<DT><CODE>#&quot;overwrite&quot;</CODE><DD><P> Set the stream's position to the beginning of the file, but preserve the current contents of the file. This is useful when the direction is <CODE>#&quot;input-output&quot;</CODE> or <CODE>#&quot;output&quot;</CODE> and you want to overwrite an existing file.</P>
<DT><CODE>#&quot;replace&quot;</CODE><DD><P> Delete the existing file and create a new file.</P>
<DT><CODE>#&quot;append&quot;</CODE><DD><P> Set the stream's initial position to the end of the existing file so that all new output occurs at the end of the file. This option is only useful if the file is writeable.</P>
<DT><CODE>#&quot;truncate&quot;</CODE><DD><P> If the file exists, it is truncated, setting the size of the file to 0. If the file does not exist, create a new file. </P>
<DT><CODE>#&quot;signal&quot;</CODE><DD><P> Signal a <A HREF="io_87.htm#MARKER-9-527"><CODE>&lt;file-exists-error&gt;</CODE></A> condition. </P>
</DL>
<P>The <CODE>if-does-not-exist:</CODE> init-keyword allows you to specify an action to take if the file named by <I>filename</I> does not exist. The options are:</P>
<DL>
<DT><CODE>#f</CODE><DD><P> No action.</P>
<DT><CODE>#&quot;signal&quot;<EM> </EM></CODE><DD><P> Signal a <A HREF="io_85.htm#MARKER-9-519"><CODE>&lt;file-does-not-exist-error&gt;</CODE></A> condition. This is the default when the stream's direction is <CODE>#&quot;input&quot;</CODE>.</P>
<DT><CODE>#&quot;create&quot;</CODE><DD><P> Create a new zero-length file. This is the default when the stream's direction is <CODE>#&quot;output&quot;</CODE> or <CODE>#&quot;input-output&quot;</CODE>.</P>
</DL>
<P>Because creating a file stream <EM>always</EM> involves an attempt to open the underlying file, the aforementioned error conditions will occur during file stream instance initialization.</P>
<P>File permissions are checked when creating and opening file streams, and if the user attempts to open a file for input, and has no read permission, or to open a file for output, and has no write permission, then an <A HREF="io_93.htm#MARKER-9-558"><CODE>&lt;invalid-file-permissions-error&gt;</CODE></A> condition is signalled at the time the file stream is created.</P>
<P>The <CODE>element-type:</CODE> init-keyword controls how the elements of the underlying file are accessed. This allows file elements to be represented abstractly; for instance, contiguous elements could be treated as a single database record. The three possible element types are: </P>
<DL>
<DT><A HREF="io_77.htm#MARKER-9-477"><CODE>&lt;byte-character&gt;</CODE></A> <DD><P></P>
<DT><DD>The file is accessed as a sequence of 8-bit characters.
<DT><A HREF="io_131.htm#MARKER-9-757"><CODE>&lt;unicode-character&gt;</CODE></A> <DD><P></P>
<DT><DD>The file is accessed as a sequence of 16-bit Unicode characters.
<DT><A HREF="io_76.htm#MARKER-9-471"><CODE>&lt;byte&gt;</CODE></A><DD><P> The file is accessed as a sequence of unsigned 8-bit integers.</P>
</DL>
<P>The <CODE>asynchronous?:</CODE> init-keyword allows asynchronous writing of stream data to disk. If <CODE>#f</CODE>, whenever the stream has to write a buffer to disk, the thread which triggered the write must wait for the write to complete. If <CODE>asynchronous?</CODE> is <CODE>#t</CODE>, the write proceeds in parallel with the subsequent actions of the thread.</P>
<P>Note that asynchronous writes complicate error handling a bit. Any write error which occurs most likely occurs after the call which triggered the write. If this happens, the error is stored in a queue, and the next operation on that stream signals the error. If you <CODE>close</CODE> the stream with the <I>wait?</I> flag <CODE>#f</CODE>, the close happens asynchronously (after all queued writes complete) and errors may occur after <CODE>close</CODE> has returned. A method <CODE>wait-for-io-completion</CODE> is provided to catch any errors that may occur after <CODE>close</CODE> is called.</P>
<P>The <CODE>share-mode:</CODE> keyword determines how a file can be accessed by other streams while the stream has it open. The possible values are:</P>
<DL>
<DT><CODE>#"share-read"</CODE><DD><P> Allow other streams to be opened to the file for reading but not for writing.</P>
<DT><CODE>#"share-write"</CODE><DD><P> Allow other streams to be opened for writing but not for reading.</P>
<DT><CODE>#"share-read-write"</CODE><DD><P></P>
<DT><DD>Allow other streams to be opened for writing or reading.
<DT><CODE>#"exclusive"</CODE><DD><P> Do not allow other streams to be opened to this file. </P>
</DL>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>System and I/O Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="io_52.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="io_50.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="io_49.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="io_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="io_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="io_333.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
