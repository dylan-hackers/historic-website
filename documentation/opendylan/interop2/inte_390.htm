<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inte_388.htm">
<LINK REL=PREV HREF="inte_389.htm">
<LINK REL=NEXT HREF="inte_391.htm">
<TITLE> &lt;BSTR&gt;</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING390></A>

<DIV>
<P><A HREF="inte_391.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_389.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_388.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.12   The OLE-AUTOMATION module </P>

</DIV>
<A NAME=HEADING390-0></A>
<H1> <A NAME=MARKER-2-1285></A><A NAME=MARKER-2-1286></A><A NAME=MARKER-10-1287></A><A NAME=MARKER-9-1288></A>&lt;BSTR&gt;</H1>
<P><I>Sealed concrete primary class</I></P>
<H3>Summary</H3>
<P> The class of BASIC strings.</P>
<H3>Superclasses</H3>
<dl><dd><pre>&lt;string&gt;  &lt;C-Unicode-string&gt; </pre></dl>
<H3>Description</H3>
<P> The class of BASIC strings. Corresponds to the string representation used by OLE Automation property values and dispatch method arguments. The elements are 16-bit Unicode characters. </P>
<P> Besides supporting the full <CODE>&lt;string&gt;</CODE> protocol, this class can also be regarded as a C pointer, since it is a subclass of the C-FFI type <CODE>&lt;C-unicode-string&gt;</CODE>. </P>
<P> You can use the constant <CODE>$NULL-BSTR</CODE> to pass a NULL pointer in place of a string, and the function <CODE>null-pointer?</CODE> to test a received <CODE>&lt;BSTR&gt;</CODE> to see if it is a NULL pointer. However, a NULL pointer is treated the same as an empty string by the iteration protocol, so it may not be necessary to do this test.</P>
<P> <B>Note:</B> The Win32 OLE/COM libraries allocate memory on the C heap for these strings. This means that the memory is not automatically reclaimed by the Functional Developer garbage collector. You must call the function <CODE>destroy</CODE> on a <CODE>&lt;BSTR&gt;</CODE> when you are finished with it.</P>
<P> You can use the Dylan <CODE>as</CODE> coercion function to convert between <CODE>&lt;BSTR&gt;</CODE> and other string types. </P>
<P> The function <CODE>copy-as-BSTR</CODE> copies any kind of <CODE>&lt;string&gt;</CODE> to a newly allocated <CODE>&lt;BSTR&gt;</CODE>; you should use this instead of <CODE>as</CODE> when returning a value that will be deallocated by the receiving program. The <CODE>copy-as-BSTR</CODE> function returns <CODE>$NULL-BSTR</CODE> if the argument is <CODE>#f</CODE> or a NULL pointer.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>OLE, COM, ActiveX and DBMS Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inte_391.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_389.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_388.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
