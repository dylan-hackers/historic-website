<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inte_366.htm">
<LINK REL=PREV HREF="inte_366.htm">
<LINK REL=NEXT HREF="inte_368.htm">
<TITLE>4.6.1   Overview</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING367></A>

<DIV>
<P><A HREF="inte_368.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_366.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_366.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.6   Building an Automation server application</P>

</DIV>
<A NAME=HEADING367-0></A>
<H1>4.6.1   Overview</H1>
<P>To create an Automation server in Dylan, you need to provide four things: </P>
<DL>
<DT><DD>1.  A Dylan class, and Dylan methods on that class, which implement the dispinterface functionality that you wish to expose to controller applications. Your class must be a subclass of <A HREF="inte_394.htm#MARKER-9-1307"><CODE>&lt;simple-dispatch&gt;</CODE>,  page 201</A>.
<DT><DD>2.  A description of the functionality that the server is making available. This is the <I>type information</I> required for the <I>type library</I> that potential Automation clients can query and that servers use as part of the implementation of dispatching. See <A HREF="inte_395.htm#MARKER-9-1311"><CODE>&lt;disp-type-info&gt;</CODE>,  page 203</A> and <A HREF="inte_399.htm#MARKER-9-1326"><CODE>&lt;coclass-type-info&gt;</CODE>,  page 211</A>. <A NAME=MARKER-10-1210></A> 
<DT><DD>3.  A <I>class factory</I> that will instantiate the COM class that the server implements when a controller applications requests it. See <A HREF="inte_393.htm#MARKER-9-1303"><CODE>&lt;class-factory&gt;</CODE>,  page 199</A>.
<DT><DD>4.  Code to register the server so that controller applications can invoke it. See <A HREF="inte_426.htm#MARKER-9-1400"><CODE>register-automation-server</CODE>,  page 231</A>.
</DL>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>OLE, COM, ActiveX and DBMS Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inte_368.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_366.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_366.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
