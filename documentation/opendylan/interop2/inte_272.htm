<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inte_271.htm">
<LINK REL=PREV HREF="inte_271.htm">
<LINK REL=NEXT HREF="inte_273.htm">
<TITLE>2.2.1   COM interfaces and methods</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING272></A>

<DIV>
<P><A HREF="inte_273.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_271.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_271.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>2.2   Overview of OLE/COM and the Functional Developer API</P>

</DIV>
<A NAME=HEADING272-0></A>
<H1>2.2.1   <A NAME=MARKER-2-867></A><A NAME=MARKER-2-868></A><A NAME=MARKER-2-869></A><A NAME=MARKER-2-870></A>COM interfaces and methods</H1>
<P>In COM, software components communicate by means of <I>interfaces</I>. Interfaces are implemented by server components and used by client components. COM objects consist of one or more interfaces, usually two or more. </P>
<P>Interfaces consist of a number of <I>methods</I>. Methods are functions that client software can call to access the server's features. Note that these methods are not the same as Dylan methods: where necessary, we call them <I>COM methods</I> to distinguish them from Dylan methods. </P>
<P>Clients obtain pointers to interfaces in order to call the COM methods they contain. They do so by communicating with a COM support library. Microsoft Windows 95 and Windows NT both contain such a library. The Functional Developer OLE/COM libraries make calls to this library as necessary. </P>
<P><A NAME=MARKER-10-871></A>COM defines a number of standard interfaces. The fundamental COM interface, which every COM object must support, is called <CODE>IUnknown</CODE>. (By convention, interface names always start with an 'I'.) </P>
<P>When a client instantiates a COM object, it typically gets back a pointer to <CODE>IUnknown</CODE>. After this, the client can attempt to get pointers to the other interfaces the object provides. For example, a word processor might implement an interface called <CODE>IContents</CODE> that provides services for creating and manipulating a table of contents, and an interface called <CODE>IPrint</CODE> that provides printing services.</P>
<P><CODE>IUnknown</CODE> provides three methods: <CODE>QueryInterface</CODE>, <CODE>AddRef</CODE>, and <CODE>Release</CODE>. <CODE>QueryInterface</CODE> is used to get pointers to other interfaces supported by the COM object, while <CODE>AddRef</CODE> and <CODE>Release</CODE> increment and decrement a reference count to enable the server to know when all clients have finished using the interface.</P>
<P>All COM interfaces inherit from the <CODE>IUnknown</CODE> interface. This <I>does</I> <I>not</I> mean they inherit the implementation of the <CODE>IUnknown</CODE> methods, just that they inherit the interface itself, meaning that all COM interfaces are required to implement <CODE>QueryInterface</CODE>, <CODE>AddRef</CODE> and <CODE>Release</CODE> themselves. Thus COM has interface inheritance but not implementation inheritance.</P>
<P>In the C/C++ world, COM developers would therefore have to include code for the three <CODE>IUnknown</CODE> methods in every interface they write, and also to repeat the code of any COM methods their interface might inherit from other interfaces. </P>
<P>Functional Developer represents interfaces using Dylan classes, and represents their methods using Dylan generic function methods specialized on those interface classes. All the Functional Developer OLE/COM API libraries export the Dylan class <CODE>&lt;IUnknown&gt;</CODE>, which represents the basic COM interface <CODE>IUnknown</CODE>.</P>
<P>Because COM specifies that the <CODE>IUnknown</CODE> interface must support <CODE>QueryInterface</CODE>, <CODE>AddRef</CODE>, and <CODE>Release</CODE>, the Functional Developer OLE/COM API libraries define Dylan methods for these operations on <CODE>&lt;IUnknown&gt;</CODE>. </P>
<P>Every COM interface in Dylan must be a subclass of <CODE>&lt;IUnknown&gt;</CODE>. This means that, through the standard Dylan generic function dispatch mechanisms, every COM interface you define will inherit the implementations of <CODE>QueryInterface</CODE>, <CODE>AddRef</CODE>, and <CODE>Release</CODE> that are defined on the Dylan class <CODE>&lt;IUnknown&gt;</CODE>. Thus COM's interface-inheritance-only limitation is overcome naturally. </P>
<P>If you prefer, you can override the inherited methods in the normal Dylan fashion, by adding Dylan methods specializing on your subclass of <CODE>&lt;IUnknown&gt;</CODE>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>OLE, COM, ActiveX and DBMS Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inte_273.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_271.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_271.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
