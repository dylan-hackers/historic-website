<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inte_347.htm">
<LINK REL=PREV HREF="inte_384.htm">
<LINK REL=NEXT HREF="inte_386.htm">
<TITLE>4.9   Memory management issues </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING385></A>

<DIV>
<P><A HREF="inte_386.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_384.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_347.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4 OLE Automation</P>

</DIV>
<A NAME=HEADING385-0></A>
<A NAME=UID-ole-automation-901247></A>
<H1>4.9   <A NAME=MARKER-2-1269></A><A NAME=MARKER-2-1270></A>Memory management issues </H1>
<P>Some of the values returned by functions in the OLE Automation API are actually allocated by the Win32 libraries, and thus use memory that will not be reclaimed automatically by the Dylan garbage collector. </P>
<P>If a property value or dispatch method result is a string, it will be represented as an instance of class <CODE>&lt;BSTR&gt;</CODE> ("BASIC string"), which is a subclass of <CODE>&lt;string&gt;</CODE> (but not a <CODE>&lt;byte-string&gt;</CODE>). This string value will be allocated by Win32. Similarly, sequences or arrays received as dispatch method results or property values will be instances of <A HREF="inte_391.htm#MARKER-9-1294"><CODE>&lt;ole-array&gt;</CODE></A> or <A HREF="inte_392.htm#MARKER-9-1297"><CODE>&lt;ole-vector&gt;</CODE></A>, again allocated by Win32. </P>
<P>To ensure that the memory occupied by such a value is recycled, you must call the function <CODE>destroy</CODE> on the string when it is no longer in use. </P>
<P>Also, if an interface (such as an instance of <A HREF="inte_393.htm#MARKER-9-1300"><CODE>&lt;class-factory&gt;</CODE></A> or <A HREF="inte_389.htm#MARKER-9-1284"><CODE>&lt;LPDISPATCH&gt;</CODE></A>) is received as a dispatch method result or property value, you must call <A HREF="inte_564.htm#MARKER-9-1902"><CODE>Release</CODE></A> on it when finished using it. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>OLE, COM, ActiveX and DBMS Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inte_386.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_384.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_347.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
