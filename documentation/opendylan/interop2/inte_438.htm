<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inte_436.htm">
<LINK REL=PREV HREF="inte_437.htm">
<LINK REL=NEXT HREF="inte_439.htm">
<TITLE> define coclass</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING438></A>

<DIV>
<P><A HREF="inte_439.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_437.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_436.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5.3   Macros for defining custom interfaces</P>

</DIV>
<A NAME=HEADING438-0></A>
<H1> <A NAME=MARKER-2-1482></A>define coclass</H1>
<P><I>Definition macro</I></P>
<H3>Summary</H3>
<P> Creates type information for a COM class (coclass) implemented in Dylan.</P>
<H3>Macro call</H3>
<DL><DD><PRE>define coclass <I>coclass-name</I> 
  <EM>{</EM> <I>typelib-clause</I> <EM>|</EM> <I>interface-clause</I> <EM>}*</EM>
end <EM>[</EM>coclass<EM>] [<I>coclass-name</I></EM> <EM>]</EM></PRE></DL>
<H3>Arguments</H3>
<DL>
<P> </P><DT><I>coclass-name</I><DD> name<SUB>bnf</SUB> 
<P> </P><DT><I>typelib-clause</I> <DD>
</DL>
<DL><DD><PRE>  <EM>{</EM> uuid <I>uuid</I>; <EM>|</EM> name <I>name</I>; <EM>|</EM> documentation <I>documentation</I>;
  <EM>|</EM> help-file <I>help-file</I> <EM>|</EM> help-context <I>help-context</I>; 
  <EM>|</EM> major-version <I>major-version</I>; 
  <EM>|</EM> minor-version <I>minor-version</I>; 
  <EM>|</EM> locale <I>locale</I>;
  <EM>|</EM> component-class <I>component-class</I>; 
  <EM>|</EM> args ( <I>keyword-arg-list</I> );
  <EM>}</EM></PRE></DL>
<DL>
<P> </P><DT><I>keyword-arg-list</I><DD>
</DL>
<dl><dd><pre>  <EM>{</EM> <I>arg-keyword</I> <I>arg-value</I>, <EM>}*</EM> </pre></dl>
<DL>
<P> </P><DT><I>interface-clause</I> <DD>
</DL>
<DL><DD><PRE>  <EM>[</EM> default <EM>|</EM> source <EM>|</EM> restricted <EM>]</EM> interface 
<I>          interface-name</I> 
      <EM>{</EM> , <I>interface-clause-option</I> <EM>}*</EM> ;</PRE></DL>
<DL>
<P> </P><DT><I>interface-clause-option</I> <DD>
</DL>
<DL><DD><PRE>  <EM>{</EM> name: <I>name</I> <EM>|</EM> typeinfo: <I>typeinfo</I> <EM>|</EM> 
    args: <EM>{</EM> <I>sequence</I> <EM>|</EM> <CODE>{</CODE> <I>keyword-arg-list</I> <CODE>}</CODE> <EM>}</EM>
<EM>}</EM></PRE></DL>
<P> <A NAME=MARKER-10-1483></A></P>
<H3>Library</H3>
<dl><dd><pre>OLE-Automation</pre></dl>
<H3>Module</H3>
<dl><dd><pre>OLE</pre></dl>
<H3>Description</H3>
<P> Creates type information for a COM class (coclass) to implement a set of interfaces. <I>coclass-name</I> is bound to an instance of <CODE>&lt;coclass-type-info&gt;</CODE>.</P>
<P> Any <I>typelib-clause</I>s are passed on as keywords to the call to <CODE>make(&lt;coclass-type-info&gt;)</CODE> which is used to create the type information. The <CODE>uuid</CODE> and <CODE>name</CODE> clauses are required. The <CODE>uuid</CODE> clause accepts instances of <CODE>&lt;string&gt;</CODE> and <CODE>&lt;REFGUID&gt;</CODE>. The <CODE>name</CODE> clause is a Dylan name<SUB>bnf</SUB> (as defined in the DRM's Dylan grammar). The <CODE>component-class</CODE> clause corresponds to the <CODE>class:</CODE> keyword; <CODE>class</CODE> could not be used as a clause name because of restrictions in the Dylan macro system.</P>
<P> When a client initiates a server for the class ID specified in the <CODE>uuid</CODE> clause, an instance of the class specified in the <CODE>component-class</CODE> clause will be created, using any additional <CODE>make</CODE> arguments specified by the <CODE>args</CODE> clause.</P>
<P> <I>interface-clause</I> declarations include interface implementations in the coclass. Each <I>interface-name</I> is the class that should be instantiated to implement the interface; usually it will have been defined with one of the macros <CODE>define</CODE> <CODE>dispatch-interface</CODE>, <CODE>define</CODE> <CODE>dual-interface</CODE>, or <CODE>define</CODE> <CODE>vtable-interface</CODE>.</P>
<P> One of the interfaces can be designated as the <CODE>default</CODE> interface--this is the one which is returned from a call to <BR><CODE>create-dispatch</CODE> on the coclass (unless another interface is requested in the call). If no interface is designated as the <CODE>default</CODE> then the first interface mentioned is considered the default. <CODE>restricted</CODE> interfaces cannot be accessed by certain tools--Visual Basic, for example. <CODE>source</CODE> interfaces are interfaces that the client can implement in order to receive notifications from the server.</P>
<P> The <I>interface-clause-option</I> specifies additional options for making a <CODE>&lt;component-interface-description&gt;</CODE> which specifies how to instantiate the interface. Most of these options are unnecessary when the information has been provided in the <A HREF="inte_441.htm#MARKER-9-1489"><CODE>define dispatch-interface</CODE></A> macro, but the <CODE>args:</CODE> option can be used to specify additional keyword arguments for making the interface class.</P>
<H3>Example</H3>
<P> Here is an example of typical usage of <CODE>define</CODE> <CODE>coclass</CODE>: </P>
<DL><DD><PRE>define dispatch-interface &lt;disp-interface-1&gt; 

  (&lt;simple-dispatch&gt;)
  ...
end dispatch-interface &lt;disp-interface-1&gt;;
define dispatch-interface &lt;disp-interface-2&gt; 
  (&lt;simple-dispatch&gt;)
  ...
end dispatch-interface &lt;disp-interface-2&gt;;</PRE></DL>
<DL><DD><PRE>define coclass $coclass-type-info
  name &quot;coclass-type-info&quot;;
  uuid &quot;{94CCDC4B-92AD-11D1-9A5E-006097C90313}&quot;;
  default interface &lt;disp-interface-1&gt;;
  interface &lt;disp-interface-2&gt;;
end coclass $coclass-type-info;</PRE></DL>
<DL><DD><PRE>let factory :: &lt;class-factory&gt; = 
  make-object-factory($coclass-type-info);</PRE></DL>
<P> The above binds coclass type information to <BR><CODE>$coclass-type-info</CODE>, and creates a class factory that will create instances of the coclass as necessary.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>OLE, COM, ActiveX and DBMS Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inte_439.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_437.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_436.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
