<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inte_288.htm">
<LINK REL=PREV HREF="inte_289.htm">
<LINK REL=NEXT HREF="inte_291.htm">
<TITLE>2.7.2   Low-level FFI libraries</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING290></A>

<DIV>
<P><A HREF="inte_291.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_289.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_288.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>2.7   Libraries in the Functional Developer OLE/COM API</P>

</DIV>
<A NAME=HEADING290-0></A>
<H1>2.7.2   Low-level FFI libraries</H1>
<P>At the lowest level, the COM, OLE, OLE-Dialogs, OLE-Controls, and OLE-Automation libraries present a simple mapping of Dylan names to names defined in the Microsoft OLE/COM API. With these libraries you can build OLE/COM components without using DUIM. </P>
<P>We built these libraries using the Functional Developer C foreign function interface library (C-FFI). Although they are low-level, note that the libraries do make all the conversions necessary to pass Dylan data to C functions and to convert C return values into Dylan objects. </P>
<P></P>
<TABLE BORDER=1><CAPTION><P>Table 2.1   <A NAME=MARKER-9-813></A>OLE/COM FFI libraries and the corresponding Windows files.</P>
</CAPTION><TR VALIGN=TOP><TH><P>Dylan library</P>
</TH><TH><P>C header</P>
</TH><TH><P>Link library</P>
</TH><TH><P>Runtime library</P>
</TH></TR><TR VALIGN=TOP><TD><P>COM</P>
</TD><TD><P>OBJBASE.H</P>
</TD><TD><P>OLE32.LIB,UUID.LIB</P>
</TD><TD><P>OLE32.DLL</P>
</TD></TR><TR VALIGN=TOP><TD><P>OLE</P>
</TD><TD><P>OLE2.H</P>
</TD><TD><P>OLE32.LIB,UUID.LIB</P>
</TD><TD><P>OLE32.DLL</P>
</TD></TR><TR VALIGN=TOP><TD><P>OLE-Automation</P>
</TD><TD><P>OLEAUTO.H</P>
</TD><TD><P>OLEAUT32.LIB</P>
</TD><TD><P>OLEAUT32.DLL</P>
</TD></TR><TR VALIGN=TOP><TD><P>OLE-Dialogs</P>
</TD><TD><P>OLEDLG.H</P>
</TD><TD><P>OLEDLG.LIB</P>
</TD><TD><P>OLEDLG.DLL</P>
</TD></TR><TR VALIGN=TOP><TD><P>OLE-Controls</P>
</TD><TD><P>OLECTL.H</P>
</TD><TD><P>OLEPRO32.LIB</P>
</TD><TD><P>OLEPRO32.DLL</P>
</TD></TR></TABLE><P>These FFI libraries enable Dylan programs to use OLE/COM in much the same way as a C++ program would, assuming it used direct OLE calls rather than MFC. You can use most of function, type, variable, and constant names documented in the OLE specifications, though of course there are a few syntactic modifications to account for Dylan naming and coding conventions. <A HREF="inte_574.htm#MARKER-9-1944">Chapter 9, "OLE FFI Facilities"</A>, describes these differences.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>OLE, COM, ActiveX and DBMS Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inte_291.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_289.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_288.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
