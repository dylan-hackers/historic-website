<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inte_366.htm">
<LINK REL=PREV HREF="inte_378.htm">
<LINK REL=NEXT HREF="inte_380.htm">
<TITLE>4.6.11   Local server initialization </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING379></A>

<DIV>
<P><A HREF="inte_380.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_378.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_366.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.6   Building an Automation server application</P>

</DIV>
<A NAME=HEADING379-0></A>
<H1>4.6.11   <A NAME=MARKER-10-1251></A><A NAME=MARKER-2-1252></A><A NAME=MARKER-2-1253></A><A NAME=MARKER-2-1254></A>Local server initialization </H1>
<P>Rather than using <CODE>make</CODE> to directly instantiate the COM object, a local server should create a class factory. The class <A HREF="inte_393.htm#MARKER-9-1303"><CODE>&lt;class-factory&gt;</CODE></A> is provided as a convenient way to do this. For example:</P>
<PRE>
make(&lt;class-factory&gt;,
     class: &lt;my-dispatch-object&gt;,
     typeinfo: make(&lt;disp-type-info&gt;, ...),
     clsid: make-GUID(...))
<P></P>
</PRE>
<P>This code creates and registers a class factory so that the designated dispinterface class is instantiated when a client tries to invoke a server for the designated Class ID. You can also provide any initialization keywords accepted by the class being instantiated, and the following class factory options:</P>
<DL>
<DT><CODE>server-context:</CODE> <DD><P></P>
<DT><DD>Defaults to <CODE>$CLSCTX-LOCAL-SERVER</CODE>.
<DT><CODE>connection-flags:</CODE> <DD><P></P>
<DT><DD>Defaults to <CODE>$REGCLS-SINGLEUSE</CODE>.
</DL>
<P>Before your server application terminates, it must call the function <A HREF="inte_418.htm#MARKER-9-1381"><CODE>revoke-registration</CODE>,  page 227</A>, on the class factory. </P>
<P>As a convenience, making a <CODE>&lt;class-factory&gt;</CODE> and calling <CODE>revoke-registration</CODE> can be combined by using the macro <CODE>with-class-factory</CODE> like this: </P>
<PRE>
with-class-factory (class: &lt;my-dispatch-object&gt;, 
                    typeinfo: make(&lt;disp-type-info&gt;, ...),
                    clsid: make-GUID(...) )

... // body of application

end with-class-factory;
<P></P>
</PRE>
<P>When using a <A HREF="inte_399.htm#MARKER-9-1326"><CODE>&lt;coclass-type-info&gt;</CODE></A>, it contains everything the class factory needs, so the factory can be created simply by doing:</P>
<PRE>
let factory = make-object-factory(my-coclass-type-info);
<P></P>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>OLE, COM, ActiveX and DBMS Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inte_380.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_378.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_366.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
