<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inte_443.htm">
<LINK REL=PREV HREF="inte_445.htm">
<LINK REL=NEXT HREF="inte_447.htm">
<TITLE>6.3   Basics of writing OLE compound document servers </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING446></A>

<DIV>
<P><A HREF="inte_447.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_445.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_443.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>6 The OLE-Server Library</P>

</DIV>
<A NAME=HEADING446-0></A>
<A NAME=UID-ole-server-1027390></A>
<H1>6.3   <A NAME=MARKER-2-1536></A><A NAME=MARKER-2-1537></A><A NAME=MARKER-2-1538></A><A NAME=MARKER-2-1539></A><A NAME=MARKER-9-1540></A>Basics of writing OLE compound document servers </H1>
<P>To write an OLE compound document server application, use the OLE-Server library and module. Note that to implement the user interface for your server, you will also have to use Functional Developer's Win32 API libraries; see the manual <I>C FFI and Win32 Reference</I> for details. </P>
<P>Your compound document server can be a <I>local server</I> (a server that is built as a .EXE file and therefore runs in its own process) or an <I>in-process</I> server (a server that is built as a .DLL file and that runs in its container's process). There is no direct support for remote servers.</P>
<P>Compound document servers are required to support several standard COM interfaces. Rather than requiring you to write support for each interface separately, Functional Developer provides "framework" classes that encapsulate the necessary COM interfaces. To implement a server you define a subclass of the appropriate framework class, and then define various required and optional Dylan methods on it. </P>
<P>For local servers, you must define a subclass of <A HREF="inte_452.htm#MARKER-9-1562"><CODE>&lt;ole-server-framework&gt;</CODE>,  page 271</A>; define a subclass of <A HREF="inte_453.htm#MARKER-9-1566"><CODE>&lt;ole-in-process-server&gt;</CODE>,  page 272</A>, for in-process servers. The required Dylan methods are described in <A HREF="inte_455.htm#MARKER-9-1576">Section 6.7.2 on page 273</A> while the optional ones are described in <A HREF="inte_469.htm#MARKER-9-1625">Section 6.7.5 on page 287</A>. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>OLE, COM, ActiveX and DBMS Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inte_447.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inte_445.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inte_443.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_579.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
