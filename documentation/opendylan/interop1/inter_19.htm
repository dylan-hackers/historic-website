<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inter_12.htm">
<LINK REL=PREV HREF="inter_18.htm">
<LINK REL=NEXT HREF="inter_20.htm">
<TITLE>1.5.3   Fundamental numeric type designator classes</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING19></A>

<DIV>
<P><A HREF="inter_20.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_18.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_12.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>1.5   Designator classes</P>

</DIV>
<A NAME=HEADING19-0></A>
<H1>1.5.3   <A NAME=MARKER-2-283></A><A NAME=MARKER-2-284></A><A NAME=MARKER-2-285></A><A NAME=MARKER-2-286></A><A NAME=MARKER-2-287></A>Fundamental numeric type designator classes</H1>
<P>This section describes the pre-defined designator classes for fundamental C numeric types. On page <A HREF="inter_12.htm#MARKER-9-242">10</A> we saw that none of these designator types are instantiable: a number on one side of the interface is converted to a number on the other side with the same value.</P>
<P>There are some additional details to note about integer representations. Because Dylan's integer representations do not match C's exactly, for each of the C integer types there are three designator classes that can be used to translate Dylan representations to that C integer. The categories are <I>plain</I>, <I>unsafe</I>, and <I>raw</I> integers. </P>
<P><A NAME=MARKER-10-288></A><I>Plain</I> integer designators -- of which the class <CODE><A NAME=MARKER-2-289></A><A NAME=MARKER-2-290></A>&lt;C-unsigned-short&gt;</CODE> is an example -- translate C integer values to instances of <CODE>&lt;integer&gt;</CODE>. If the integer being translated is too big for the destination, the C-FFI signals an error. There are two ways this can happen. </P>
<UL>
<LI>On export, the C-FFI signals an error if the Dylan value has more significant bits than the C integer. 
</UL>
<DL>
<DT><DD>This can happen if, for example, the designator is <CODE><A NAME=MARKER-2-291></A><A NAME=MARKER-2-292></A>&lt;C-unsigned-short&gt;</CODE>, and the Dylan value is negative, or if <CODE>unsigned</CODE> <CODE>short</CODE> on that platform is 16 bits wide, but the Dylan integer has more than 16 significant bits. The check will be omitted if the compiler can determine that no Dylan value outside the safe range can reach there. This can be done using a limited integer type.
</DL>
<UL>
<LI>On import into Dylan, the C-FFI signals an error if it cannot represent the C value using a Dylan <CODE>&lt;integer&gt;</CODE>. 
</UL>
<DL>
<DT><DD>This can happen with any C integer type that is more than 30 bits wide. The size of a Dylan <CODE>&lt;integer&gt;</CODE> depends on the particular platform, but it is guaranteed to be at least 30 bits in length. 
</DL>
<P>The C-FFI never signals an error for the <I>unsafe</I> designator classes -- of which the class <CODE><A NAME=MARKER-2-293></A><A NAME=MARKER-2-294></A>&lt;C-unsafe-unsigned-short&gt;</CODE> is an example -- but if the destination is too small for the value, the most significant bits of the value are chopped off to fit into the destination. Because there is no checking, using the unsafe designator classes brings a very small performance improvement, but nonetheless you should not use them unless you are certain you will not lose any bits.</P>
<P><I>Raw</I> designator classes -- of which the class <CODE><A NAME=MARKER-2-295></A><A NAME=MARKER-2-296></A>&lt;C-raw-unsigned-int&gt;</CODE> is an example -- represent the integer on the Dylan side as a <CODE><A NAME=MARKER-2-297></A><A NAME=MARKER-2-298></A>&lt;machine-word&gt;</CODE>. An instance of <CODE><A NAME=MARKER-2-299></A><A NAME=MARKER-2-300></A>&lt;machine-word&gt;</CODE> is guaranteed to have enough bits to represent any C <CODE>long</CODE> value, or any C <CODE>void</CODE> <CODE>*</CODE> value. Note that a <CODE><A NAME=MARKER-2-301></A><A NAME=MARKER-2-302></A>&lt;machine-word&gt;</CODE> value may still have more significant bits than some C integer types, and so the C-FFI may still signal an overflow error if the <CODE>&lt;machine-word&gt;</CODE> value, interpreted as indicated by the designator, has more significant bits than may be held in the indicated C type.<A NAME=MARKER-10-303></A> </P>
<P><EM><A NAME=MARKER-10-304></A></EM><A HREF="#MARKER-9-50">Table 1.1</A> shows all raw, plain, and unsafe integer designator types exported from the C-FFI module.<A NAME=MARKER-10-305></A> </P>
<P></P>
<TABLE BORDER=1><CAPTION><P>Table 1.1   <A NAME=MARKER-9-50></A>The integer designator classes and their mappings.</P>
</CAPTION><TR VALIGN=TOP><TH><P>Designator name</P>
</TH><TH><P>C type</P>
</TH><TH><P>Dylan type(s)</P>
</TH></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-51></A><A NAME=MARKER-2-52></A>&lt;C-int&gt;</CODE></P>
</TD><TD><P><CODE>int</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-53></A><A NAME=MARKER-2-54></A>&lt;C-raw-int&gt;</CODE></P>
</TD><TD><P><CODE>int</CODE></P>
</TD><TD><P><CODE><A NAME=MARKER-2-55></A><A NAME=MARKER-2-56></A>&lt;machine-word&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-57></A><A NAME=MARKER-2-58></A>&lt;C-unsafe-int&gt;</CODE></P>
</TD><TD><P><CODE>int</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-59></A><A NAME=MARKER-2-60></A>&lt;C-raw-signed-int&gt;</CODE></P>
</TD><TD><P><CODE>signed int</CODE></P>
</TD><TD><P><CODE>&lt;machine-word&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-61></A><A NAME=MARKER-2-62></A>&lt;C-unsafe-signed int&gt;</CODE></P>
</TD><TD><P><CODE>signed int</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-63></A><A NAME=MARKER-2-64></A>&lt;C-signed-int&gt;</CODE></P>
</TD><TD><P><CODE>signed int</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-65></A><A NAME=MARKER-2-66></A>&lt;C-raw-unsigned-int&gt;</CODE></P>
</TD><TD><P><CODE>unsigned int</CODE></P>
</TD><TD><P><CODE>&lt;machine-word&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-67></A><A NAME=MARKER-2-68></A>&lt;C-unsafe-unsigned-int&gt;</CODE></P>
</TD><TD><P><CODE>unsigned int</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-69></A><A NAME=MARKER-2-70></A>&lt;C-unsigned-int&gt;</CODE></P>
</TD><TD><P><CODE>unsigned int</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-71></A><A NAME=MARKER-2-72></A>&lt;C-unsigned-long&gt;</CODE></P>
</TD><TD><P><CODE>unsigned long</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-73></A><A NAME=MARKER-2-74></A>&lt;C-signed-long&gt;</CODE></P>
</TD><TD><P><CODE>signed long</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-75></A><A NAME=MARKER-2-76></A>&lt;C-unsafe-unsigned-long&gt;</CODE></P>
</TD><TD><P><CODE>unsigned long</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-77></A><A NAME=MARKER-2-78></A>&lt;C-unsafe-signed-long&gt;</CODE></P>
</TD><TD><P><CODE>signed long</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-79></A><A NAME=MARKER-2-80></A>&lt;C-raw-unsigned-long&gt;</CODE></P>
</TD><TD><P><CODE>unsigned long</CODE></P>
</TD><TD><P><CODE>&lt;machine-word&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-81></A><A NAME=MARKER-2-82></A>&lt;C-raw-signed-long&gt;</CODE></P>
</TD><TD><P><CODE>signed long</CODE></P>
</TD><TD><P><CODE>&lt;machine-word&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-83></A><A NAME=MARKER-2-84></A>&lt;C-unsigned-short&gt;</CODE></P>
</TD><TD><P><CODE>unsigned short</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-85></A><A NAME=MARKER-2-86></A>&lt;C-signed-short&gt;</CODE></P>
</TD><TD><P><CODE>signed short</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-87></A><A NAME=MARKER-2-88></A>&lt;C-unsafe-unsigned-short&gt;</CODE></P>
</TD><TD><P><CODE>unsigned short</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-89></A><A NAME=MARKER-2-90></A>&lt;C-unsafe-signed-short&gt;</CODE></P>
</TD><TD><P><CODE>signed short</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-91></A><A NAME=MARKER-2-92></A>&lt;C-raw-unsigned-short&gt;</CODE></P>
</TD><TD><P><CODE>unsigned short</CODE></P>
</TD><TD><P><CODE>&lt;machine-word&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-93></A><A NAME=MARKER-2-94></A>&lt;C-raw-signed-short&gt;</CODE></P>
</TD><TD><P><CODE>signed short</CODE></P>
</TD><TD><P><CODE>&lt;machine-word&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-95></A><A NAME=MARKER-2-96></A>&lt;C-unsigned-char&gt;</CODE></P>
</TD><TD><P><CODE>unsigned char</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-97></A><A NAME=MARKER-2-98></A>&lt;C-signed-char&gt;</CODE></P>
</TD><TD><P><CODE>signed char</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-99></A><A NAME=MARKER-2-100></A>&lt;C-unsafe-unsigned-char&gt;</CODE></P>
</TD><TD><P><CODE>unsigned char</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-101></A><A NAME=MARKER-2-102></A>&lt;C-unsafe-signed-char&gt;</CODE></P>
</TD><TD><P><CODE>signed char</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-103></A><A NAME=MARKER-2-104></A>&lt;C-raw-unsigned-char&gt;</CODE></P>
</TD><TD><P><CODE>unsigned char</CODE></P>
</TD><TD><P><CODE>&lt;machine-word&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-105></A><A NAME=MARKER-2-106></A>&lt;C-raw-signed-char&gt;</CODE></P>
</TD><TD><P><CODE>signed char</CODE></P>
</TD><TD><P><CODE>&lt;machine-word&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-107></A><A NAME=MARKER-2-108></A>&lt;C-char&gt;</CODE></P>
</TD><TD><P><CODE>char</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-109></A><A NAME=MARKER-2-110></A>&lt;C-unsafe-char&gt;</CODE></P>
</TD><TD><P><CODE>char</CODE></P>
</TD><TD><P><CODE>&lt;integer&gt;</CODE></P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE><A NAME=MARKER-2-111></A><A NAME=MARKER-2-112></A>&lt;C-raw-char&gt;</CODE></P>
</TD><TD><P><CODE>char</CODE></P>
</TD><TD><P><CODE>&lt;machine-word&gt;</CODE></P>
</TD></TR></TABLE><P><A NAME=MARKER-10-306></A>For each of the fundamental integer designator types, <CODE>&lt;C-<I>xxx&gt;</I></CODE>, there is also a type designating pointers to that type called <CODE>&lt;C-<I>xxx*&gt;</I></CODE>. In addition, the C-FFI defines methods for <CODE><A NAME=MARKER-2-307></A><A NAME=MARKER-2-308></A>pointer-value</CODE> and <CODE><A NAME=MARKER-2-309></A><A NAME=MARKER-2-310></A>pointer-value-setter</CODE>, with appropriate translation behavior for each of the types designating pointers to the fundamental integer designator types.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>C FFI and Win 32 Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inter_20.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_18.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_12.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
