<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inter_95.htm">
<LINK REL=PREV HREF="inter_95.htm">
<LINK REL=NEXT HREF="inter_97.htm">
<TITLE> make subclass(&lt;C-pointer&gt;) </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING96></A>

<DIV>
<P><A HREF="inter_97.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_95.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_95.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>1.8   Allocating and deallocating C storage</P>

</DIV>
<A NAME=HEADING96-0></A>
<H1> <A NAME=MARKER-2-549></A><A NAME=MARKER-2-550></A>make <I>subclass(&lt;C-pointer&gt;)</I> </H1>
<P><I>G.f. method</I></P>
<H3>Summary</H3>
<P> Allocates a C object on the heap.</P>
<H3>Signature</H3>
<DL><DD><PRE>make <I>subclass(&lt;c-pointer&gt;)</I> #key <I>allocator</I> <I>element-count</I> 
                             <I>extra-bytes</I> <I>address</I> =&gt; <I>C-pointer</I> </PRE></DL>
<H3>Arguments</H3>
<DL>
<P> </P><DT><I>subclass</I><DD> A subclass of <CODE>&lt;C-pointer&gt;</CODE>.
<P> </P><DT><I>allocator</I><DD> An instance of <CODE>&lt;function&gt;</CODE>.
<P> </P><DT><I>element-count</I><DD> An instance of <CODE>&lt;integer&gt;</CODE>.
<P> </P><DT><I>extra-bytes</I><DD> An instance of <CODE>&lt;integer&gt;</CODE>.
<P> </P><DT><I>address</I><DD> An instance of <CODE>&lt;integer&gt;</CODE> or <CODE>&lt;machine-word&gt;</CODE>.
</DL>
<H3>Values</H3>
<DL>
<P> </P><DT><I>c-pointer</I><DD> An instance of type <CODE>&lt;c-pointer&gt;</CODE> pointing to the object.
</DL>
<H3>Library</H3>
<P> <CODE>c-ffi</CODE></P>
<H3>Module</H3>
<P> <CODE>c-ffi</CODE></P>
<H3>Description</H3>
<P> Allocates a C object on the heap, using whatever standard C allocation function is in use on the target platform (typically <CODE>malloc</CODE>) to allocate the storage. This method is applicable to subclasses of <CODE>&lt;C-pointer&gt;</CODE> and returns an instance of its argument class.</P>
<P> If the address option is provided, no new storage is allocated, but instead, a new pointer with the given machine word address is returned. </P>
<P> The <EM>allocator</EM> argument should be a Dylan function that can serve as an allocator. It must accept a single integer argument -- the number of bytes to be allocated -- and return a Dylan <CODE>&lt;machine-word&gt;</CODE> that represents the address of the memory it allocated.</P>
<P> The amount of storage allocated by default is the result of:</P>
<dl><dd><pre>  size-of(<I>pointer-wrapper-class</I>.referenced-type)</pre></dl>
<P> If a positive integer is passed as an extra-bytes option, that number of extra bytes is also allocated. </P>
<P> If a positive integer is passed as a element-count option, space for element-count copies of the referenced type is allocated, taking into account the extra-bytes option for each of them. The element-count argument can be used for allocating arrays of sizes that are not known statically. The keyword element-count is used for this option rather than size in order to avoid conflict with the size collection keyword. The logical size of a collection represented by a pointer wrapper and the number of array elements that implement it may differ; a null-terminated string is an example of such a case.</P>
<P>This <CODE>make</CODE> method calls <CODE>initialize</CODE> on the wrapper object it generates before returning it.</P>
<PRE>
? define variable *space-for-one-int* = make(&lt;C-int*&gt;);
<P></P>
? *space-for-one-int*[0];
97386437634   // Could have been anything unless the
              // default
<P></P>
// allocator guarantees to zero new memory.
<P></P>
? *space-for-one-int*[0] := 0;
0
<P></P>
? *space-for-one-int*[0];
0
<P></P>
? define variable *space-for-ten-ints* 
    = make(&lt;C-int*&gt;, element-count: 10);
<P></P>
? define C-struct &lt;Z-properties&gt;
    slot type :: &lt;C-int&gt;;
    array slot properties :: &lt;C-int&gt;, 
  end C-struct &lt;Z-properties&gt;;
<P></P>
? define variable *props* = 
    make(&lt;Z-properties&gt;, 
         extra-bytes: 10 * size-of(&lt;C-int&gt;));
<P></P>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>C FFI and Win 32 Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inter_97.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_95.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_95.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
