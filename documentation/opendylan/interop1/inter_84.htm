<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inter_76.htm">
<LINK REL=PREV HREF="inter_83.htm">
<LINK REL=NEXT HREF="inter_85.htm">
<TITLE> define C-union</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING84></A>

<DIV>
<P><A HREF="inter_85.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_83.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_76.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>1.6   Defining types </P>

</DIV>
<A NAME=HEADING84-0></A>
<H1> <A NAME=MARKER-2-497></A><A NAME=MARKER-2-498></A>define C-union</H1>
<P><I>Definition macro</I></P>
<H3>Summary</H3>
<P> Describes C union types to the <CODE>c-ffi</CODE>.</P>
<H3>Signature</H3>
<DL><DD><PRE>define C-union <I>name</I> 
  [<I>slot-spec</I>; ...] [;]
  [<I>type-options</I>] [;]
end [C-union] [<I>name</I>]</PRE></DL>
<H3>Arguments</H3>
<DL>
<P> </P><DT><I>name</I><DD> A Dylan variable name.
<P> </P><DT><I>slot-spec</I><DD> 
<P> </P><DT>t<I>ype-options</I><DD> A property list.
</DL>
<H3>Library</H3>
<P> <CODE>c-ffi</CODE></P>
<H3>Module</H3>
<P> <CODE>c-ffi</CODE></P>
<H3>Description</H3>
<P> Describes C union types to the C-FFI. The syntax for the macro and its use are similar to <CODE><A NAME=MARKER-2-499></A><A NAME=MARKER-2-500></A>define c-struct</CODE> except that bitfield slots are not allowed. The designator created by the macro is a subclass of <CODE>&lt;c-union&gt;</CODE>.</P>
<P> Each of the slots in a union is laid out in memory on top of one another just as in C's <CODE>union</CODE> construct.</P>
<P>Example C declaration:</P>
<PRE>
union Num {
  int    int_value;
  double double_value;
};
<P></P>
Num *OneNum();   /* Returns a pointer to a Num */
Num *NumArray(); /* Returns a Num array */
<P></P>
</PRE>
<P>Example FFI definition:</P>
<PRE>
define C-union &lt;Num&gt;
  slot int-value    :: &lt;C-int&gt;;
  slot double-value :: &lt;C-double&gt;;
  pointer-type-name: &lt;Num*&gt;;
end C-union;
<P></P>
define C-function one-num
  result num :: &lt;Num*&gt;;
  c-name: "OneNum";
end C-function;
<P></P>
define C-function num-array
  result array :: &lt;Num*&gt;;
  c-name: "NumArray";
end C-function;
<P></P>
</PRE>
<P>Example transactions:</P>
<PRE>
? define variable n = one-num();
// Defined n.
<P></P>
? values(p.int-value, p.double-value);
154541
92832.e23 // or something
<P></P>
? define variable array = num-array();
// Defined array.
<P></P>
? array[5].object-class; // implicit conversion to 
                         // the pointer type
{&lt;Num&gt; pointer #xff5e00}
<P></P>
? array[5].int-value := 0;
0
<P></P>
? array[5].double-value;
11232e-12 // or a different something
<P></P>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>C FFI and Win 32 Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inter_85.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_83.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_76.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
