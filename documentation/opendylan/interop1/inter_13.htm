<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inter_12.htm">
<LINK REL=PREV HREF="inter_12.htm">
<LINK REL=NEXT HREF="inter_14.htm">
<TITLE>1.5.1   Designator type properties</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING13></A>

<DIV>
<P><A HREF="inter_14.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_12.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_12.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>1.5   Designator classes</P>

</DIV>
<A NAME=HEADING13-0></A>
<H1>1.5.1   <A NAME=MARKER-2-245></A><A NAME=MARKER-2-246></A><A NAME=MARKER-2-247></A><A NAME=MARKER-9-248></A>Designator type properties</H1>
<P>To understand how designator classes work, it is useful to know about their properties. A few of these properties are accessible programmatically, but others are implicit and only really exist in the compiler. Some of the properties may be empty.</P>
<P><A NAME=MARKER-10-249></A>A <CODE><A NAME=MARKER-2-250></A><A NAME=MARKER-2-251></A><I>referenced type</I></CODE> is the designator type to which a pointer refers. A designator's <I>referenced-type</I> only has a value for subtypes of <CODE><A NAME=MARKER-2-252></A><A NAME=MARKER-2-253></A>&lt;C-statically-typed-pointer&gt;</CODE>. Programs can access the referenced type through the function <CODE>referenced-type</CODE>. </P>
<P>A designator class's <CODE><A NAME=MARKER-2-254></A><A NAME=MARKER-2-255></A><I>pointer-type</I></CODE> only has a value for each of those types that has a pointer designator type that refers to it. Most of the constructs that define a new designator type also define a pointer-type for that designator. Many of the macros that define designators accept a <CODE>pointer-type-name:</CODE> keyword to bind the <I>pointer-type</I> of the defined designator to a given variable. The pointer-type is not programmatically available because it may not have been defined. You can assure that there is a pointer-type for a particular designator by using the macro <CODE><A NAME=MARKER-2-256></A><A NAME=MARKER-2-257></A>define c-pointer-type</CODE>. </P>
<P>A designator class's <A NAME=MARKER-2-258></A><A NAME=MARKER-2-259></A><I>import type</I> and <CODE><A NAME=MARKER-2-260></A><A NAME=MARKER-2-261></A><I>export type</I></CODE> are instantiable Dylan types that describe the Dylan instantiation of a designator class when it is used in a position that <I>imports</I> values from C, or <I>exports</I> values to C. </P>
<P>Nearly all of the C-FFI's designators have import and export types that are equivalent. Some, such as <CODE><A NAME=MARKER-2-262></A><A NAME=MARKER-2-263></A>&lt;C-string&gt;</CODE>, have different import and export types because it is possible to pass a pointer to a Dylan object to C directly without creating a C pointer object, or copying the underlying data, but when importing a string from C it is not practical to copy the contents and create a Dylan string. By default, the import and export types for any subtype of <CODE><A NAME=MARKER-2-264></A><A NAME=MARKER-2-265></A>&lt;C-pointer&gt;</CODE> are the class itself. You can override this by defining a new subclass with the macro <CODE><A NAME=MARKER-2-266></A><A NAME=MARKER-2-267></A>define C-mapped-subtype.</CODE></P>
<P>You can define a designator's <A NAME=MARKER-2-268></A><A NAME=MARKER-2-269></A><I>import-function</I> and <A NAME=MARKER-2-270></A><A NAME=MARKER-2-271></A><I>export-function</I> by using the macro <CODE>define</CODE> <CODE>c-mapped-subtype</CODE>. These functions are merely the procedural specifications for translating the C data to Dylan and back. The <I>import</I> and <I>export</I> functions are inherited when you define a subclass for a designator. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>C FFI and Win 32 Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inter_14.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_12.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_12.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
