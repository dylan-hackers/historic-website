<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="intero_4.htm">
<LINK REL=PREV HREF="inter_10.htm">
<LINK REL=NEXT HREF="inter_12.htm">
<TITLE>1.4   Basic options in C-FFI macros </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING11></A>

<DIV>
<P><A HREF="inter_12.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_10.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="intero_4.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>1 The C-FFI Library</P>

</DIV>
<A NAME=HEADING11-0></A>
<A NAME=UID-c-ffi-886644></A>
<H1>1.4   <A NAME=MARKER-2-235></A><A NAME=MARKER-2-236></A><A NAME=MARKER-2-237></A><A NAME=MARKER-2-238></A>Basic options in C-FFI macros </H1>
<P>The defining macros of the C-FFI share a consistent core set of options which are worth describing here:</P>
<UL>
<LI>A <I>c-name</I> argument. Every defining form allows you to specify the corresponding C entity through the keyword <CODE>c-name:</CODE>. It is optional in some forms but required in others. You can define types that have no named opposite number in C, and the c-name option is always optional in type definitions. On the other hand, you must always name an imported C function or variable so that Dylan knows the correct name from the compiled C library to link with. 
</UL>
<DL>
<DT><DD>In general, any C entity you can declare in C using <CODE>extern</CODE> can only be found by the C-FFI if you pass a <I>c-name</I> argument to the corresponding C-FFI definition.
</DL>
<UL>
<LI>A <EM>pointer-type-name</EM> argument. All the type-defining forms allow you to name the type for a pointer to the type being defined. This is normally specified throughout the <CODE>pointer-type-name:</CODE> keyword option.
</UL>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>C FFI and Win 32 Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inter_12.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_10.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="intero_4.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
