<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="intero_6.htm">
<LINK REL=PREV HREF="intero_8.htm">
<LINK REL=NEXT HREF="inter_10.htm">
<TITLE>1.2.3   C variables in Dylan</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING9></A>

<DIV>
<P><A HREF="inter_10.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="intero_8.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="intero_6.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>1.2   Overview </P>

</DIV>
<A NAME=HEADING9-0></A>
<H1>1.2.3   <A NAME=MARKER-2-227></A><A NAME=MARKER-2-228></A>C variables in Dylan</H1>
<P>When you use the interface definition language to describe a C variable to the Dylan compiler, the compiler generates new Dylan getter and setter functions for reading and setting the variable's value from Dylan. If the variable is constant, it defines a getter function only.</P>
<P>The getter function converts the C value to a Dylan value before returning it according to the variable's declared type. Similarly, the setter function converts its argument, as Dylan value, into a C value before setting the C variable. These conversions happen according to the same rules that apply to other C-Dylan world transition points, such as argument passing or structure slot access.</P>
<P>In order for Dylan to be able to access a C variable correctly, we must describe the variable to Dylan in the same detail that a C header file would give to a C program that uses it. Specifically, we must provide the C name and the type of the variable. As with struct and function definitions, we indicate C types by naming the appropriate Dylan designator classes.</P>
<P>Here is an example of defining and using C variables. Suppose we have the following <CODE>extern</CODE> C variable declaration:</P>
<PRE>
extern double mean;
<P></P>
</PRE>
<P>We describe C variables to Dylan using the C-FFI macro <CODE><A NAME=MARKER-2-229></A><A NAME=MARKER-2-230></A>define C-variable</CODE>:</P>
<PRE>
define C-variable C-mean :: &lt;C-double&gt;
  c-name: &quot;mean&quot;;
end C-variable;
<P></P>
</PRE>
<P>The name immediately after the <CODE>define C-variable</CODE> is the name of the Dylan variable to which the getter for our C variable will be bound. In this case it is <CODE>C-mean</CODE>. </P>
<P>We give the C name of the variable as the value of the keyword <CODE>c-name:</CODE>. Once we have compiled the definition -- and assuming the compiled version of the C library defining <CODE>mean</CODE> has been linked in with the Dylan application -- we can call the getter function just like any other Dylan function:</P>
<PRE>
? C-mean();
1.5
<P></P>
</PRE>
<P>By default, the C-FFI also defines a setter function for the variable. The setter name uses Dylan's convention of appending "-setter" to the getter name. </P>
<PRE>
? C-mean() := 0.0;
0.0
<P></P>
? C-mean();
0.0
<P></P>
</PRE>
<P>As described above, when values are passed back and forth between Dylan and C, the C-FFI performs automatic conversions. In this case, the type of the variable is a fundamental numeric type which means that the C-FFI accepts and returns Dylan floats, converting to and from raw C floats as necessary. </P>
<P><B>Note:</B> We could achieve the same result by using the <CODE><A NAME=MARKER-2-231></A><A NAME=MARKER-2-232></A>define C-address</CODE> macro, which defines a constant that is a pointer to the storage allocated for the C variable.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>C FFI and Win 32 Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inter_10.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="intero_8.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="intero_6.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
