<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inter_85.htm">
<LINK REL=PREV HREF="inter_92.htm">
<LINK REL=NEXT HREF="inter_94.htm">
<TITLE> define C-variable</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING93></A>

<DIV>
<P><A HREF="inter_94.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_92.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_85.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>1.7   Functions</P>

</DIV>
<A NAME=HEADING93-0></A>
<H1> <A NAME=MARKER-2-537></A><A NAME=MARKER-2-538></A>define C-variable</H1>
<P><I>Definition macro</I></P>
<H3>Summary</H3>
<P> Describes C variables to the <CODE>c-ffi</CODE>.</P>
<H3>Signature</H3>
<DL><DD><PRE>define C-variable <I>getter-name</I> :: <I>c-type</I> 
  #key <I>setter</I> <I>c-name</I> import: <I>boolean</I>
end [C-variable]</PRE></DL>
<H3>Arguments</H3>
<DL>
<P> </P><DT><I>getter-name</I><DD> A Dylan variable name.
<P> </P><DT><I>c-type</I><DD> A Dylan name.
<P> </P><DT><I>setter</I><DD> <CODE>#f</CODE> or a Dylan variable name.
<P> </P><DT><I>c-name</I><DD> A string constant.
<P> </P><DT>import<DD> <CODE>#f</CODE> or <CODE>#t</CODE>.
</DL>
<H3>Library</H3>
<P> <CODE>c-ffi</CODE></P>
<H3>Module</H3>
<P> <CODE>c-ffi</CODE></P>
<H3>Description</H3>
<P> Describes C variables to the C-FFI. It defines a getter and setter function for accessing the variable's value. The c-name keyword argument is required and gives the C name of the variable to be accessed. The <EM>setter</EM> keyword allows you to specify the name of the setter function, or if a setter function is to be defined at all. If <I>setter</I> is <CODE>#f</CODE>, no setter function will be defined. </P>
<P> The <CODE>import:</CODE> option indicates if the C variable must be imported from another <CODE>.dll</CODE> or not. <CODE>#t</CODE> indicates it is in another <CODE>.dll</CODE> and must be imported, <CODE>#f </CODE>means that it is not to be imported. Whether the variable has to be imported from another <CODE>.dll</CODE> or not is determined by which Dylan project the C source files are part of. If they are in the same project as the <CODE>C-variable</CODE> definition then the value of &quot;import:&quot; should be <CODE>#f</CODE> as the definition and variable will be linked into the same <CODE>.dll</CODE>. If the definition is in a different project from the C source files then they will be in separate <CODE>.dll</CODE>s and <CODE>import:</CODE> needs to be <CODE>#t</CODE>. The default value is<CODE> #f</CODE>.</P>
<P> For integer, float, or pointer-typed C variables the representation is clear and unambiguous. For C struct or union typed variables the translation is not so simple. A C union or struct has no direct representation in Dylan. You may only have a reference to the C object in Dylan through a <CODE><A NAME=MARKER-2-539></A><A NAME=MARKER-2-540></A>&lt;c-pointer&gt;</CODE> object. For this reason, <CODE><A NAME=MARKER-2-541></A><A NAME=MARKER-2-542></A>define</CODE> <CODE>c-variable</CODE> is not permitted for variables with C aggregate types. Use <CODE>Define</CODE> <CODE>C-address</CODE> for those variables.</P>
<P>Example:</P>
<PRE>
? define C-variable process-count :: &lt;C-int&gt;, 
    c-name: &quot;process_count&quot; end;
<P></P>
? process-count();
57
<P></P>
? process-count() := 0;
0
<P></P>
? process-count();
0
<P></P>
? define C-variable machine-name-1 :: &lt;C-char*&gt;, 
    c-name: &quot;MachineName&quot;;
end;
<P></P>
? machine-name-1();
#{&lt;C-char*&gt; #xaaabc00}
<P></P>
</PRE>
<P>In C and other static languages what is known as a variable is a named allocation of memory. To access a global C variable from Dylan it is occasionally necessary to get a handle to the location where that variable is kept. The <CODE>define</CODE> <CODE>C-address</CODE> macro can be used for this purpose.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>C FFI and Win 32 Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inter_94.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_92.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_85.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
