<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="intero_6.htm">
<LINK REL=PREV HREF="intero_7.htm">
<LINK REL=NEXT HREF="intero_9.htm">
<TITLE>1.2.2   C functions in Dylan</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING8></A>

<DIV>
<P><A HREF="intero_9.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="intero_7.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="intero_6.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>1.2   Overview </P>

</DIV>
<A NAME=HEADING8-0></A>
<H1>1.2.2   <A NAME=MARKER-2-217></A><A NAME=MARKER-2-218></A>C functions in Dylan</H1>
<P>When you use the interface definition language to describe a C function to the Dylan compiler, the compiler generates a new Dylan function. This <I>wrapper function</I> accepts Dylan arguments and returns Dylan results. It converts each of its arguments from a Dylan object to a corresponding C value before calling the C function it wraps. The C-FFI converts any results that the C function returns into Dylan objects before returning them to the caller. </P>
<P>In order for Dylan to be able to call into C correctly, C functions must be described to Dylan in the same detail a C header file would provide a calling C program. Specifically, for every function we must provide the C name and the type of its arguments and results. As with struct definitions, these types are indicated by naming the designator classes corresponding to the C types involved in the C-FFI description of the C function.</P>
<P>The following is an example of defining and using wrapper functions. Suppose we have the following <CODE>extern</CODE> C function declaration: </P>
<PRE>
extern double cos (double angle);
<P></P>
</PRE>
<P>We describe C functions to Dylan using the C-FFI macro <CODE><A NAME=MARKER-2-219></A><A NAME=MARKER-2-220></A>define C-function</CODE>:</P>
<PRE>
define C-function C-cos
  parameter angle :: &lt;C-double&gt;;
  result    cos   :: &lt;C-double&gt;;
  c-name: &quot;cos&quot;
end C-function;
<P></P>
</PRE>
<P>The name appearing immediately after the <CODE><A NAME=MARKER-2-221></A><A NAME=MARKER-2-222></A>define C-function</CODE> is the name we want to give to the Dylan variable to which our wrapper function will be bound. We call it <CODE>C-cos</CODE>. We also give the actual C name of the function we want to wrap as the value of the keyword <CODE>c-name:</CODE>. </P>
<P>Once we have compiled the definition -- and assuming the compiled version of the C library implementing <CODE>cos</CODE> has been linked in with the Dylan application -- we can call the wrapper function just like any other Dylan function:</P>
<PRE>
? C-cos(0.0);
1.0
<P></P>
</PRE>
<P>As we noted above, when values are passed back and forth between Dylan and C, the C-FFI performs automatic conversions. In this case, the type of the parameter and the result are both fundamental numeric types which means that the C-FFI will accept and return Dylan floats, converting to and from raw C floats as necessary.</P>
<P>As well as making C functions available to Dylan code, the C-FFI allows us to make Dylan functions available to call from C code. We do this by defining a <I>C-callable </I>wrapper function. A C-callable wrapper is a Dylan function that a C program can call. The C-callable wrapper has a C calling convention. When a C program calls a C-callable wrapper, the C-FFI performs the necessary data conversions and then invokes a Dylan function. </P>
<P>You can pass C-callable wrappers into C code for use as callbacks. You can also give them names visible in C, so that C clients of Dylan code can call into Dylan directly by invoking a named function.</P>
<P>The argument and result conversions performed by C-callable wrappers are just like those done within Dylan wrapper functions. The macro that defines C-callable wrappers is called <CODE><A NAME=MARKER-2-223></A><A NAME=MARKER-2-224></A>define C-callable-wrapper</CODE> and we describe it in detail later. For now, consider the following simple example. Suppose we have a C <CODE>extern</CODE> function declaration <CODE>AddDouble</CODE>:</P>
<PRE>
extern double AddDouble (double x, double y);
<P></P>
</PRE>
<P>This function is intended to return the sum of two <CODE>double</CODE> values. Instead of implementing the function in C, we can implement it in Dylan using Dylan's generic function <CODE><A NAME=MARKER-2-225></A><A NAME=MARKER-2-226></A>+</CODE>. All we need to do is define a C-callable wrapper for <CODE>+</CODE>, as follows:</P>
<PRE>
define C-callable-wrapper AddDoubleObject of \+
  parameter x :: &lt;C-double&gt;;
  parameter y :: &lt;C-double&gt;;
  c-name: &quot;AddDouble&quot;;
end C-callable-wrapper;
<P></P>
</PRE>
<P>We can now call <CODE>AddDouble</CODE> in C. Our wrapper will be invoked, the C arguments will be converted and passed to Dylan's + generic function, and then the result of the computation will be converted and passed back to C:</P>
<PRE>
{
  extern double AddDouble (double x, double y);
  double result;

  result = AddDouble(1.0, 2.0);
}
<P></P>
</PRE>
<P>The C-FFI binds the Dylan variable <CODE>AddDoubleObject</CODE> to a Dylan object representing the function pointer of the C-callable wrapper. This reference allows the C-callable wrapper to be passed to a C function expecting a callback argument.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>C FFI and Win 32 Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="intero_9.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="intero_7.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="intero_6.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
