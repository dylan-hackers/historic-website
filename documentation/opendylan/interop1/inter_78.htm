<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inter_76.htm">
<LINK REL=PREV HREF="inter_77.htm">
<LINK REL=NEXT HREF="inter_79.htm">
<TITLE> define C-subtype</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING78></A>

<DIV>
<P><A HREF="inter_79.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_77.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_76.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>1.6   Defining types </P>

</DIV>
<A NAME=HEADING78-0></A>
<H1> <EM><A NAME=MARKER-2-466></A><A NAME=MARKER-2-467></A><A NAME=MARKER-10-468></A></EM>define C-subtype</H1>
<P><I>Definition macro</I></P>
<H3>Summary</H3>
<P> Defines a specialized designator class for a C type based on an existing designator class for that type. </P>
<H3>Signature</H3>
<DL><DD><PRE>define<EM> </EM>[<I>modifiers</I>*] C-subtype name (superclasses) 
  [<I>slot-spec</I>; ...] [;]
  [<I>type-options</I>] [;]
end [C-subtype] [<I>name</I>]</PRE></DL>
<H3>Arguments</H3>
<DL>
<P> </P><DT><I>modifiers</I><DD> The same as the modifiers allowed in <CODE>define-class</CODE>.
<P> </P><DT><I>name</I><DD> A Dylan variable name.
<P> </P><DT><I>superclasses</I><DD> A list of Dylan names.
<P> </P><DT><I>slot-spec</I><DD> Same syntax as a slot definition in <CODE>define-class</CODE>.
<P> </P><DT><I>type-options</I><DD> A property list.
<P> </P><DT>name<DD> 
</DL>
<H3>Values</H3>
<P> </P>
<H3>Library</H3>
<P> <CODE>c-ffi</CODE></P>
<H3>Module</H3>
<P> <CODE>c-ffi</CODE></P>
<H3>Description</H3>
<P> Defines a specialized designator class for a C type based on an existing designator class for that type. It does this by defining a subclass of the original designator class, and is a simple wrapper around <CODE>define class</CODE> from which it takes its syntax. The superclasses, slot-specs, and <EM>modifiers</EM> are passed on to <CODE>define class</CODE> unchanged. In effect, it expands to:</P>
<DL><DD><PRE>define class <I>name</I> (<I>superclasses</I>)
  <I>slot-spec</I>; ...
end class;</PRE></DL>
<P> In terms of C, <CODE><A NAME=MARKER-2-469></A><A NAME=MARKER-2-470></A>define C-subtype</CODE> can be thought of as implementing a strongly typed version of <CODE>typedef</CODE> because a new designator class is generated that Dylan's type system can distinguish from the designator class on which it was based. As well as inheriting from an existing designator class, other Dylan classes can be mixed in too.</P>
<P> The optional <I>type-options </I>must be a property list. The <CODE>c-name:</CODE> keyword is recognized, allowing the original C name of the type designated by the class to be documented. The <CODE>pointer-type-name: </CODE>keyword option can be used to name the designator for pointers to <I>name</I>.</P>
<P>Some example C declarations:</P>
<PRE>
typedef void *Handle;
typedef Handle WindowHandle;
typedef Handle StreamHandle;
<P></P>
extern WindowHandle CurrentWindow (void);
extern StreamHandle CurrentStream (void);
<P></P>
</PRE>
<DL>
<DT><DD>Example FFI definitions:
</DL>
<PRE>
define C-subtype &lt;Handle&gt; (&lt;void*&gt;) end;
define C-subtype &lt;WindowHandle&gt; (&lt;Handle&gt;) end;
define C-subtype &lt;StreamHandle&gt; (&lt;Handle&gt;) end;
<P></P>
define C-function CurrentWindow
  result value :: &lt;WindowHandle&gt;;
  c-name: &quot;CurrentWindow&quot;;
end C-function;
<P></P>
define C-function CurrentStream
  result value :: &lt;StreamHandle&gt;;
  c-name: &quot;CurrentStream&quot;;
end C-function;
<P></P>
</PRE>
<P>Example transactions:</P>
<PRE>
? &lt;void*&gt; == &lt;WindowHandle&gt; | &lt;WindowHandle&gt; ==
               &lt;StreamHandle&gt;;
#f
<P></P>
? define variable *cw* = CurrentWindow();
// Defined *cw*
<P></P>
? *cw*
{&lt;WindowHandle&gt; #xff5400}
<P></P>
? define variable *cs* = CurrentStream();
// Defined *cs*
<P></P>
? *cs*
{&lt;StreamHandle&gt; #xff6400}
<P></P>
? instance?(*cs*, &lt;WindowHandle&gt;) | 
            instance?(*cw*, &lt;StreamHandle&gt;);
#f
<P></P>
</PRE>
<P>The following example uses the ability to specify extra superclasses to place a type beneath an abstract class.</P>
<P>Example C declarations:</P>
<PRE>
struct _Matrix {
  int rank;
  int *dimensions;
  int *values;
};
<P></P>
typedef struct _Matrix *Matrix;
<P></P>
extern Matrix MatrixAdd (Matrix m, Matrix n);
<P></P>
</PRE>
<P>Example FFI definitions:</P>
<PRE>
define C-struct &lt;_Matrix-struct&gt;
  slot rank :: &lt;C-int&gt;;
  slot dimensions :: &lt;C-int*&gt;;
  slot values :: &lt;C-int*&gt;;
  pointer-type-name: &lt;_Matrix-struct*&gt;;
end C-struct;
<P></P>
define C-subtype &lt;Matrix&gt; (&lt;_Matrix-struct*&gt;, &lt;number&gt;) end;
<P></P>
define C-function MatrixAdd
  parameter m :: &lt;Matrix&gt;;
  parameter n :: &lt;Matrix&gt;;
  result value :: &lt;Matrix&gt;;
  c-name: "MatrixAdd";
end C-function;
<P></P>
define method \+ (m1 :: &lt;Matrix&gt;, m2 :: &lt;Matrix&gt;) =&gt; 
   (r :: &lt;Matrix&gt;)
  MatrixAdd(m1, m2)
end method;
<P></P>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>C FFI and Win 32 Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inter_79.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_77.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_76.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
