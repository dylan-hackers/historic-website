<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="intero_1.htm">
<LINK REL=UP HREF="inter_32.htm">
<LINK REL=PREV HREF="inter_32.htm">
<LINK REL=NEXT HREF="inter_34.htm">
<TITLE> c-type-cast</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING33></A>

<DIV>
<P><A HREF="inter_34.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_32.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_32.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P> referenced-type</P>

</DIV>
<A NAME=HEADING33-0></A>
<H1> c-type-cast</H1>
<P><I>Function</I></P>
<H3>Summary</H3>
<P> Converts a value to a value of a specified type, according to the semantics of a C type cast.</P>
<H3>Signature</H3>
<dl><dd><pre>c-type-cast <I>type</I> <I>value</I> =&gt; <I>value</I> </pre></dl>
<H3>Arguments</H3>
<DL>
<P> </P><DT><I>type</I><DD> See Description.
<P> </P><DT><I>value</I><DD> An instance of <CODE>&lt;object&gt;</CODE>.
</DL>
<H3>Values</H3>
<DL>
<P> </P><DT><I>value</I><DD> An instance of <CODE>&lt;object&gt;</CODE>.
</DL>
<H3>Library</H3>
<P> <CODE>c-ffi</CODE></P>
<H3>Module</H3>
<P> <CODE>c-ffi</CODE></P>
<H3>Description</H3>
<P> Returns the value of the second argument, converted to the type specified by the first argument, in accordance with the semantics of a C type cast. This is convenient to use when translating C code to Dylan. It may also be helpful for converting a value to the form required by a C-function wrapper argument. </P>
<P> The first argument can be either a C type designator or one of the Dylan classes <CODE>&lt;boolean&gt;</CODE>, <CODE>&lt;character&gt;</CODE>, <CODE>&lt;machine-word&gt;</CODE>, or any subclass of <CODE>&lt;number&gt;</CODE>. For a C type designator, the value is converted to the Dylan class which it maps to. <CODE>&lt;C-</CODE>[<CODE>un</CODE>]<CODE>signed-short&gt;</CODE> and <CODE>&lt;C-</CODE>[<CODE>un</CODE>]<CODE>signed-char&gt;</CODE> truncate the value as well as ensuring that it is an <CODE>&lt;integer&gt;</CODE>.</P>
<P> For example, with a function declared in C as</P>
<dl><dd><pre>  Foo(long x);</pre></dl>
<P> and called as</P>
<dl><dd><pre>  Foo((long) p);</pre></dl>
<P> if the Dylan declaration is </P>
<DL><DD><PRE>  define C-function Foo
    parameter x :: &lt;C-both-long&gt;;
    c-name: &quot;Foo&quot;;
  end;</PRE></DL>
<P> then the equivalent call will be:</P>
<dl><dd><pre>  Foo(c-type-cast(&lt;C-both-long&gt;, p));</pre></dl>
<P> which will ensure that the C semantics are preserved without needing to analyze exactly what the type cast is doing.</P>
<P></P>
<P><A NAME=MARKER-2-356></A><A NAME=MARKER-2-357></A><A NAME=MARKER-9-358></A>The functions <CODE>pointer-value</CODE> and <CODE>pointer-value-setter</CODE> perform the primitive Dylan-to-C and C-to-Dylan conversions as documented with the designator class of the pointer's contents type (see <A HREF="inter_19.htm#MARKER-9-50">Table 1.1</A>). The C-FFI signals an error if it cannot convert the object you attempt to store in the pointer to a compatible type. </P>
<P>These two functions are part of a protocol for extending the C type conversions. You can define new methods for <CODE>pointer-value</CODE> and <CODE>pointer-value-setter</CODE> for types defined by <CODE><A NAME=MARKER-2-359></A><A NAME=MARKER-2-360></A>define C-subtype</CODE> that are subtypes of <CODE><A NAME=MARKER-2-361></A><A NAME=MARKER-2-362></A>&lt;C-pointer&gt;</CODE>. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>C FFI and Win 32 Reference - 31 MAR 2000</ADDRESS>
<P><A HREF="inter_34.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="inter_32.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="inter_32.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="intero_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="intero_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="inte_152.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
