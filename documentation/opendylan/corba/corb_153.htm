<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corb_151.htm">
<LINK REL=PREV HREF="corb_152.htm">
<LINK REL=NEXT HREF="corb_154.htm">
<TITLE>A.4.8.2   Integers</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING153></A>

<DIV>
<P><A HREF="corb_154.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corb_152.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corb_151.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>A.4.8   Mapping for basic types</P>

</DIV>
<A NAME=HEADING153-0></A>
<H1>A.4.8.2   Integers</H1>
<P><B>Background</B></P>
<P>IDL defines six types of integer with the following ranges:</P>
<P></P>
<TABLE BORDER=1><CAPTION><P>Table A.7   IDL integer types.</P>
</CAPTION><TR VALIGN=TOP><TD><P>IDL integer type</P>
</TD><TD><P>Range</P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE>short</CODE> </P>
</TD><TD><P>-2<SUP>15</SUP> .. 2<SUP>15</SUP>-1</P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE>long</CODE> </P>
</TD><TD><P>-2<SUP>31</SUP> .. 2<SUP>31</SUP>-1</P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE>long</CODE> <CODE>long</CODE> </P>
</TD><TD><P>-2<SUP>63</SUP> .. 2<SUP>63</SUP>-1</P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE>unsigned</CODE> <CODE>short</CODE> </P>
</TD><TD><P>0 .. 2<SUP>16</SUP>-1</P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE>unsigned</CODE> <CODE>long</CODE> </P>
</TD><TD><P>0 .. 2<SUP>32</SUP>-1</P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE>unsigned</CODE> <CODE>long</CODE> <CODE>long</CODE> </P>
</TD><TD><P>0 .. 2<SUP>64</SUP>-1</P>
</TD></TR></TABLE><P>Dylan has the class <CODE>&lt;integer&gt;</CODE> which is required to be at least 28 bits of precision. Overflow behavior is implementation defined. </P>
<P><B>Specification</B></P>
<P>All IDL integer types shall be mapped to the following Dylan classes.</P>
<P></P>
<TABLE BORDER=1><CAPTION><P>Table A.8   IDL and Dylan integer types.</P>
</CAPTION><TR VALIGN=TOP><TD><P>IDL integer type</P>
</TD><TD><P>Dylan CORBA library integer type</P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE>short</CODE> </P>
</TD><TD><P><CODE>CORBA/&lt;short&gt;</CODE> </P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE>long</CODE> </P>
</TD><TD><P><CODE>CORBA/&lt;long&gt;</CODE> </P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE>long</CODE> <CODE>long</CODE> </P>
</TD><TD><P><CODE>CORBA/&lt;long-long&gt;</CODE> </P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE>unsigned</CODE> <CODE>short</CODE> </P>
</TD><TD><P><CODE>CORBA/&lt;unsigned-short&gt;</CODE> </P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE>unsigned</CODE> <CODE>long</CODE> </P>
</TD><TD><P><CODE>CORBA/&lt;unsigned-long&gt;</CODE> </P>
</TD></TR><TR VALIGN=TOP><TD><P><CODE>unsigned</CODE> <CODE>long</CODE> <CODE>long</CODE> </P>
</TD><TD><P><CODE>CORBA/&lt;unsigned-long-long&gt;</CODE> </P>
</TD></TR></TABLE><P>These classes, in turn, shall be defined as aliases for, or subclasses of, some Dylan implementation's integer classes, and shall be capable of representing the specified range of values.</P>
<P><B>Rationale</B></P>
<P>The rationale is as given for the general case above. In this particular instance, although an individual Dylan compiler could convert a <CODE>limited</CODE> expression to the best concrete class that the runtime supports, this is not guaranteed. The runtime may have a good class for implementing a CORBA class, but the compiler may not be capable of translating a <CODE>limited</CODE> expression into it.</P>
<P>Even if the translation of the <CODE>limited</CODE> expression to the best runtime class was guaranteed, the expressions are quite long an cumbersome to use repeatedly in code, and an alias is convenient.</P>
<P><B>Examples</B></P>
<PRE>
// IDL
const long DIM_OF_UNIV = 11;
<P></P>
// Dylan
define constant $DIM_OF_UNIV :: CORBA/&lt;long&gt; = 11;
<P></P>
// Some alternative binding implementations
define constant CORBA/&lt;long&gt; = &lt;integer&gt;;
define constant CORBA/&lt;long&gt; = &lt;machine-word&gt;;
define constant CORBA/&lt;long&gt; =
  limited(&lt;integer&gt;, min: -(2 ^ 31), max: (2 ^ 31) -1);
<P></P>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corb_154.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corb_152.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corb_151.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
