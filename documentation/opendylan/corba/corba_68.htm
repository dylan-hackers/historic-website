<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corba_67.htm">
<LINK REL=PREV HREF="corba_67.htm">
<LINK REL=NEXT HREF="corba_69.htm">
<TITLE>6.4.1   Object adapters</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING68></A>

<DIV>
<P><A HREF="corba_69.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_67.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_67.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>6.4   Implementing CORBA objects in a server</P>

</DIV>
<A NAME=HEADING68-0></A>
<H1>6.4.1   Object adapters</H1>
<P>An <A NAME=MARKER-2-231></A>object adapter is responsible for the following functions:</P>
<UL>
<LI>Generation and interpretation of object references
<LI>Registration of servants
<LI>Mapping object references to the corresponding servants
<LI>IDL method invocations, mediated by skeleton methods
<LI>Servant activation and deactivation
</UL>
<P>The Functional Developer ORB library provides an implementation of the <I><A NAME=MARKER-2-232></A>Portable Object Adapter</I> (POA). This object adapter forms part of the CORBA standard and, like the ORB, has an interface that is specified in pseudo IDL (PIDL). The Functional Developer interface to the POA conforms closely to the interface obtained by applying the Dylan mapping rules to the POA's PIDL specification.</P>
<P>A POA object manages the implementation of a collection of objects, associating object references with specific servants. While the ORB is an abstraction visible to both the client and server, POA objects are visible only to the server. User-supplied object implementations are registered with a POA and assigned object references. When a client issues a request to perform an operation on such an object reference, the ORB and POA cooperate to determine which servant the operation should be invoked on, and to perform the invocation as an upcall through a skeleton method.</P>
<P>The POA allows several ways of using servants although it does not deal with the issue of starting the server process. Once started, however, there can be a servant started and ended for a single method call, a separate servant for each object, or a shared servant for all instances of the object type. It allows for groups of objects to be associated by means of being registered with different instances of the POA object and allows implementations to specify their own activation techniques. If the implementation is not active when an invocation is performed, the POA will start one.</P>
<P>Unfortunately, the flexibility afforded by the POA means that its interface is complex and somewhat difficult to use. The example in this tutorial makes only elementary use of the POA.</P>
<P>Here is the PIDL specification of the facilities of the POA that are used in this tutorial:</P>
<PRE>
module PortableServer {

  native Servant;

  interface POAManager {
    exception AdapterInactive{};

    void activate() raises (...);
    ...
  };
<P></P>
</PRE>
<DL>
<DT><DD>(see next page)
</DL>
<PRE>
  interface POA {
    exception WrongAdapter {};

    readonly attribute POAManager the_POAManager;

    Object servant_to_reference(in Servant p_servant) 
      raises (...);

    Servant reference_to_servant(in Object reference) 
      raises (WrongAdapter, ...);
    ...
  };
};
<P></P>
</PRE>
<P>The POA-related interfaces are defined in a module separate from the <CODE>CORBA</CODE> module, called <CODE>PortableServer</CODE>. That module declares several interfaces, of which only the <CODE>POA</CODE> and <CODE>POAManager</CODE> are shown here.</P>
<P>The <CODE>PortableServer</CODE> module specifies the type <CODE>Servant</CODE>. Values of type <CODE>Servant</CODE> represent language-specific implementations of CORBA interfaces. Since this type can only be determined by the programming language in question, it is merely declared as a <CODE>native</CODE> type in the PIDL.</P>
<P>In the Dylan mapping, the <CODE>Servant</CODE> type maps to the abstract class <CODE>PortableServer/&lt;Servant&gt;</CODE>. User-defined Dylan classes that are meant to implement CORBA objects and be registered with a POA must inherit from this abstract class.</P>
<P>Each <CODE>POA</CODE> object has an associated <CODE>POAManager</CODE> object. A POA manager encapsulates the processing state of the POA it is associated with. Using operations on the POA manager, an application can make requests for a POA to be queued or discarded, and can have the POA deactivated. </P>
<P>A POA manager has two main processing states, <I>holding</I> and <I>active</I>, that determine the capabilities of the associated POA and the handling of ORB requests received by that POA. Both the POA manager and its associated POA are initially in the <I>holding</I> state.</P>
<P>When a POA is in the holding state, it simply queues requests received from the ORB without dispatching them to their implementation objects. In the active state, the POA receives and processes requests.</P>
<P>Invoking the POA Manager's <CODE>activate</CODE> operation causes it, and its associated POA, to enter the active state.</P>
<P>A POA object provides two useful operations that map between object references and servants: <CODE>servant_to_reference</CODE> and <CODE>reference_to_servant</CODE>.</P>
<P>The <CODE>servant_to_reference</CODE> operation has two behaviors. If the given servant is not already active in the POA, then the POA generates a new object reference for that servant, records the association in the POA, and returns the reference. If the servant is already active in the POA, then the operation merely returns its associated object reference.</P>
<P>The <CODE>reference_to_servant</CODE> operation returns the servant associated with a given object reference in the <A NAME=MARKER-2-233></A>POA. If the object reference was not created by this POA, the operation raises the <CODE>WrongAdapter</CODE> exception.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corba_69.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_67.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_67.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
