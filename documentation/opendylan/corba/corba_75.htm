<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corba_63.htm">
<LINK REL=PREV HREF="corba_74.htm">
<LINK REL=NEXT HREF="corba_76.htm">
<TITLE>6.6   Implementing CORBA initialization for the bank server</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING75></A>

<DIV>
<P><A HREF="corba_76.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_74.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_63.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>6 The Bank Server</P>

</DIV>
<A NAME=HEADING75-0></A>
<A NAME=UID-bank-server-890178></A>
<H1>6.6   Implementing CORBA<A NAME=MARKER-2-237></A> initialization for the bank server</H1>
<P>To complete the implementation of the bank server we need to write the code that enters it into the CORBA environment. In detail, we need to:</P>
<UL>
<LI>Initialize the server's ORB
<LI>Get a reference to the ORB pseudo-object for use in future ORB operations
<LI>Get a reference to the POA pseudo-object for use in future POA operations
<LI>Make a bank servant and register it with the POA
<LI>Make the object reference of the bank servant available to the client
<LI>Activate the POA to start processing incoming requests
<LI>Prevent the process from exiting, providing availability
</UL>
<P>To do this, we need to make use of some additional operations specified in the CORBA module:</P>
<PRE>
module CORBA {
...
  interface ORB {
...
    typedef string ObjectId;
     exception InvalidName {};
     Object resolve_initial_references (in ObjectId identifier)
       raises (InvalidName);
<P></P>
    void run();
    void shutdown( in boolean wait_for_completion );
  }
}
<P></P>
</PRE>
<P>The CORBA standard specifies the ORB operation <CODE>resolve_initial_references</CODE>. This operation provides a portable method for applications to obtain initial references to a small set of standard objects (objects other than the initial ORB). These objects are identified by a mnemonic name, using a string knows as an <CODE>ObjectId</CODE>. For instance, the <CODE>ObjectID</CODE> for an initial POA object is <CODE>&quot;RootPOA&quot;</CODE>. (References to a select few other objects, such as the <CODE>&quot;Interface Repository&quot;</CODE> and <CODE>&quot;NamingService&quot;</CODE>, can also be obtained in this manner.)</P>
<P>The ORB operation <CODE>resolve_initial_references</CODE> returns the object associated with an <CODE>ObjectId</CODE>, raising the exception <CODE>InvalidName</CODE> for an unrecognized <CODE>ObjectID</CODE>.</P>
<P>The <CODE>run</CODE> and <CODE>shutdown</CODE> operations are useful in multi-threaded programs, such as servers, which, apart from the main thread, need to run a separate request receiver thread for each POA.</P>
<P>(A single threaded application, such as a pure ORB client, does not generally need to use these operations.)</P>
<P>A thread that calls an ORB's <CODE>run</CODE> operation simply waits until it receives notification that the ORB has shut down.</P>
<P>Calling <CODE>run</CODE> in a server's main thread can then be used to ensure that the server process does not exit until the ORB has been explicitly shut down. </P>
<P>Meanwhile, the <CODE>shutdown</CODE> operation instructs the ORB, and its object adapters, to shut down. </P>
<P>If the <CODE>wait_for_completion</CODE> parameter is <CODE>TRUE</CODE>, the operation blocks until all pending ORB processing has completed, otherwise it simply shuts down the ORB immediately.</P>
<PRE>
define method initialize-server ()
<P></P>
  let location-service = get-location-service();
<P></P>
  // get reference to ORB
  let orb = CORBA/ORB-init(make(CORBA/&lt;arg-list&gt;), 
                         &quot;Functional Developer ORB&quot;);
<P></P>
  // get reference to root POA, initially in the holding state
  let RootPOA = CORBA/ORB/resolve-initial-references(orb,
                                               &quot;RootPOA&quot;);
<P></P>
  with-dbms ($dbms)
     // connect to the database
     let database = make(&lt;database&gt;, 
                       datasource-name: $datasource-name);
     let user =  make(&lt;user&gt;, user-name: $user-name, 
                     password: $user-password);
     let connection = connect(database, user);
<P></P>
     // make the server frame, initialize and refresh it.
     let server-frame = make(&lt;server-frame&gt;, 
                           connection: connection);
     server-frame.refresh-check-button.gadget-value := #t;
     refresh(server-frame);
<P></P>
     //  make the bank servant
     let bank = make(&lt;bank-implementation&gt;, 
                    connection: connection, 
                    poa: RootPOA, 
                    name: &quot;Dylan Bank&quot;, 
                    server-frame: server-frame);
<P></P>
     // get the servant's object reference from the poa
     let bank-reference = 
          PortableServer/POA/servant-to-reference(bank.poa, 
                                                  bank);
     // activate the bank's POA using its POA manager.
     let POAManager = 
           PortableServer/POA/the-POAManager(bank.poa);
     PortableServer/POAManager/activate(POAManager);
<P></P>
     // register the bank with the location service
     register-bank(orb, location-service, bank-reference);
<P></P>
     // create a separate thread to shut down the orb, 
     // unblocking the main thread.
     make(&lt;thread&gt;,
          function: method ()
                      start-frame(server-frame);
                      CORBA/ORB/shutdown(orb, #t);
                    end method);
<P></P>
     // block the main thread
     CORBA/ORB/run(orb);
<P></P>
     // remove from location service
     unregister-bank(orb, location-service, bank-reference);
<P></P>
     // close the bank's connection.
     disconnect(connection);
  end with-dbms;
end method;
<P></P>
</PRE>
<P>The <CODE>initialize-server</CODE> function first initializes the Functional Developer ORB by calling the Dylan generic function <CODE>CORBA/ORB-init</CODE>, just as we initialized the ORB in the client. The call returns a <CODE>CORBA/&lt;ORB&gt;</CODE> pseudo object. </P>
<P>Invoking <CODE>CORBA/ORB/resolve-initial-references</CODE> on this ORB, passing the <CODE>ObjectID &quot;RootPOA&quot;</CODE>, returns a POA object of class <CODE>PortableServer/&lt;POA&gt;</CODE>. This is the CORBA standard method for obtaining the initial POA object. Note that RootPOA is initially in the <I>holding</I> state. </P>
<P>Next, we connect to the database and use the connection to make a bank servant. We register the servant with the POA, RootPOA, and publish the resulting object reference, encoded as a string, according to the location-service requested in the command line arguments. By default this is via a shared file. However, if the following is specified on the command line:</P>
<PRE>
-location-service:naming-service
<P></P>
</PRE>
<P>then a Name Service<A NAME=MARKER-2-238></A> is used instead. Use the ORB command line option <BR><CODE>-ORBname-service</CODE> to specify the IOR of the Name Service. Be sure to use the same command line options for the client and the server or they will not find each other!</P>
<P>We then obtain the POA Manager for the POA using the POA operation <CODE>PortableServer/POA/the-POAManager</CODE>. The call to <CODE>PortableServer/POAManager/activate</CODE> moves the POA out of the holding state, into the <I>active</I> state, ready to receive and process incoming requests.</P>
<P>To prevent the server from exiting before having the chance to process any requests, we introduce a new thread. This thread waits until the user responds to a DUIM dialog and then proceeds to shut down the ORB with a CORBA standard call to <CODE>CORBA/ORB/shutdown</CODE>. Meanwhile, back in the main thread, the subsequent call to <CODE>CORBA/ORB/run</CODE> causes the main thread to block, waiting for notification that the ORB has shut down.</P>
<P>Once the ORB has shut down, the main thread resumes, closes the connection to the bank, and exits, terminating the server application.</P>
<P>The full implementation of the server initialization is in the file <CODE>init-server.dylan</CODE>.</P>
<P>This completes the description of our implementation of the server.<A NAME=MARKER-2-239></A></P>
<P></P>
<A NAME=LINK-bank-server-lastpage></A><A NAME=LINK-projects-firstpage></A><!-- FM pgf ignored -->

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corba_76.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_74.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_63.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
