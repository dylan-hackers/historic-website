<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corba_51.htm">
<LINK REL=PREV HREF="corba_53.htm">
<LINK REL=NEXT HREF="corba_55.htm">
<TITLE>4.3.3   Mapping for attributes </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING54></A>

<DIV>
<P><A HREF="corba_55.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_53.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_51.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.3   Mapping IDL to Dylan </P>

</DIV>
<A NAME=HEADING54-0></A>
<H1>4.3.3   Mapping for attributes </H1>
<P>The read-only <CODE>balance</CODE> attribute of an IDL <CODE>account</CODE> gives rise to the Dylan generic function:</P>
<PRE>
define open generic BankingDemo/account/balance 
    (object :: BankingDemo/&lt;account&gt;) 
  =&gt; (result :: CORBA/&lt;long&gt;)
<P></P>
</PRE>
<P>If we had omitted the <CODE>readonly</CODE> keyword from the definition of the <CODE>balance</CODE> attribute, the mapping would have introduced an additional generic <CODE>-setter</CODE> function:</P>
<PRE>
define open generic BankingDemo/account/balance-setter 
    (value :: CORBA/&lt;long&gt;, object :: BankingDemo/&lt;account&gt;)
  =&gt; (value :: CORBA/&lt;long&gt;)
<P></P>
</PRE>
<P>Recall that, in the IDL source, the <CODE>balance</CODE> attribute is declared within the definition, and thus the subordinate namespace, of the <CODE>BankingDemo</CODE> module and the <CODE>account</CODE> interface. Again, because Dylan does not support nested namespaces, the IDL scope identifiers <CODE>BankingDemo</CODE> and <CODE>account</CODE> are simply prefixed to the name of the attribute's getter method, resulting in the Dylan function identifier <CODE>BankingDemo/account/balance</CODE>.</P>
<P><B>Aside:</B> More generally, the Dylan language IDL binding specifies that an IDL identifier is mapped to a Dylan identifier by appending together all the enclosing scope identifiers and the scoped identifier itself, separating the identifiers by forward slashes (<CODE>/</CODE>). </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corba_55.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_53.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_51.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
