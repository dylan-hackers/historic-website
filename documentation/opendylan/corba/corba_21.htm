<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corba_19.htm">
<LINK REL=PREV HREF="corba_20.htm">
<LINK REL=NEXT HREF="corba_22.htm">
<TITLE>2.4.2   A browsing detour </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING21></A>

<DIV>
<P><A HREF="corba_22.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_20.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_19.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>2.4   Defining the interface</P>

</DIV>
<A NAME=HEADING21-0></A>
<H1>2.4.2   A browsing detour </H1>
<P>The next step would be to implement the client and server. But it is instructive to take a brief detour and look at what is inside the new projects that we gained by compiling our small IDL file.</P>
<DL>
<DT><DD>1.  Go to the My-Hello-World-Client project window and select the Sources page.
<DT><DD>2.  Expand the My-Hello-World-Stubs subproject.
</DL>
<P>As expected, the My-Hello-World-Stubs project contains the protocol project, My-Hello-World-Protocol.</P>
<DL>
<DT><DD>3.  Expand the My-Hello-World-Protocol subproject.
</DL>
<P>The <CODE>my-hello-world-protocol.dylan</CODE> file contains the automatically generated Dylan protocol representing our IDL for Hello World.</P>
<DL>
<DT><DD>4.  Expand the <CODE>my-hello-world-protocol.dylan</CODE> file.
<DT><DD>5.  Double-click on the generic function for <CODE>world/hello</CODE>.
<DT><DD>The browser appears.
<DT><DD><IMG ALIGN=TOP SRC=co21ima3.gif>
</DL>
<P>Figure 2.2   <A NAME=MARKER-10-139></A>A Dylan generic function mapped from an IDL declaration.</P>
<P>Notice how the Dylan code has been mapped from the IDL. An IDL operation whose full name was <CODE>world::hello</CODE> has been mapped to a Dylan open generic function whose name is <CODE>world/hello</CODE>. The mapping rules are part of what is called an IDL <I>binding</I> for Dylan. There is a draft standard for the Dylan IDL binding in <A HREF="corb_102.htm#MARKER-9-355">Appendix A, "An IDL Binding for Dylan"</A>.</P>
<DL>
<DT><DD>6.  Select the browser's Methods page. 
<DT><DD>7.  Double-click on the only method listed.
</DL>
<P>The browser now shows the source of the method that takes care of bundling up arguments into a request and invoking the ORB in order to send it to the server. This method was generated automatically from the IDL, and "just works" -- you do not have to worry about it, or other such methods that the compiler generates. </P>
<P><B>Note:</B> Since the compiler will regenerate these files if the IDL is changed, you should not edit them by hand.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corba_22.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_20.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_19.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
