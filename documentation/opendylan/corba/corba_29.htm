<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corba_27.htm">
<LINK REL=PREV HREF="corba_28.htm">
<LINK REL=NEXT HREF="corba_30.htm">
<TITLE>2.6.2   Implementing the server's CORBA objects</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING29></A>

<DIV>
<P><A HREF="corba_30.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_28.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_27.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>2.6   Implementing the server</P>

</DIV>
<A NAME=HEADING29-0></A>
<H1>2.6.2   Implementing the <A NAME=MARKER-2-146></A>server's CORBA objects</H1>
<P>According to the IDL we wrote, the server is supposed to provide <CODE>world</CODE> objects, which have an operation called <CODE>hello</CODE>. How do we implement <CODE>world</CODE> and <CODE>hello</CODE> in the server? </P>
<P>An IDL interface, such as <CODE>world</CODE>, is represented in Dylan using a class. Operations in an interface are represented as methods on the class representing the interface.</P>
<P>The server skeletons library we generated by compiling our IDL file contains the underlying CORBA framework for <CODE>world</CODE> objects. This framework is represented by the <CODE>&lt;world-servant&gt;</CODE> Dylan class. </P>
<P>A <I>servant</I> is the CORBA way of connecting a request to an object implementation. In this case the mapping will be one-to-one: a servant will be the object implementation. However, many objects could be implemented by one servant, or conversely, many servants could implement a single object. These more complicated applications of servants need not concern us now.</P>
<P>The <CODE>&lt;world-servant&gt;</CODE> class is a subclass of <CODE>&lt;world&gt;</CODE> (again from the protocol library) and another class that provides CORBA functionality. By extending <CODE>&lt;world-servant&gt;</CODE> we provide a Dylan implementation of <CODE>world</CODE> and inherit the CORBA functionality that our objects will need in order to communicate with their clients:</P>
<PRE>
define class &lt;world-implementation&gt; (&lt;world-servant&gt;)
end class;
<P></P>
</PRE>
<P>As noted in <A HREF="corba_25.htm#MARKER-9-144">"Invoking an operation" on page 17</A>, the <CODE>hello</CODE> operation name was mapped into Dylan as the <CODE>world/hello</CODE> generic function, defined on <CODE>&lt;world&gt;</CODE>. To implement <CODE>hello</CODE>, we write a <CODE>world/hello</CODE> method on <CODE>&lt;world-implementation&gt;</CODE>:</P>
<PRE>
define method world/hello (world :: &lt;world-implementation&gt;)
    =&gt; (hello :: &lt;string&gt;)
  &quot;Hello World!&quot;
end method;
<P></P>
</PRE>
<P>This method returns the string that will be passed back to the client. With this, the Dylan implementation of the <CODE>world</CODE> <A NAME=MARKER-2-147></A>object type we described in IDL is complete.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corba_30.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_28.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_27.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
