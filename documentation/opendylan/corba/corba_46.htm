<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corba_43.htm">
<LINK REL=PREV HREF="corba_45.htm">
<LINK REL=NEXT HREF="corba_47.htm">
<TITLE>4.1.3   IDL for the bank interface</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING46></A>

<DIV>
<P><A HREF="corba_47.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_45.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_43.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.1   Writing IDL for a CORBA application </P>

</DIV>
<A NAME=HEADING46-0></A>
<H1>4.1.3   IDL for the bank interface</H1>
<P>We can now design the interface of a bank object. The intention is that a bank associates customer names with accounts, with each name identifying at most one account. A client is able to open accounts for new customers and to retrieve both accounts and checking accounts for existing customers from the persistent store. If the client attempts to open a second account under the same name, the bank should refuse the request by raising an exception. Similarly, if the client attempts to retrieve an account for an unknown customer, the bank should reject the request by raising an exception.</P>
<P>The IDL definition of the <CODE>bank</CODE> interface captures some of these requirements:</P>
<PRE>
// in module BankingDemo
interface bank {
    readonly attribute string name;
<P></P>
    exception duplicateAccount{};
<P></P>
    account openAccount (in string name) 
      raises (duplicateAccount);
<P></P>
    checkingAccount openCheckingAccount(in string name, 
                                        in long limit)
      raises (duplicateAccount);
<P></P>
    exception nonExistentAccount{};
<P></P>
    account retrieveAccount(in string name)
      raises (nonExistentAccount);   
<P></P>
    void closeAccount (in account account);
};
<P></P>
</PRE>
<P>The name of a <CODE>bank</CODE> object is recorded in its <CODE>name</CODE> attribute.</P>
<P>The operation <CODE>openAccount</CODE> is declared to take a CORBA <CODE>string</CODE> and return an <CODE>account</CODE>. Because <CODE>account</CODE> is defined as an interface, and not a type, this means that the operation will return a <I>reference</I> to an <CODE>account</CODE> object. This illustrates an important distinction between ordinary values and objects in CORBA: while members of basic and constructed types are passed by value, objects are passed by reference. </P>
<P>The qualification <CODE>raises</CODE> <CODE>(duplicateAccount)</CODE> specifies that <CODE>openAccount</CODE> can raise the user-defined exception <CODE>duplicateAccount</CODE>, instead of returning an account. (The exception <CODE>duplicateAccount</CODE> has no fields.)</P>
<P>The operation <CODE>openCheckingAccount</CODE> is similar to <CODE>openAccount</CODE>, but takes an additional argument, <CODE>limit</CODE>, which represents the account's overdraft limit.</P>
<P>The operation <CODE>retrieveAccount</CODE> looks up the account (or checking account), if any, associated with a customer <CODE>name</CODE>, and returns an object reference of interface <CODE>account</CODE>. The operation can raise the exception <CODE>nonExistentAccount</CODE> to indicate that there is no account under the supplied name.</P>
<P>The last operation, <CODE>closeAccount</CODE>, closes an <CODE>account</CODE> by deleting it from the bank's records.</P>
<P>Because <CODE>checkingAccount</CODE> inherits from <CODE>account</CODE>, a <CODE>checkingAccount</CODE> object can be used wherever an <CODE>account</CODE> object is expected, whether as the actual argument, or the result, of an operation. For instance, we can use <CODE>closeAccount</CODE> to close <CODE>checkingAccount</CODE> objects as well as <CODE>account</CODE> objects, and we can use <CODE>retrieveAccount</CODE> to fetch <CODE>checkingAccount</CODE> objects as well as <CODE>account</CODE> objects.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corba_47.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_45.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_43.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
