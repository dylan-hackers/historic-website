<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corba_51.htm">
<LINK REL=PREV HREF="corba_54.htm">
<LINK REL=NEXT HREF="corba_56.htm">
<TITLE>4.3.4   Mapping for operations </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING55></A>

<DIV>
<P><A HREF="corba_56.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_54.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_51.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.3   Mapping IDL to Dylan </P>

</DIV>
<A NAME=HEADING55-0></A>
<H1>4.3.4   Mapping for operations </H1>
<P>The IDL operation <CODE>credit</CODE> is mapped to the Dylan generic function:</P>
<PRE>
define open generic BankingDemo/account/credit 
    (object :: BankingDemo/&lt;account&gt;, 
     amount :: CORBA/&lt;unsigned-long&gt;)
  =&gt; ();
<P></P>
</PRE>
<P>In IDL, the <CODE>credit</CODE> operation is defined within the <CODE>account</CODE> interface, declaring it to be an operation on <CODE>account</CODE> objects. The Dylan language IDL binding adopts the convention that an operation's target object should be passed as the first argument of the corresponding Dylan generic function. Thus the first parameter of the generic function <CODE>BankingDemo/account/credit</CODE> is an object of class <CODE>BankingDemo/&lt;account&gt;</CODE>.</P>
<P>The operation's <CODE>in</CODE> and <CODE>inout</CODE> arguments become the remaining parameters of the corresponding Dylan generic function. In this case, the <CODE>credit</CODE> operation specifies a single <CODE>in</CODE> parameter, <CODE>in</CODE> <CODE>unsigned</CODE> <CODE>long</CODE> <CODE>amount</CODE>, that determines the second and only other parameter, <CODE>amount</CODE> <CODE>::</CODE> <CODE>CORBA/&lt;long&gt;</CODE>, if the <CODE>BankingDemo/account/credit</CODE> generic function.</P>
<P>The operation's result type and any other parameters declared as <CODE>out</CODE> or <CODE>inout</CODE> become results of the corresponding Dylan generic function. In this case, because the result type of <CODE>credit</CODE> is <CODE>void</CODE>, and the operation has no <CODE>out</CODE> or <CODE>inout</CODE> parameters, <CODE>BankingDemo/account/credit</CODE> has an empty result list.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corba_56.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_54.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_51.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
