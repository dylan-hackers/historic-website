<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corba_63.htm">
<LINK REL=PREV HREF="corba_65.htm">
<LINK REL=NEXT HREF="corba_67.htm">
<TITLE>6.3   Overview of the Functional Developer SQL-ODBC library </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING66></A>

<DIV>
<P><A HREF="corba_67.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_65.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_63.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>6 The Bank Server</P>

</DIV>
<A NAME=HEADING66-0></A>
<A NAME=UID-bank-server-889836></A>
<H1>6.3   Overview of the Functional Developer SQL-ODBC library </H1>
<P>The SQL-ODBC library is built on top of a generic SQL library. The SQL<CODE> </CODE>library does not include the low-level code necessary to communicate with any particular database management system (DBMS): it simply provides a convenient high-level mechanism for integrating database operations into Dylan applications.</P>
<P>The SQL library is designed to form the high-level part of implementation libraries that contain lower-level code to support a particular DBMS protocol, such as ODBC. The SQL-ODBC library is one such implementation library.</P>
<P>The SQL library defines the following abstract classes:</P>
<UL>
<LI>The abstract class <CODE>&lt;dbms&gt;</CODE> is used to identify a database management system.
</UL>
<DL>
<DT><DD>The SQL-ODBC library defines an instantiable subclass <CODE>&lt;odbc-dbms&gt;</CODE> of <CODE>&lt;user&gt;</CODE> for identifying the ODBC DBMS. 
</DL>
<UL>
<LI>The abstract class <CODE>&lt;user&gt;</CODE> identifies users to a DBMS. 
</UL>
<DL>
<DT><DD>Exactly what a user means depends on the DBMS. The <CODE>make</CODE> method on <CODE>&lt;user&gt;</CODE> takes two keyword arguments, <CODE>user:</CODE> and <CODE>password:</CODE>. The <CODE>user:</CODE> init-keyword takes an instance of <CODE>&lt;string&gt;</CODE> that should be a valid user name for the DBMS in question. The <CODE>password:</CODE> init-keyword should be the password that accompanies the user name. 
<DT><DD>The SQL-ODBC library defines the instantiable subclass <CODE>&lt;odbc-user&gt;</CODE> of <CODE>&lt;user&gt;</CODE> for identifying a user to an ODBC DBMS.
</DL>
<UL>
<LI>The abstract class <CODE>&lt;database&gt;</CODE> identifies a database to a DBMS. 
</UL>
<DL>
<DT><DD>Exactly what a database is depends on the DBMS in question. The SQL-ODBC library defines the class <CODE>&lt;odbc-database&gt;</CODE>, a subclass of <CODE>&lt;database&gt;</CODE>, whose instances identify databases to an ODBC DBMS. In particular, the <CODE>make</CODE> method on <CODE>&lt;odbc-database&gt;</CODE> accepts the <CODE>datasource-name:</CODE> keyword argument to specify the name of the ODBC datasource, as a <CODE>&lt;string&gt;</CODE>.
</DL>
<UL>
<LI>The abstract class <CODE>&lt;connection&gt;</CODE> represents database connections.
</UL>
<DL>
<DT><DD>Instances of this class identify an execution context for executing SQL statements. The exact composition of a connection depends on the DBMS. 
<DT><DD>The SQL-ODBC library defines the class <CODE>&lt;odbc-connection&gt;</CODE>, a subclass of <CODE>&lt;connection&gt;</CODE>. Instances of this class are created upon making a connection an ODBC database. 
</DL>
<P>The <CODE>&lt;sql-statement&gt;</CODE> class represents SQL statements and their state. This class has the init-keywords <CODE>text:</CODE>, <CODE>input-indicator:</CODE>, and <CODE>output-indicator:</CODE>. The required keyword <CODE>text:</CODE> expects a <CODE>&lt;string&gt;</CODE> that contains the text of an SQL statement. <I>Host variables</I> can be included in the statement by placing a question mark (<CODE>?</CODE>) at the point in the string at which the value of the host variable should be substituted. The optional keyword argument <CODE>output-indicator:</CODE> expects an instance of <CODE>&lt;object&gt;</CODE>. The output indicator is a substitution value to be used whenever the column of a retrieved record contains the SQL NULL value. The optional keyword <CODE>input-indicator:</CODE> expects an instance of <CODE>&lt;object&gt;</CODE>. The input indicator is a marker value used to identify SQL NULL values in host variables.</P>
<P>The SQL library defines two convenient macros that we use in this tutorial: <CODE>with-dbms</CODE> and <CODE>with-connection</CODE>. Here is the form of a <CODE>with-dbms</CODE> call:</P>
<PRE>
with-dbms (<I>dbms</I>)
  <I>body</I> 
end with-dbms;
<P></P>
</PRE>
<P>The <CODE>with-dbms</CODE> statement macro considers <I>dbms</I>, which must be a general instance of class <CODE>&lt;dbms&gt;</CODE>, to be the DBMS in use throughout <I>body</I>. For example, if <I>dbms</I> is an instance of <CODE>&lt;odbc-dbms&gt;</CODE> and <I>body</I> contains a call to <CODE>connect</CODE>, then the call actually returns an <CODE>&lt;odbc-connection&gt;</CODE>.</P>
<P>Here is the form of a <CODE>with-connection</CODE> call:</P>
<PRE>
with-connection (<I>connection</I>)
  <I>body</I> 
end with-connection;
<P></P>
</PRE>
<P>The <CODE>with-connection</CODE> statement macro considers <I>connection</I>, which must be an instance of class <CODE>&lt;connection&gt;</CODE>, to be the default database connection in use throughout <I>body</I>. For instance, each call to <CODE>execute</CODE> an SQL statement within <I>body</I> uses <I>connection</I> by default, so that the call's <CODE>connection:</CODE> keyword argument need not be supplied.</P>
<P>A call to the generic function <CODE>connect(<I>database</I></CODE>, <I>user</I>) returns a new connection of class <CODE>&lt;connection&gt;</CODE> to the specified database <I>database</I> as the user <I>user</I>. The connection can be closed by a call to <CODE>disconnect(<I>connection</I></CODE>).</P>
<P>A call to the generic function <CODE>execute(<I>sql-statement</I></CODE>, <CODE>parameter:</CODE> <I>vector</I>) executes the SQL statement <I>sql-statement</I> on the default connection. The (optional) <CODE>parameter:</CODE> argument supplies the vector of values to be substituted for any host variables appearing in the statement's text. The <I>n</I>th entry of this vector determines the value of the <I>n</I>th host variable. Vector entries that equal the value of the statement's <CODE>input-indicator:</CODE> keyword argument are sent as SQL NULL values.</P>
<P>If the SQL statement is a <CODE>select</CODE> statement, then the result of executing the statement (with <CODE>execute</CODE>) is a value of class <CODE>&lt;result-set&gt;</CODE>, which is itself a subclass of Dylan's built in <CODE>&lt;sequence&gt;</CODE> class. Each element of a result set is a record and each element of a record is a value. The various Dylan collection protocols and functions work as you would expect on a result set. For the purpose of this tutorial, it suffices to think of a result set as a sequence of vectors.</P>
<P>Just to illustrate the use of the SQL-ODBC library without worrying about the implementation of our CORBA server, here is a code fragment that might be used to extract the entries in the <CODE>Name</CODE> and <CODE>Balance</CODE> columns of the <CODE>bankDB.mdb</CODE> database:</P>
<PRE>
begin
  // choose the DBMS
  let odbc-dbms = make(&lt;odbc-dbms&gt;); 
<P></P>
  with-dbms (odbc-dbms)
    // identify the database
    let database = make(&lt;database&gt;, datasource-name: &quot;bankDB&quot;); 
<P></P>
    // identify the user
    let user = make(&lt;user&gt;, user-name: &quot;&quot;, password: &quot;&quot;); 
<P></P>
    // establish a connection for this database and user
    let connection = connect(database, user);
<P></P>
    with-connection (connection) // make it the default
      let query1 =               // construct the query...
        make(&lt;sql-statement&gt;, 
             text: &quot;select (Name, Balance) from Accounts &quot;);
<P></P>
       // ... and execute it on the default connection
       let result-set = execute(query); 
<P></P>
       // extract the first record
       let first-record = result-set[0]; 
<P></P>
       // extract the first field of the first record.
       let first-name = result-set[0][0]; 
       let first-balance = result-set[0][1];
       let second-record = result-set[1];
       ...
    end with-connection;
    disonnect(connection); // disconnect from the database
  end with-dbms;
end;
<P></P>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corba_67.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_65.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_63.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
