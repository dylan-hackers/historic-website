<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corba_15.htm">
<LINK REL=PREV HREF="corba_17.htm">
<LINK REL=NEXT HREF="corba_19.htm">
<TITLE>2.3   Creating the projects </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING18></A>

<DIV>
<P><A HREF="corba_19.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_17.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_15.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>2 Quick Start Tutorial</P>

</DIV>
<A NAME=HEADING18-0></A>
<A NAME=UID-getstart-890255></A>
<H1>2.3   Creating the projects </H1>
<P>In this section we create projects for the client and server parts of our CORBA-based Hello World application.</P>
<P>To create these projects we use the New Project wizard. For CORBA projects, the wizard can create either a client project, a server project, or both at once. Since we are writing both the client and the server, we are going to ask the wizard to create both our projects at once.</P>
<DL>
<DT><DD>1.  Select <B>File &gt; New...</B> from the Functional Developer main window, or click the New Project button (<IMG ALIGN=TOP SRC=co18ima1.gif>) on the toolbar.
<DT><DD>The New Project wizard appears.
</DL>
<P>We are going to choose "CORBA Client and/or Server" as the project type. In the wizard, a CORBA project is a project defined relative to an IDL file. The IDL file is a file containing a declaration of the CORBA interfaces that the server implements and the client accesses, written in OMG's Interface Definition Language.</P>
<DL>
<DT><DD>2.  Select "CORBA Client and/or Server" in the Project type section. 
<DT><DD>3.  Click <B>Next</B>.
<DT><DD>The wizard moves to a second page.
</DL>
<P><IMG ALIGN=TOP SRC=co18ima2.gif></P>
<P>Figure 2.1   <A NAME=MARKER-10-134></A><A NAME=MARKER-9-135></A>The CORBA project page in the New Project wizard.</P>
<P>The second page, shown in <A HREF="#MARKER-9-135">Figure 2.1</A>, has several options for building CORBA projects. This is where we can specify whether to create a client project, a server project, or both. We can also choose an IDL file to base projects upon, or let the wizard create an empty one that we can edit after the projects themselves have been created.</P>
<P>If you choose a CORBA IDL file on which to base the project, by default the file is copied into the project folder that you choose on the next page (or is left there if it is already in that folder). You can explicitly choose to leave an existing IDL file where it is and the generated projects will refer to it.</P>
<P>For the sake of this example, however, we will let the wizard generate a blank IDL file for us, and then we will write the IDL by hand.</P>
<DL>
<DT><DD>4.  Uncheck the "Use existing IDL file" check box.
<DT><DD>5.  Check the "Client" box and the "Server" box.
</DL>
<P>Next to the "Client" and &Yacute;"Server" check boxes are options for the kind of supporting code we want to generate. Like other IDL compilers, Functional Developer's can create CORBA client <I>stub</I> and server <I>skeleton</I> code from IDL declarations. This stub and skeleton code, which is generated in the form of separate libraries, takes care of the details of communication between CORBA clients and servers. </P>
<P>The IDL compiler (which we call <A NAME=MARKER-2-136></A>Scepter) also generates a <I>protocol</I> library that represents the spirit of the IDL declarations in Dylan, using generic function declarations, class declarations, and so on. </P>
<P>The protocol library is the public interface to the service provided by the servers and used by the clients, and is used by the stub and skeleton code libraries. On the server side, the protocol defines what you must implement by extending the skeleton implementation in the normal way, by adding methods, subclassing, and so on. On the client side, you use the protocol to invoke operations on the CORBA objects you have implemented in the server. </P>
<P>We will see more about protocol, stub, and skeleton libraries in <A HREF="corba_42.htm#MARKER-9-182">Chapter 4, "Writing and Compiling IDL"</A>.</P>
<DL>
<DT><DD>6.  Make sure the "Client using" setting is "protocol and stubs" and the "Server using" setting is "protocol, stubs, and skeletons".
<DT><DD>The wizard will set up the client and server projects so that, when they are built, the IDL compiler will be invoked automatically to read the IDL and create stub, skeleton, and protocol projects. 
<DT><DD>7.  Click <B>Next</B>. 
<DT><DD>The wizard moves to a third page. This page is the wizard's standard page for entering the project name and location. 
</DL>
<P>On this page we enter the name used to create the client and server projects. Because the wizard is going to create two projects, it uses the name we enter as the stem of each project name, and adds a suffix to identify the project as a client (<CODE>-client</CODE>) or server (<CODE>-server</CODE>). </P>
<DL>
<DT><DD>8.  Type <CODE>my-hello-world</CODE> into the "Name" field.
<DT><DD>From this name, the wizard generates projects called My-Hello-World-Client and My-Hello-World-Server.
<DT><DD>9.  Click <B>Advanced...</B> 
<DT><DD>The Advanced Project Settings dialog appears.
<DT><DD>10.  Change the "Windows Subsystem" setting to "Windows Console" and click <B>OK</B>.
<DT><DD>This step is necessary because the application is going to run in console mode, that is, without windowing.
<DT><DD>11.  Click <B>Next</B>. 
<DT><DD>The wizard moves to a fourth page. This page is the wizard's standard page for specifying how you want to choose libraries for your project.
<DT><DD>12.  Select the "Minimal" option. 
</DL>
<P>The choice of "Minimal" makes the Hello World projects use only two libraries: the Functional-Dylan library, which provides the Dylan language and basic extensions, and the Dylan-ORB library, which provides the Functional Developer ORB implementation.</P>
<DL>
<DT><DD>13.  Click <B>Next</B>. 
<DT><DD>The wizard moves to a fifth and final page. This page is the wizard's standard page for entering source file header keywords. 
<DT><DD>14.  Make any header keyword changes you want.
<DT><DD>15.  Click <B>Finish</B>.
</DL>
<P>The client and server projects are now fully defined. After you click <B>Finish</B>, the wizard creates the appropriate project files on disk. Then two project windows appear: one for the client project, My-Hello-World-Client, and one for the server project, My-Hello-World-Server.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corba_19.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_17.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_15.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
