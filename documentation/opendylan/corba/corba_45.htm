<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corba_43.htm">
<LINK REL=PREV HREF="corba_44.htm">
<LINK REL=NEXT HREF="corba_46.htm">
<TITLE>4.1.2   IDL for the checkingAccount interface</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING45></A>

<DIV>
<P><A HREF="corba_46.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_44.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_43.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.1   Writing IDL for a CORBA application </P>

</DIV>
<A NAME=HEADING45-0></A>
<H1>4.1.2   IDL for the checkingAccount interface</H1>
<P>Our application manages a second sort of bank account, called a <I>checking account</I>. While an ordinary <CODE>account</CODE> must maintain a positive balance, a <CODE>checkingAccount</CODE> may be overdrawn up to an agreed limit. We use IDL's notion of interface inheritance to capture the intuition that a checking account is just a special form of <CODE>account</CODE>:</P>
<PRE>
// in module BankingDemo
interface checkingAccount : account {
    readonly attribute long limit;
};
<P></P>
</PRE>
<P>The declaration <CODE>checkingAccount</CODE> <CODE>:</CODE> <CODE>account</CODE> specifies that the interface <CODE>checkingAccount</CODE> inherits all the operations and attributes declared in the <CODE>account</CODE> interface. The body of the definition states that a <CODE>checkingAccount </CODE>also supports the additional <CODE>limit</CODE> attribute.</P>
<P>The fact that <CODE>checkingAccount</CODE> inherits some operations from <CODE>account</CODE> does not imply that the methods <I>implementing</I> those operations need to be inherited too. We will exploit this flexibility to provide a specialized <CODE>debit</CODE> method for <CODE>checkingAccount</CODE>s.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corba_46.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_44.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_43.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
