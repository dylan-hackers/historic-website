<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corba_15.htm">
<LINK REL=PREV HREF="corba_18.htm">
<LINK REL=NEXT HREF="corba_20.htm">
<TITLE>2.4   Defining the interface</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING19></A>

<DIV>
<P><A HREF="corba_20.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_18.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_15.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>2 Quick Start Tutorial</P>

</DIV>
<A NAME=HEADING19-0></A>
<A NAME=UID-getstart-890315></A>
<H1>2.4   <A NAME=MARKER-9-137></A>Defining the interface</H1>
<P>In this section we declare the IDL interface that the Hello World client and server will communicate across. This is the usual first step in developing a CORBA-based application in Dylan. </P>
<P>We declare the interface in a single file that must have the extension <CODE>.idl</CODE>. Recall that when creating the client and server projects, we unchecked the "Use existing IDL file" option on the second wizard page. Instead of letting the client and server projects refer to an existing IDL file, the wizard created a dummy file into which we can write our IDL interface. </P>
<P>Both the client and server projects point to the dummy IDL file via a file called <CODE>my-hello-world.spec</CODE>. Spec files, or Functional Developer Tool Specification files, contain special information for building projects. The file <CODE>my-hello-world.spec</CODE> is part of each project's list of sources, but it is a different file in each project. </P>
<DL>
<DT><DD>1.  Double-click on <CODE>my-hello-world.spec</CODE> in the Sources page of either project window.
<DT><DD>The spec file opens in an editor window. 
</DL>
<P>The client project's spec file looks like this:</P>
<PRE>
  Origin: OMG-IDL
  Idl-File: ..\my-hello-world.idl
  Stubs: yes
<P></P>
</PRE>
<P>The server project's spec file looks like this:</P>
<PRE>
  Origin: OMG-IDL
  Idl-File: ..\my-hello-world.idl
  Skeletons: yes
<P></P>
</PRE>
<P>Both spec files contain an <CODE>Idl-File:</CODE> keyword statement saying that the file <CODE>my-hello-world.idl</CODE>, which is in the parent folder of both My-Hello-World-Client and My-Hello-World-Server, should be compiled along with each project's Dylan sources. We can ignore the other details for the moment.</P>
<DL>
<DT><DD>2.  Choose <B>File &gt; Open...</B> in either project window, and navigate to the project's parent folder containing <CODE>my-hello-world.idl</CODE>. 
<DT><DD>Hint: clicking the General tab in either the client or server project window shows where the project resides on your machine.
<DT><DD>3.  Select <CODE>my-hello-world.idl</CODE> and click <B>Open</B>.
<DT><DD>The dummy IDL file opens in an editor window.
</DL>
<P>The dummy IDL file initially contains only a comment and no IDL declarations. We must write these ourselves. For Hello World, the IDL is simply:</P>
<PRE>
interface world {
  string hello();
};
<P></P>
</PRE>
<P>This IDL declaration says there are CORBA objects of a kind called <CODE>world</CODE>, and that there is an operation called <CODE>hello</CODE> on <CODE>world</CODE> objects that takes no arguments and returns a string. Servers implement <CODE>world</CODE> and clients call <CODE>hello</CODE> on instances of <CODE>world</CODE>.</P>
<DL>
<DT><DD>4.  Enter the IDL declaration above into the <CODE>my-hello-world.idl</CODE> file.
<DT><DD>5.  Save <CODE>my-hello-world.idl</CODE> with <B>File &gt; Save</B>.
</DL>
<P>Now we have written the IDL, we can run the IDL compiler over it to produce stub, skeleton, and protocol code for the client and server parts of the application. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC --><DL>
<DL>
<DT><A REL=BELOW HREF="corba_20.htm#HEADING20-0"><B>2.4.1  </B> - Generating stub, skeleton, protocol code from IDL</A>
<DD>
<DT><A REL=BELOW HREF="corba_21.htm#HEADING21-0"><B>2.4.2  </B> - A browsing detour </A>
<DD>
</DL>
</DL>


</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corba_20.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_18.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_15.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
