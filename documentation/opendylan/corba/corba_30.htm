<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corba_27.htm">
<LINK REL=PREV HREF="corba_29.htm">
<LINK REL=NEXT HREF="corba_31.htm">
<TITLE>2.6.3   ORB and object initialization </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING30></A>

<DIV>
<P><A HREF="corba_31.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_29.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_27.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>2.6   Implementing the server</P>

</DIV>
<A NAME=HEADING30-0></A>
<H1>2.6.3   ORB and object initialization </H1>
<P>The other part of <A NAME=MARKER-2-148></A>writing the server is to perform the initializations necessary for the server to ready itself for CORBA-based interactions with a client. </P>
<P>Some of this coding is similar to what we did on the client side. The first thing we do is initialize, and get a reference to, the Functional Developer ORB. This step is exactly the same as on the client side:</P>
<PRE>
let orb = corba/orb-init(make(corba/&lt;arg-list&gt;), 
                              &quot;Functional Developer ORB&quot;)
<P></P>
</PRE>
<P>Next, we can make an instance of the object (servant) class:</P>
<PRE>
let impl = make(&lt;world-implementation&gt;);
<P></P>
</PRE>
<P>To make this object instance accessible to clients using CORBA, it has to be visible in the CORBA world, not just in the Dylan server application that instantiated it. To do this we use an <I>object adapter</I> -- part of an ORB that deals with activating CORBA objects and connecting them to the outside world. </P>
<P>The Functional Developer ORB supports CORBA's <I>portable object adapter</I> (POA) standard. To start the business of activating our <CODE>world</CODE> object, we get a reference to the POA:</P>
<PRE>
let poa = corba/orb/resolve-initial-references(orb, &quot;RootPOA&quot;);
<P></P>
</PRE>
<P>This is another call to a standard CORBA operation. The operation <CODE>resolve_initial_references</CODE> takes an ORB reference and a list of string names for CORBA services, and returns object references for them. </P>
<P>The name used in the call above is the Dylan translation of the pseudo-IDL name <CODE>CORBA::ORB::resolve_initial_references</CODE>. The call resolves the name <CODE>&quot;RootPOA&quot;</CODE>, which is the standard name for the basic POA service, into an object reference.</P>
<P>The next step is to get the POA to create a reference for our <CODE>world</CODE> object instance that can be given to a client. There are several ways to get object references from a POA; this is one of them:</P>
<PRE>
let world = portableserver/poa/servant-to-reference(poa, impl);
<P></P>
</PRE>
<P>Next, we want to publish the reference where the client can find it. Recall that the client looks for the reference in <CODE>c:\temp\hello.ior</CODE>, expecting to find a string there to translate back into a reference with the ORB utility <CODE>corba/orb/file-to-object<A NAME=MARKER-2-149></A></CODE>. The ORB also offers the opposite operation, available in Dylan as <CODE>corba/orb/object-to-file<A NAME=MARKER-2-150></A></CODE>, Thus the next piece of code is:</P>
<PRE>
corba/orb/object-to-file(orb, &quot;c:\\temp\\hello.ior&quot;, world);
<P></P>
</PRE>
<P>The <CODE>corba/orb/object-to-file</CODE> method could have been defined using the standard ORB operation <CODE>corba/orb/object-to-string</CODE> as follows, but <CODE>corba/orb/object-to-file</CODE> is provided by the Dylan ORB as a convenience.</P>
<PRE>
define method corba/orb/object-to-file (orb :: corba/&lt;orb&gt;,
                                        file :: &lt;string&gt;,
                                        object :: corba/&lt;object&gt;)
  with-open-file(stream = file, direction: #&quot;output&quot;)
    write(stream, corba/orb/object-to-string(orb, object));
  end;
end method;
<P></P>
</PRE>
<P>Next, we have to allow the POA manager managing this POA to start processing requests. (A POA manager is an object that allows us to control the operation of a POA.) We use these standard POA calls:</P>
<PRE>
let manager = portableserver/poa/the-poamanager(poa);
portableserver/poamanager/activate(manager);
<P></P>
</PRE>
<P>Finally, on the servant <A NAME=MARKER-2-151></A>side we need to set the ORB <A NAME=MARKER-2-152></A>running to receive client requests:</P>
<PRE>
corba/orb/run(orb);
<P></P>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corba_31.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_29.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_27.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
