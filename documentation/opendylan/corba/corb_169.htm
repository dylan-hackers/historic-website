<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corb_165.htm">
<LINK REL=PREV HREF="corb_168.htm">
<LINK REL=NEXT HREF="corb_170.htm">
<TITLE>A.4.10.4   Mapping for discriminated union type</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING169></A>

<DIV>
<P><A HREF="corb_170.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corb_168.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corb_165.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>A.4.10   Mapping for constructed types</P>

</DIV>
<A NAME=HEADING169-0></A>
<H1>A.4.10.4   Mapping for discriminated union type</H1>
<P><B>Background</B></P>
<P>IDL defines a <CODE>union</CODE> type that allows data of heterogeneous types used interchangeably in places like parameters, results, arrays, and sequences. An explicit tag called a discriminator is used to determine the type of the data in a given object that is of the union type.</P>
<P>Dylan is a dynamic language with runtime type information and has no explicit tagging mechanism. </P>
<P><B>Specification</B></P>
<P>An IDL union type shall be mapped to a sealed, concrete, Dylan subclass of <CODE>CORBA/&lt;union&gt;</CODE> with pairs of sealed getter and setter functions and an initialization keyword for each union branch. Every mapped union shall also have the following sealed getter and setter functions:</P>
<PRE>
corba/union/discriminator 
corba/union/discriminator-setter 
corba/union/value 
corba/union/value-setter 
<P></P>
</PRE>
<P>and the following initialization keywords:</P>
<PRE>
discriminator:
value:
<P></P>
</PRE>
<P>It is an error to call these functions on instances of types other than those mapped from the IDL union definition. Furthermore the Dylan protocol functions <CODE>make</CODE> and <CODE>initialize</CODE> shall be sealed over the domain of the mapped class.</P>
<P>The initialization keywords shall be mapped as for structs. However, they are not required in the same manner. Instead, either the caller shall supply the <CODE>discriminator:</CODE> and the <CODE>value:</CODE> or an initialization keyword mapped from one of the branches.</P>
<P>In addition, wherever a union is required (for example, in the parameter of an operation) the Dylan programmer shall be able to give any Dylan object that is an instance of one of the types of the branches of the union. </P>
<P>Explicit coercion to and from a union shall also be available as sealed methods on the Dylan <CODE>as</CODE> generic function. It is undefined which discriminator is used in ambiguous cases.</P>
<P><B>Rationale</B></P>
<P>Although it is unnatural for a Dylan programmer to have to manipulate explicit union discriminators, there are ambiguous cases that require this explicit treatment. By reifying the union the Dylan programmer is given as much direct control as a static language provides, and yet can also use the implicit coercion and value getter to ignore the details if so desired.</P>
<P>It is not necessary to state whether the getter and setter functions are implemented by slots.</P>
<P>The superclass <CODE>CORBA/&lt;union&gt;</CODE> is made explicit to allow <CODE>instance?</CODE> tests.</P>
<P><B>Examples</B></P>
<PRE>
// IDL
union RLE_entity switch (short) {
  case 1: long length;
  case 2: char character;
};
<P></P>
// Dylan (sample)
define class &lt;RLE-entity&gt; (CORBA/&lt;union&gt;)
end class;
<P></P>
define sealed domain make (singleton(&lt;RLE-entity&gt;));
define sealed domain initialize (&lt;RLE-entity&gt;);
<P></P>
define sealed method as
    (class == &lt;RLE-entity&gt;, length :: CORBA/&lt;long&gt;)
    =&gt; (object :: &lt;RLE-entity&gt;)
  make(&lt;RLE-entity&gt;, length: length);
end method;
<P></P>
define sealed method as
    (class == CORBA/&lt;long&gt;, object :: &lt;RLE-entity&gt;)
    =&gt; (length :: CORBA/&lt;long&gt;)
  RLE-entity/length(object);
end method;
<P></P>
define method RLE-entity/length (union :: &lt;RLE-entity&gt;)
    =&gt; (length :: CORBA/&lt;long&gt;)
  select (corba/union/discriminator(union))
    1 =&gt; corba/union/value(union);
    otherwise =&gt; error(...);
  end select;
end method;
<P></P>
define method RLE-entity/length-setter
    (length :: CORBA/&lt;long&gt;, union :: &lt;RLE-entity&gt;)
    =&gt; (length :: CORBA/&lt;long&gt;)
  corba/union/value(union) := length;
  corba/union/discriminator(union) := 1;
end method;
<P></P>
...
<P></P>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corb_170.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corb_168.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corb_165.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
