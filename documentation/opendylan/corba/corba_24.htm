<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="corba_1.htm">
<LINK REL=UP HREF="corba_22.htm">
<LINK REL=PREV HREF="corba_23.htm">
<LINK REL=NEXT HREF="corba_25.htm">
<TITLE>2.5.2   Obtaining an object reference</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING24></A>

<DIV>
<P><A HREF="corba_25.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_23.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_22.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>2.5   Implementing the client</P>

</DIV>
<A NAME=HEADING24-0></A>
<H1>2.5.2   Obtaining an <A NAME=MARKER-2-141></A>object reference</H1>
<P>The next thing our client needs to do is to get a reference to a CORBA object implementing Hello World. Recall from <A HREF="corba_19.htm#MARKER-9-137">"Defining the interface" on page 10</A> that our IDL defined CORBA objects of a kind called <CODE>world</CODE>:</P>
<PRE>
interface world {
  string hello();
}
<P></P>
</PRE>
<P>The client needs a reference to a <CODE>world</CODE> object. An object reference is just CORBA's way of allowing CORBA objects to be identified and communicated with. Once our client has a reference to a <CODE>world</CODE> object it can call the <CODE>hello</CODE> operation and get the string it needs to print out. </P>
<P>There is more to say about <A NAME=MARKER-2-142></A>object references and how they are obtained. For now, all we need to know is one way that clients can obtain object references is by reading them from files, where servers have placed them in a string form -- a so-called <I>stringified object reference</I>. The client can get the string and convert it into a Dylan object that represents object references. To do this, it uses a .Dylan ORB utility called <CODE>corba/orb/file-to-object</CODE>. </P>
<P>Thus, given a shared file <CODE>hello.ior</CODE>, located as follows:</P>
<PRE>
c:\temp\hello.ior
<P></P>
</PRE>
<P>Our client can get a reference as follows:</P>
<PRE>
  let world = as(&lt;world&gt;, 
                 corba/orb/file-to-object(orb,                                           &quot;c:\\temp\\hello.ior&quot;)
<P></P>
</PRE>
<P>The corba<CODE>/orb/file-to-object</CODE> method could have been implemented as follows using the standard ORB utility <CODE>corba/orb/string-to-object</CODE>, but <CODE>corba/orb/file-to-object</CODE> is provided as a convenience.</P>
<PRE>
define method corba/orb/file-to-object (orb :: corba/&lt;orb&gt;,
                                        file :: &lt;string&gt;)
    =&gt; (object)
  with-open-file(stream = file, direction: #&quot;input&quot;)
    corba/orb/string-to-object(orb, as(&lt;string&gt;,
                                    stream-contents(stream)));
  end;
end method;
<P></P>
</PRE>
<P>The <CODE>let</CODE> <CODE>world</CODE> ... expression takes the name of the shared file, and passes it (and the ORB value we obtained earlier) to the helper method <CODE>file-to-object</CODE>. The <CODE>file-to-object</CODE> method calls <CODE>corba/orb/string-to-object</CODE> to obtain the reference and make a Dylan object representing it. Then the returned Dylan object is coerced into an instance of the class <CODE>&lt;world&gt;</CODE>. That class is one of the protocol library classes generated from the IDL, and was intended to represent <CODE>world</CODE> objects in Dylan. (In fact the object is coerced to be an instance of an internal concrete subclass of <CODE>&lt;world&gt;</CODE> -- <CODE>&lt;world&gt;</CODE> is just the public protocol class.) </P>
<P>The extra backslashes in the file <A NAME=MARKER-2-143></A>name string serve as escape characters. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Developing Component Software with CORBA - 26 May 1999</ADDRESS>
<P><A HREF="corba_25.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="corba_23.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="corba_22.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="corba_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="corba_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="corb_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
