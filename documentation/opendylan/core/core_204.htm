<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="core_1.htm">
<LINK REL=UP HREF="core_192.htm">
<LINK REL=PREV HREF="core_203.htm">
<LINK REL=NEXT HREF="core_205.htm">
<TITLE>5.2.6   Arithmetic operations</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING204></A>

<DIV>
<P><A HREF="core_205.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_203.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_192.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5.2   Extensions to the Dylan library</P>

</DIV>
<A NAME=HEADING204-0></A>
<H1>5.2.6   <A NAME=MARKER-2-969></A><A NAME=MARKER-2-970></A><A NAME=MARKER-9-971></A>Arithmetic operations</H1>
<P><A NAME=MARKER-10-972></A>The following arithmetic operations are available in the Dylan library:</P>
<STRONG><A NAME=MARKER-2-973></A><A NAME=MARKER-2-974></A>+ </STRONG>
<P><I>Open generic function</I></P>
<PRE>
+ <I>object1</I> <I>object2</I> =&gt; #rest <I>object</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-975></A><A NAME=MARKER-2-976></A>+ </STRONG>
<P><I>Sealed domain</I></P>
<PRE>
+ <I>complex1</I> <I>complex</I>2 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-977></A><A NAME=MARKER-2-978></A>+ </STRONG>
<P><I>G.f. method</I></P>
<PRE>
+ <I>integer1</I> <I>integer</I>2 =&gt; <I>integer</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-979></A><A NAME=MARKER-2-980></A>+ </STRONG>
<P><I>G.f. method</I></P>
<PRE>
+ <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>machine-number</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Returns the sum of the two supplied arguments. The actual type of the value is determined by the contagion rules when applied to the arguments. 
</DL>
<STRONG><A NAME=MARKER-2-981></A><A NAME=MARKER-2-982></A>- </STRONG>
<P><I>Open generic function</I></P>
<PRE>
- <I>object1</I> <I>object2</I> =&gt; #rest <I>object</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-983></A><A NAME=MARKER-2-984></A>- </STRONG>
<P><I>Sealed domain</I></P>
<PRE>
- <I>complex1</I> <I>complex2</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-985></A><A NAME=MARKER-2-986></A>- </STRONG>
<P><I>G.f. method</I></P>
<PRE>
- <I>integer1 integer2</I> =&gt; <I>integer</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-987></A><A NAME=MARKER-2-988></A>- </STRONG>
<P><I>G.f. method</I></P>
<PRE>
- <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>machine-number</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Returns the result of subtracting the second argument from the first. The actual type of the value is determined by the contagion rules when applied to the arguments. 
</DL>
<STRONG><A NAME=MARKER-2-989></A><A NAME=MARKER-2-990></A>* </STRONG>
<P><I>Open generic function</I></P>
<PRE>
* <I>object1</I> <I>object2</I> =&gt; #rest <I>object</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-991></A><A NAME=MARKER-2-992></A>* </STRONG>
<P><I>Sealed domain</I></P>
<PRE>
* <I>complex1</I> <I>complex2</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-993></A><A NAME=MARKER-2-994></A>* </STRONG>
<P><I>G.f. method</I></P>
<PRE>
* <I>integer1</I> <I>integer</I>2 =&gt; <I>integer</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-995></A><A NAME=MARKER-2-996></A>* </STRONG>
<P><I>G.f. method</I></P>
<PRE>
* <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>machine-number</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Returns the result of multiplying the two arguments. The actual type of the value is determined by the contagion rules when applied to the arguments. 
</DL>
<STRONG><A NAME=MARKER-2-997></A><A NAME=MARKER-2-998></A>/</STRONG>
<P><I>Open generic function</I></P>
<PRE>
/ <I>object1</I> <I>object2</I> =&gt; #rest <I>object</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-999></A><A NAME=MARKER-2-1000></A>/ </STRONG>
<P><I>Sealed domain</I></P>
<PRE>
/ <I>complex1</I> <I>complex2</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1001></A><A NAME=MARKER-2-1002></A>/ </STRONG>
<P><I>G.f. method</I></P>
<PRE>
/ <I>float1</I> <I>float</I>2 =&gt; <I>float</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Returns the result of dividing the first argument by the second. The actual type of the value is determined by the contagion rules when applied to the arguments. 
</DL>
<STRONG><A NAME=MARKER-2-1003></A><A NAME=MARKER-2-1004></A>negative </STRONG>
<P><I>Open generic function</I></P>
<PRE>
negative <I>object</I> =&gt; #rest <I>negative-object</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1005></A><A NAME=MARKER-2-1006></A>negative </STRONG>
<P><I>Sealed domain</I></P>
<PRE>
negative <I>complex</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1007></A><A NAME=MARKER-2-1008></A>negative </STRONG>
<P><I>G.f. method</I></P>
<PRE>
negative <I>integer</I> =&gt; <I>negative-integer</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1009></A><A NAME=MARKER-2-1010></A>negative </STRONG>
<P><I>G.f. method</I></P>
<PRE>
negative <I>float</I> =&gt; <I>negative-float</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Negates the supplied argument. The returned value is of the same float format as the supplied argument. 
</DL>
<STRONG><A NAME=MARKER-2-1011></A><A NAME=MARKER-2-1012></A>floor </STRONG>
<P><I>Function</I></P>
<PRE>
floor <I>machine-number</I> =&gt; <I>integer</I> <I>machine-number</I> 
floor <I>integer</I> =&gt; <I>integer</I> <I>integer</I>
floor <I>float</I> =&gt; <I>integer</I> <I>float</I>
<P></P>
</PRE>
<DL>
<DT><DD>Truncates a number toward negative infinity. The integer part is returned as <I>integer</I>, the remainder is of the same float format as the argument. 
</DL>
<STRONG><A NAME=MARKER-2-1013></A><A NAME=MARKER-2-1014></A>ceiling </STRONG>
<P><I>Function</I></P>
<PRE>
ceiling <I>machine-number</I> =&gt; <I>integer</I> <I>machine-number</I> 
ceiling <I>integer</I> =&gt; <I>integer</I> <I>integer</I>
ceiling <I>float</I> =&gt; <I>integer</I> <I>float</I>
<P></P>
</PRE>
<DL>
<DT><DD>Truncates a number toward positive infinity. The integer part is returned as <I>integer</I>, the remainder is of the same float format as the argument. 
</DL>
<STRONG><A NAME=MARKER-2-1015></A><A NAME=MARKER-2-1016></A>round </STRONG>
<P><I>Function</I></P>
<PRE>
round <I>machine-number</I> =&gt; <I>integer</I> <I>machine-number</I> 
round <I>integer</I> =&gt; <I>integer</I> <I>integer</I>
round <I>float</I> =&gt; <I>integer</I> <I>float</I>
<P></P>
</PRE>
<DL>
<DT><DD>Rounds a number toward the nearest mathematical integer. The integer part is returned as <I>integer</I>, the remainder is of the same float format as the argument. If the argument is exactly between two integers, then the result <I>integer</I> will be a multiple of two.
</DL>
<STRONG><A NAME=MARKER-2-1017></A><A NAME=MARKER-2-1018></A>truncate</STRONG>
<P><I>Function</I></P>
<PRE>
truncate <I>machine-number</I> =&gt; <I>integer</I> <I>machine-number</I>
truncate <I>integer</I> =&gt; <I>integer</I> <I>integer</I>
truncate <I>float</I> =&gt; <I>integer</I> <I>float</I>
<P></P>
</PRE>
<DL>
<DT><DD>Truncates a number toward zero. The integer part is returned as <I>integer</I>, the remainder is of the same float format as the argument. 
</DL>
<STRONG><A NAME=MARKER-2-1019></A><A NAME=MARKER-2-1020></A>floor/ </STRONG>
<P><I>Function</I></P>
<PRE>
floor/ <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>integer</I> <I>machine-number</I>
floor/ <I>integer1</I> <I>integer2</I> =&gt; <I>integer</I> <I>integer</I>
floor/ <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>integer</I> <I>machine-number</I>
<P></P>
</PRE>
<DL>
<DT><DD>Divides the first argument into the second and truncates the result toward negative infinity. The integer part is returned as <I>integer</I>, the type of the remainder is determined by the contagion rules when applied to the arguments. 
</DL>
<STRONG><A NAME=MARKER-2-1021></A><A NAME=MARKER-2-1022></A>ceiling/</STRONG>
<P><I>Function</I></P>
<PRE>
ceiling/ <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>integer</I> <I>machine-number</I>
ceiling/ <I>integer1</I> <I>integer2</I> =&gt; <I>integer</I> <I>integer</I>
ceiling/ <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>integer</I> <I>machine-number</I>
<P></P>
</PRE>
<DL>
<DT><DD>Divides the first argument into the second and truncates the result toward positive infinity. The integer part is returned as <I>integer</I>, the type of the remainder is determined by the contagion rules when applied to the arguments. 
</DL>
<STRONG><A NAME=MARKER-2-1023></A><A NAME=MARKER-2-1024></A>round/ </STRONG>
<P><I>Function</I></P>
<PRE>
round/ <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>integer</I> <I>machine-number</I>
round/ <I>integer1</I> <I>integer2</I> =&gt; <I>integer</I> <I>integer</I>
round/ <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>integer</I> <I>machine-number</I>
<P></P>
</PRE>
<DL>
<DT><DD>Divides the first argument into the second and rounds the result toward the nearest mathematical integer. The integer part is returned as <I>integer</I>, the type of the remainder is determined by the contagion rules when applied to the arguments. 
</DL>
<STRONG><A NAME=MARKER-2-1025></A><A NAME=MARKER-2-1026></A>truncate/</STRONG>
<P><I>Function</I></P>
<PRE>
truncate/ <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>integer</I> <I>machine-number</I>
truncate/ <I>integer1</I> <I>integer</I>2 =&gt; <I>integer</I> <I>integer</I>
truncate/ <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>integer</I> <I>machine-number</I>
<P></P>
</PRE>
<DL>
<DT><DD>Divides the first argument into the second and truncates the result toward zero. The integer part is returned as <I>integer</I>, the type of the remainder is determined by the contagion rules when applied to the arguments. 
</DL>
<STRONG><A NAME=MARKER-2-1027></A><A NAME=MARKER-2-1028></A>modulo</STRONG>
<P><I>Function</I></P>
<PRE>
modulo <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>machine-number</I>
modulo <I>integer1</I> <I>integer2</I> =&gt; <I>integer</I>
modulo <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>machine-number</I>
</PRE>
<DL>
<DT><DD>Returns the second value of <CODE>floor/ (<I>arg1, arg2)</I></CODE>. The actual type of the second value is determined by the contagion rules when applied to the arguments. 
</DL>
<STRONG><A NAME=MARKER-2-1029></A><A NAME=MARKER-2-1030></A>remainder </STRONG>
<P><I>Function</I></P>
<PRE>
remainder <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>machine-number</I>
remainder <I>integer1</I> <I>integer2</I> =&gt; <I>integer</I> 
remainder <I>machine-number1</I> <I>machine-number2</I> =&gt; <I>machine-number</I>
</PRE>
<DL>
<DT><DD>Returns the second value of <CODE>truncate/ (<I>arg1, arg2)</I></CODE>.The actual type of the second value is determined by the contagion rules when applied to the arguments. 
</DL>
<STRONG><A NAME=MARKER-2-1031></A><A NAME=MARKER-2-1032></A>^ </STRONG>
<P><I>Open generic function</I></P>
<PRE>
^ <I>object1</I> <I>object2</I> =&gt; #rest <I>object</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1033></A><A NAME=MARKER-2-1034></A>^ </STRONG>
<P><I>Sealed domain</I></P>
<PRE>
^ <I>complex1</I> <I>complex</I>2 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1035></A><A NAME=MARKER-2-1036></A>^ </STRONG>
<P><I>G.f. method</I></P>
<PRE>
^ <I>integer1</I> <I>integer2</I> =&gt; <I>integer</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1037></A><A NAME=MARKER-2-1038></A>^ </STRONG>
<P><I>G.f. method</I></P>
<PRE>
^ <I>float1</I> <I>integer2</I> =&gt; <I>float</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Returns the first argument raised to the power of the second argument. The value is of the same float format as the first argument. An error is signalled if both arguments are 0.
</DL>
<STRONG><A NAME=MARKER-2-1039></A><A NAME=MARKER-2-1040></A>abs </STRONG>
<P><I>Open generic function</I></P>
<PRE>
abs <I>object</I> =&gt; #rest <I>object</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1041></A><A NAME=MARKER-2-1042></A>abs </STRONG>
<P><I>Sealed domain</I></P>
<PRE>
abs <I>complex</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1043></A><A NAME=MARKER-2-1044></A>abs </STRONG>
<P><I>G.f. method</I></P>
<PRE>
abs <I>integer</I> =&gt; <I>integer</I> 
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1045></A><A NAME=MARKER-2-1046></A>abs </STRONG>
<P><I>G.f. method</I></P>
<PRE>
abs <I>float</I> =&gt; <I>float</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Returns the absolute value of the argument. The value is of the same float format as the argument. 
</DL>
<STRONG><A NAME=MARKER-2-1047></A><A NAME=MARKER-2-1048></A><A NAME=MARKER-10-1049></A>logior </STRONG>
<P><I>Function</I></P>
<PRE>
logior #rest <I>integers</I> =&gt; <I>integer</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Returns the bitwise inclusive <CODE>OR</CODE> of its integer arguments.
</DL>
<STRONG><A NAME=MARKER-2-1050></A><A NAME=MARKER-2-1051></A>logxor</STRONG>
<P><I>Function</I></P>
<PRE>
logxor #rest <I>integers</I> =&gt; <I>integer</I>
<P></P>
</PRE>
<DL>
<DT><DD>Returns the bitwise exclusive <CODE>OR</CODE> of its integer arguments.
</DL>
<STRONG><A NAME=MARKER-2-1052></A><A NAME=MARKER-2-1053></A>logand </STRONG>
<P><I>Function </I></P>
<PRE>
logand #rest <I>integers</I> =&gt; <I>integer</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Returns the bitwise <CODE>AND</CODE> of its integer arguments.
</DL>
<STRONG><A NAME=MARKER-2-1054></A><A NAME=MARKER-2-1055></A>lognot </STRONG>
<P><I>Function </I></P>
<PRE>
lognot <I>integer1</I> =&gt; <I>integer2</I>
<P></P>
</PRE>
<DL>
<DT><DD>Returns the bitwise <CODE>NOT</CODE> of its integer arguments.
</DL>
<STRONG><A NAME=MARKER-2-1056></A><A NAME=MARKER-2-1057></A>logbit?</STRONG>
<P><I>Function </I></P>
<PRE>
logbit? <I>index</I> <I>integer</I> =&gt; <I>boolean</I>
<P></P>
</PRE>
<DL>
<DT><DD>Tests the value of a particular bit in its integer argument. The <I>index</I> argument is an instance of <CODE>&lt;integer&gt;</CODE>.
</DL>
<STRONG><A NAME=MARKER-2-1058></A><A NAME=MARKER-2-1059></A>ash </STRONG>
<P><I>Function </I></P>
<PRE>
ash <I>integer1</I> <I>count</I> =&gt; <I>integer</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Performs an arithmetic shift on its first argument.
</DL>
<STRONG><A NAME=MARKER-2-1060></A><A NAME=MARKER-2-1061></A>lcm</STRONG>
<P><I>Function</I></P>
<PRE>
lcm <I>integer1</I> <I>integer2</I> =&gt; <I>integer</I>
<P></P>
</PRE>
<DL>
<DT><DD>Returns the least common multiple of its two arguments.
</DL>
<STRONG><A NAME=MARKER-2-1062></A><A NAME=MARKER-2-1063></A>gcd </STRONG>
<P><I>Function</I></P>
<PRE>
gcd <I>integer1</I> <I>integer2</I> =&gt; <I>integer</I>
<P></P>
</PRE>
<DL>
<DT><DD>Returns the greatest common divisor of its two arguments.
</DL>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Common Dylan and Functional Extensions - 31 Mar 00</ADDRESS>
<P><A HREF="core_205.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_203.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_192.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
