<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="core_1.htm">
<LINK REL=UP HREF="core_114.htm">
<LINK REL=PREV HREF="core_118.htm">
<LINK REL=NEXT HREF="core_120.htm">
<TITLE>4.2.5   The dynamic environment</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING119></A>

<DIV>
<P><A HREF="core_120.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_118.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_114.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.2   Multi-thread semantics</P>

</DIV>
<A NAME=HEADING119-0></A>
<H1>4.2.5   <A NAME=MARKER-2-701></A><A NAME=MARKER-2-702></A><A NAME=MARKER-9-703></A>The dynamic environment</H1>
<P>Dylan has an implicit notion of a <I>dynamic environment</I>, corresponding to language constructs with <I>dynamic extent</I>. For example, the <CODE>block</CODE> construct can introduce <I>cleanup-clauses</I>, and the <I>body</I> of the block is executed in a dynamic environment in which those cleanup-clauses are active. <I>Handlers</I> and <I>exit procedures </I>are other examples of language features related to the dynamic environment. </P>
<P>The dynamic environment is defined to be thread-local. When a new thread is created, it starts with a fresh dynamic environment. It is an error to attempt to use a handler or a non-local exit function belonging to another thread. It is impossible to use an unwind-protect cleanup from another thread.</P>
<P>Although the binding of condition handlers only affects the dynamic environment of the current thread, unhandled conditions are passed to the global generic function <CODE>default-handler</CODE>. This function might <I>call the debugger</I>. The Threads library does not define what calling the debugger means.</P>
<P>Note that in Dylan, unlike in C and C++, <I>lexical</I> variables (that is local, or <CODE>let</CODE>-bound variables) have indefinite extent -- that is, have a lifetime independent of the function or block in which they were created -- and are not bound in the dynamic environment. Because those variables are in general potentially global, you may need to explicitly synchronize accesses to them. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Common Dylan and Functional Extensions - 31 Mar 00</ADDRESS>
<P><A HREF="core_120.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_118.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_114.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
