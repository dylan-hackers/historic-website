<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="core_1.htm">
<LINK REL=UP HREF="core_225.htm">
<LINK REL=PREV HREF="core_226.htm">
<LINK REL=NEXT HREF="core_228.htm">
<TITLE>6.2   Useful functions from the Dylan module</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING227></A>

<DIV>
<P><A HREF="core_228.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_226.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_225.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>6 The Machine Words Module</P>

</DIV>
<A NAME=HEADING227-0></A>
<A NAME=UID-mwords-890100></A>
<H1>6.2   <A NAME=MARKER-9-1136></A>Useful functions from the Dylan module</H1>
<P>This section describes additional methods defined in the Dylan module that pertain to <CODE>&lt;machine-word&gt;</CODE>. Note that this section only describes extensions to the Dylan library; for complete descriptions, you should also refer to the <I>Dylan Reference Manual</I>.</P>
<P>Note that the Common Dylan library also has these extensions because it uses the Dylan library.</P>
<STRONG><A NAME=MARKER-2-1137></A>odd? </STRONG>
<P><I>Sealed Method</I></P>
<PRE>
odd? (m :: <I>machine-word</I>) =&gt; _ :: <I>boolean</I>
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1138></A>even? </STRONG>
<P><I>Sealed Method</I></P>
<PRE>
even? (m :: <I>machine-word</I>) =&gt; _ :: <I>boolean</I>
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1139></A>zero? </STRONG>
<P><I>Sealed Method</I></P>
<PRE>
zero? (m :: <I>machine-word</I>) =&gt; _ :: <I>boolean</I>
<P></P>
</PRE>
<DL>
<DT><DD>Cannot be used as the name of a result. It is not a valid Dylan name.
</DL>
<STRONG><A NAME=MARKER-2-1140></A>positive? </STRONG>
<P><I>Sealed Method</I></P>
<PRE>
positive? (m :: <I>machine-word</I>) =&gt; _ :: <I>boolean</I>
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1141></A>negative? </STRONG>
<P><I>Sealed Method</I></P>
<PRE>
negative? (m :: <I>machine-word</I>) =&gt; _ :: <I>boolean</I>
<P></P>
</PRE>
<P>These functions return a result based on interpreting <CODE>m</CODE> as a signed integer value. </P>
<STRONG><A NAME=MARKER-2-1142></A>= </STRONG>
<P><I>Sealed Method</I></P>
<PRE>
= (m1 :: <I>machine-word</I>, m2 :: <I>machine-word</I>) =&gt; _ :: <I>boolean</I>
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1143></A>= </STRONG>
<P><I>Sealed Method</I></P>
<PRE>
= (i1 :: <I>abstract-integer</I>, m2 :: <I>machine-word</I>) =&gt; _ :: <I>boolean</I>
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1144></A>= </STRONG>
<P><I>Sealed Method</I></P>
<PRE>
= (m1 :: <I>machine-word</I>, i2 :: <I>abstract-integer</I>) =&gt; _ :: <I>boolean</I>
<P></P>
</PRE>
<P>The comparison is performed with the <I>machine-word</I> arguments interpreted as signed integer values.</P>
<STRONG><A NAME=MARKER-2-1145></A>&lt; </STRONG>
<P><I>Sealed Method</I></P>
<PRE>
&lt; (m1 :: <I>machine-word</I>, m2 :: <I>machine-word</I>) =&gt; _ :: <I>boolean</I>
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1146></A>&lt; </STRONG>
<P><I>Sealed Method</I></P>
<PRE>
&lt; (i1 :: <I>abstract-integer</I>, m2 :: <I>machine-word</I>) =&gt; _ :: <I>boolean</I>
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1147></A>&lt; </STRONG>
<P><I>Sealed Method</I></P>
<PRE>
&lt; (m1 :: <I>machine-word</I>, i2 :: <I>abstract-integer</I>) =&gt; _ :: <I>boolean</I>
<P></P>
</PRE>
<P>The comparison is performed with the <I>machine-word</I> arguments interpreted as signed integer values.</P>
<STRONG><A NAME=MARKER-2-1148></A>as </STRONG>
<P><I>Sealed Method</I></P>
<PRE>
as(t == &lt;<I>integer</I>&gt;, m :: <I>machine-word</I>) =&gt; _ :: <I>integer</I>
<P></P>
</PRE>
<DL>
<DT><DD>The result is an <I>integer</I> with the same value as <CODE>m</CODE> when interpreted as a signed integer value. An error is signaled if the value of <CODE>m</CODE> cannot be represented as an instance of <I>integer</I>.
</DL>
<STRONG><A NAME=MARKER-2-1149></A>as </STRONG>
<P><I>Sealed Method</I></P>
<PRE>
as(t == &lt;<I>abstract-integer</I>&gt;, m :: <I>machine-word</I>) =&gt; _ :: <I>abstract-integer</I>
<P></P>
</PRE>
<DL>
<DT><DD>The result is an <I>abstract-integer</I> with the same value as <CODE>m</CODE> when interpreted as a signed integer value.
<DT><DD>(The uses for an instance of <I>abstract-integer</I> that is not also an instance of <I>integer</I> are rather limited without the Generic-Arithmetic library.)
</DL>
<STRONG><A NAME=MARKER-2-1150></A>as</STRONG>
<P><I>Sealed Method</I></P>
<PRE>
as(t == &lt;<I>machine-word</I>&gt;, i :: <I>abstract-integer</I>) =&gt; _ :: <I>machine-word</I>
<P></P>
</PRE>
<DL>
<DT><DD>If the value of <CODE>i</CODE> is outside the machine word range, then the result consists of the low <CODE>$machine-word-size</CODE> bits of the twos-complement representation of <CODE>i</CODE>. If any of the discarded bits differ from the sign of <CODE>i</CODE>, then an error is signaled.
</DL>
<STRONG><A NAME=MARKER-2-1151></A>limited</STRONG>
<P><I>Sealed Method</I></P>
<PRE>
limited(t == &lt;<I>machine-word&gt;</I>,
  <I>#key</I> <I>signed?</I> :: <I>boolean</I>,
       min :: <I>machine-word</I>, max :: <I>machine-word</I>) 
=&gt; _ :: <I>type</I>
<P></P>
</PRE>
<P>If the <I>signed?</I> argument is true (the default) then the <I>min</I> and <I>max</I> arguments are interpreted as signed values. When <I>signed?</I> is false, the <I>min</I> and <I>max</I> arguments are interpreted as unsigned values. The default value for each of min and max depends on the value of <I>signed?</I>. The defaults are taken from the corresponding minimum and maximum machine word values (see <A HREF="core_230.htm#MARKER-9-1154"><CODE>$maximum-signed-machine-word</CODE></A> and related constants below).</P>
<P>For convenience, the values of <I>min</I> and/or <I>max</I> may also be instances of <CODE>&lt;abstract-integer&gt;</CODE>, in which case they are coerced to instances of <CODE>&lt;machine-word&gt;</CODE> as if by using <CODE>as</CODE>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Common Dylan and Functional Extensions - 31 Mar 00</ADDRESS>
<P><A HREF="core_228.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_226.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_225.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
