<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="core_1.htm">
<LINK REL=UP HREF="core_145.htm">
<LINK REL=PREV HREF="core_145.htm">
<LINK REL=NEXT HREF="core_147.htm">
<TITLE> &lt;semaphore&gt;</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING146></A>

<DIV>
<P><A HREF="core_147.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_145.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_145.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.6.3   Semaphores</P>

</DIV>
<A NAME=HEADING146-0></A>
<H1> <A NAME=MARKER-2-775></A><A NAME=MARKER-2-776></A><A NAME=MARKER-9-777></A>&lt;semaphore&gt;</H1>
<P><I>Open instantiable primary class</I></P>
<H3>Summary</H3>
<P> The class of traditional counting semaphores.</P>
<H3>Superclasses</H3>
<dl><dd><pre>&lt;lock&gt;</pre></dl>
<H3>Library</H3>
<dl><dd><pre>threads</pre></dl>
<H3>Module</H3>
<dl><dd><pre>threads</pre></dl>
<H3>Description</H3>
<P> The <CODE>&lt;semaphore&gt;</CODE> class is a class representing a traditional counting semaphore. An instance of <CODE>&lt;semaphore&gt;</CODE> contains a counter in its internal state. Calling <A HREF="core_148.htm#MARKER-9-783"><CODE>release</CODE></A> on a semaphore increments the internal count. Calling <A HREF="core_147.htm#MARKER-9-780"><CODE>wait-for</CODE></A> on a semaphore decrements the internal count, unless it is zero, in which case the thread blocks until another thread releases the semaphore. </P>
<P> Semaphores are less efficient than exclusive locks, but they have asynchronous properties which may be useful (for example for managing queues or pools of shared resources). Semaphores may be released by any thread, so there is no built-in concept of a thread owning a semaphore. It is not necessary for a thread to release a semaphore after waiting for it -- although semaphores may be used as locks if they do.</P>
<H3>Init-keywords</H3>
<DL>
<P> </P><DT><I>initial-count</I><DD> A non-negative integer, corresponding to the initial state of the internal counter. The default value is 0.
<P> </P><DT><I>maximum-count</I><DD> A non-negative integer corresponding to the maximum permitted value of the internal counter. The default value is the largest value supported by the implementation, which is the value of the constant <CODE>$semaphore-maximum-count-limit</CODE>. This constant will not be smaller than 10000.
</DL>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Common Dylan and Functional Extensions - 31 Mar 00</ADDRESS>
<P><A HREF="core_147.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_145.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_145.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
