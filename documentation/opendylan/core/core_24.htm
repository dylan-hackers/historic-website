<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="core_1.htm">
<LINK REL=UP HREF="core_23.htm">
<LINK REL=PREV HREF="core_23.htm">
<LINK REL=NEXT HREF="core_25.htm">
<TITLE>2.5.1   What is finalization?</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING24></A>

<DIV>
<P><A HREF="core_25.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_23.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_23.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>2.5   Finalization</P>

</DIV>
<A NAME=HEADING24-0></A>
<H1>2.5.1   <A NAME=MARKER-2-327></A><A NAME=MARKER-2-328></A>What is finalization?</H1>
<P>Common Dylan's Memory Management Reference defines finalization as follows:</P>
<DL>
<DT><DD>In garbage-collected languages, it is often necessary to perform actions on some objects after they are no longer in use and before their memory can be recycled. These actions are known as finalization or termination.
<DT><DD>A common use of finalization is to release a resource when the corresponding "proxy" object dies. For example, an open file might be represented by a stream object. When the stream object has no references and can be collected, it is certain that the file is no longer in use by the [application] and can be closed.
</DL>
<P>(See <CODE>&lt;URL:<A HREF="http://www.xanalys.com/software_tools/mm/">http://www.xanalys.com/software_tools/mm</A>/&gt;</CODE> for the entire Reference.)</P>
<P><A NAME=MARKER-10-331></A>Finalization is also commonly required when interfacing Dylan code with foreign code that does not have automatic memory management. If an interface involves a Dylan object that references a foreign object, it may be necessary to free the memory resources of the foreign object when the Dylan object is reclaimed. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Common Dylan and Functional Extensions - 31 Mar 00</ADDRESS>
<P><A HREF="core_25.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_23.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_23.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
