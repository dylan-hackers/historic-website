<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="core_1.htm">
<LINK REL=UP HREF="core_163.htm">
<LINK REL=PREV HREF="core_163.htm">
<LINK REL=NEXT HREF="core_165.htm">
<TITLE> &lt;read-write-lock&gt;</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING164></A>

<DIV>
<P><A HREF="core_165.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_163.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_163.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.6.7   Multiple reader / single writer locks</P>

</DIV>
<A NAME=HEADING164-0></A>
<H1> <A NAME=MARKER-2-820></A><A NAME=MARKER-2-821></A><A NAME=MARKER-9-738></A>&lt;read-write-lock&gt;</H1>
<P><I>Open instantiable primary class</I></P>
<H3>Summary</H3>
<P> The class of locks that can have multiple readers but only one writer.</P>
<H3>Superclasses</H3>
<dl><dd><pre><A HREF="core_150.htm#MARKER-9-788"><CODE>&lt;exclusive-lock&gt;</A></CODE></pre></dl>
<H3>Library</H3>
<dl><dd><pre>threads</pre></dl>
<H3>Module</H3>
<dl><dd><pre>threads</pre></dl>
<H3>Description</H3>
<P> The class of locks that can have multiple readers but only one writer.</P>
<P> The <CODE>&lt;read-write-lock&gt;</CODE> class can be locked in either of two modes, <I>read</I> and <I>write</I>. A write lock is exclusive, and implies ownership of the lock. However, a read lock is non-exclusive, and an instance can be locked multiple times in read mode, whether by multiple threads, recursively by a single thread, or a combination of both.</P>
<P> A <CODE>&lt;read-write-lock&gt;</CODE> can only be locked in write mode if the lock is free, and the operation will block if necessary. It can only be freed by the thread that owns it.</P>
<P> A <CODE>&lt;read-write-lock&gt;</CODE> can be locked in read mode provided that it is not owned with a write lock. The operation will block while the lock is owned. Each time it is locked in read mode, an internal counter is incremented. This counter is decremented each time a read-mode lock is released. The lock is freed when the counter becomes zero.</P>
<P> The <CODE>&lt;read-write-lock&gt;</CODE> class is less efficient than the other lock classes defined in the Threads library. However, it provides an efficient and convenient means to protect data that is frequently read and may occasionally be written by multiple concurrent threads.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Common Dylan and Functional Extensions - 31 Mar 00</ADDRESS>
<P><A HREF="core_165.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_163.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_163.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
