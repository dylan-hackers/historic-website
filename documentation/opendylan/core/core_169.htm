<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="core_1.htm">
<LINK REL=UP HREF="core_168.htm">
<LINK REL=PREV HREF="core_168.htm">
<LINK REL=NEXT HREF="core_170.htm">
<TITLE> &lt;notification&gt;</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING169></A>

<DIV>
<P><A HREF="core_170.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_168.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_168.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.6.8   Notifications</P>

</DIV>
<A NAME=HEADING169-0></A>
<H1> <A NAME=MARKER-2-831></A><A NAME=MARKER-2-832></A><A NAME=MARKER-9-833></A>&lt;notification&gt;</H1>
<P><I>Sealed instantiable class</I></P>
<H3>Summary</H3>
<P> The class of objects that can be used to notify threads of a change of state elsewhere in the program.</P>
<H3>Superclasses</H3>
<dl><dd><pre>&lt;synchronization&gt;</pre></dl>
<H3>Init-keywords</H3>
<DL>
<P> </P><DT><CODE>lock:</CODE><DD> An instance of <A HREF="core_159.htm#MARKER-9-810"><CODE>&lt;simple-lock&gt;</CODE></A>. Required. 
</DL>
<H3>Library</H3>
<dl><dd><pre>threads</pre></dl>
<H3>Module</H3>
<dl><dd><pre>threads</pre></dl>
<H3>Description</H3>
<P> The class of objects that can be used to notify threads of a change of state elsewhere in the program. Notifications are used in association with locks, and are sometimes called <I>condition variables</I>. They may be used to support the sharing of data between threads using <I>monitors</I>. Each <CODE>&lt;notification&gt;</CODE> is permanently associated with a <A HREF="core_159.htm#MARKER-9-810"><CODE>&lt;simple-lock&gt;</CODE></A>, although the same lock may be associated with many notifications. </P>
<P> The required <I>lock</I> is associated with the notification, and it is only possible to wait for, or release, the notification if the lock is owned.</P>
<P> Threads wait for the change of state to be notified by calling <A HREF="core_171.htm#MARKER-9-839"><CODE>wait-for</CODE></A>. Threads notify other threads of the change of state by calling <A HREF="core_172.htm#MARKER-9-842"><CODE>release</CODE></A>.</P>
<H3>Operations</H3>
<P> The class <CODE>&lt;notification&gt; </CODE>provides the following operations:</P>
<DL>
<P> </P><DT><A HREF="core_170.htm#MARKER-9-836"><CODE>associated-lock</CODE></A><CODE> </CODE><DD>
<P>Returns the lock associated with the notification object.</P>
<P> </P><DT><A HREF="core_171.htm#MARKER-9-839"><CODE>wait-for</CODE></A><DD> Wait for the notification of the change in state. The associated lock must be owned, and is atomically released before synchronization, and reclaimed after.
<P> </P><DT><A HREF="core_172.htm#MARKER-9-842"><CODE>release</CODE></A><CODE></CODE><DD> Notify the change of state to a single waiting thread. This has no effect on the associated lock, which must be owned.
<P> </P><DT><A HREF="core_173.htm#MARKER-9-845"><CODE>release-all</CODE></A><DD> Notify the change of state to all waiting threads. This has no effect on the associated lock, which must be owned.
</DL>
<H3>Example</H3>
<P> This example shows how to use a notification and an associated lock to implement a queue. The variable <CODE>*queue*</CODE> is the actual queue object (a <CODE>&lt;deque&gt;</CODE>). Queue access is performed by interlocking pushes and pops on the <CODE>&lt;deque&gt;</CODE>. The <CODE>*queue*</CODE> variable can be a constant, since it is the <CODE>&lt;deque&gt;</CODE> which is mutated and not the value of <CODE>*queue*</CODE>.</P>
<dl><dd><pre>define constant *queue* = make(&lt;deque&gt;);</pre></dl>
<P> The variable <CODE>*lock*</CODE> is used to isolate access to the queue </P>
<dl><dd><pre>define constant *lock* = make(&lt;lock&gt;);</pre></dl>
<P> The variable <CODE>*something-queued*</CODE> is a notification which is used to notify other threads that an object is being put onto an empty queue.</P>
<DL><DD><PRE>define constant *something-queued* =
  make(&lt;notification&gt;, lock: *lock*);</PRE></DL>
<P> The function <CODE>put-on-queue</CODE> pushes an object onto the queue. If the queue was initially empty, then all threads which are waiting for the queue to fill are notified that there is a new entry.</P>
<DL><DD><PRE>define method put-on-queue (object) =&gt; ()
  with-lock (*lock*)
    if (*queue*.empty?)
      release-all(*something-queued*)
    end;
    push(*queue*, object)
  end with-lock
end method;</PRE></DL>
<P> The <CODE>get-from-queue</CODE> function returns an object from the queue. If no object is immediately available, then it blocks until it receives a notification that the queue is no longer empty. After receiving the notification it tests again to see if an object is present, in case it was popped by another thread.</P>
<DL><DD><PRE>define method get-from-queue () =&gt; (object)
  with-lock (*lock*)
    while (*queue*.empty?) 
      wait-for(*something-queued*) 
    end;
    pop(*queue*)
  end with-lock
end method;</PRE></DL>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Common Dylan and Functional Extensions - 31 Mar 00</ADDRESS>
<P><A HREF="core_170.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_168.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_168.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
