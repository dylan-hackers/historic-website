<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="core_1.htm">
<LINK REL=UP HREF="core_190.htm">
<LINK REL=PREV HREF="core_217.htm">
<LINK REL=NEXT HREF="core_219.htm">
<TITLE>5.4   Using special arithmetic features</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING218></A>

<DIV>
<P><A HREF="core_219.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_217.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_190.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5 Integers</P>

</DIV>
<A NAME=HEADING218-0></A>
<A NAME=UID-numbers-904959></A>
<H1>5.4   <A NAME=MARKER-9-1102></A>Using special arithmetic features</H1>
<P>As noted in <A HREF="core_208.htm#MARKER-9-1078">Section 5.3</A>, the Generic-Arithmetic library provides an extensible protocol for adding specialized arithmetic functionality to your applications. By using the Generic-Arithmetic library alongside a special implementation library, you can make the standard arithmetic operations support number types such as big (64-bit) integers, or complex numbers.</P>
<P>This section provides an example of extending the basic Dylan arithmetic features using the Generic-Arithmetic library and the Big-Integers implementation library.</P>
<P>To use special arithmetic features, an a library's <CODE>define</CODE> <CODE>library</CODE> declaration must use at least the following libraries:</P>
<PRE>
common-dylan
generic-arithmetic
<I>special-arithmetic-implementation-library</I> 
<P></P>
</PRE>
<P>So for Big-Integers you would write:</P>
<PRE>
define library foo
  use common-dylan;
  use generic-arithmetic;
  use big-integers;
  ...
end library foo;
<P></P>
</PRE>
<P>Next you have to declare a module. There are three ways of using big-integer arithmetic that we can arrange with a suitable module declaration:</P>
<DL>
<DT><DD>1.  Replace all integer arithmetic with the big-integer arithmetic 
<DT><DD>2.  Use both, with normal arithmetic remaining the default 
<DT><DD>3.  Use both, with the big-integer arithmetic becoming the default
</DL>
<P>To get one of the three different effects described above, you need to arrange the <CODE>define</CODE> <CODE>module</CODE> declaration accordingly. To replace all integer arithmetic with big-integer arithmetic, include the following in your <CODE>define</CODE> <CODE>module</CODE> declaration:</P>
<PRE>
use generic-arithmetic-common-dylan;
<P></P>
</PRE>
<P>(Note that the module definition should not use the Big-Integers module. The Big-Integers library is used as a side-effects library only, that is, it is referenced in the library definition so that it will be loaded. Its definitions extend the Generic-Arithmetic library.)</P>
<P>If you replace all integer arithmetic with big-integer arithmetic in this way, there will be performance hits. For instance, loop indices will have to be checked at run-time to see whether a normal or big integer representation is being used, and a choice must be made about the representation for an incremented value.</P>
<P>You can take a different approach that reduces the cost of big-integer arithmetic. Under this approach you leave normal integer arithmetic unchanged, and get access to big-integer arithmetic when you need it. To do this, use the same libraries but instead of using the <CODE>common-dylan-generic-arithmetic</CODE> module, include the following in your <CODE>define</CODE> <CODE>module</CODE> declaration:</P>
<PRE>
use common-dylan;
use generic-arithmetic, prefix: &quot;ga/&quot;; // use any prefix you like
<P></P>
</PRE>
<P>This imports the big-integer arithmetic binding names, but gives them a prefix <CODE>ga/</CODE>, using the standard renaming mechanism available in module declarations. Thus you gain access to big arithmetic using renamed classes and operations like:</P>
<PRE>
ga/&lt;integer&gt; 
ga/+
ga/-
ga/*
...
<P></P>
</PRE>
<P>The operations take either instances of <CODE>&lt;integer&gt;</CODE> or <CODE>ga/&lt;integer&gt;</CODE> (a subclass of <CODE>&lt;integer&gt;</CODE>) and return instances of <CODE>ga/&lt;integer&gt;</CODE>.</P>
<P>Note that having imported the big-integer operations under new names, you have to use prefix rather than infix syntax when calling them. For example:</P>
<PRE>
ga/+ (5, 4);
<P></P>
</PRE>
<P>not:</P>
<PRE>
5 ga/+ 4;
<P></P>
</PRE>
<P>The existing functions like <CODE>+</CODE> and <CODE>-</CODE> will only accept <CODE>&lt;integer&gt;</CODE> instances and <CODE>ga/&lt;integer&gt;</CODE> instances small enough to be represented as <CODE>&lt;integer&gt;</CODE> instances. </P>
<P>Under this renaming scheme, reduced performance will be confined to the <CODE>ga/</CODE> operations. Other operations, such as loop index increments and decrements, will retain their efficiency.</P>
<P>Finally, you can make big-integer arithmetic the default but keep normal arithmetic around for when you need it. Your <CODE>define</CODE> <CODE>module</CODE> declaration should contain: </P>
<PRE>
use generic-arithmetic-common-dylan;
use dylan-arithmetic, prefix: &quot;dylan/&quot;; //use any prefix you like
<P></P>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Common Dylan and Functional Extensions - 31 Mar 00</ADDRESS>
<P><A HREF="core_219.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_217.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_190.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
