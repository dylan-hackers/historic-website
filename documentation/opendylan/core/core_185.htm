<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="core_1.htm">
<LINK REL=UP HREF="core_184.htm">
<LINK REL=PREV HREF="core_184.htm">
<LINK REL=NEXT HREF="core_186.htm">
<TITLE> conditional-update!</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING185></A>

<DIV>
<P><A HREF="core_186.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_184.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_184.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.11   Conditional update</P>

</DIV>
<A NAME=HEADING185-0></A>
<H1> <A NAME=MARKER-2-872></A><A NAME=MARKER-2-873></A><A NAME=MARKER-9-874></A>conditional-update!</H1>
<P><I>Statement macro</I></P>
<H3>Summary</H3>
<P> Performs an atomic test-and-set operation.</P>
<H3>Macro call</H3>
<dl><dd><pre>conditional-update!(<I>local-name</I> = <I>place</I>) <BR>  <I>body<BR></I>  [success <I>success-expr</I>]<BR>  [failure <I>failure-expr</I>]<BR>end</pre></dl>
<H3>Arguments</H3>
<DL>
<P> </P><DT><I>local-name</I><DD> A Dylan variable-name<I>bnf</I>.
<P> </P><DT><I>place</I><DD> A Dylan variable-namebnf, 
<P>If the implementation provides the extended form of <A HREF="core_189.htm#MARKER-9-888"><CODE>conditional-update!</CODE></A>, <I>place</I> can also be a function call.</P>
<P> </P><DT><I>body</I><DD> A Dylan body<I>bnf</I>. 
</DL>
<H3>Values</H3>
<DL>
<P> </P><DT>See Description.<DD>
</DL>
<H3>Library</H3>
<dl><dd><pre>threads</pre></dl>
<H3>Module</H3>
<dl><dd><pre>threads</pre></dl>
<H3>Description</H3>
<P> Performs an atomic test-and-set operation. Where appropriate, it should be implemented using dedicated processor instructions, and is expected to be extremely efficient on most platforms. </P>
<P> The value of the <I>place</I> is evaluated once to determine the initial value, which is then bound to the <I>local-name</I> as a lexical variable. The <I>body</I> is then evaluated to determine the new value for the place. The place is then conditionally updated -- which means that the following steps are performed atomically:</P>
<DL>
<DT><DD>1.  The place is evaluated again, and a test is made to see if it has been updated since the initial evaluation. This may involve a comparison with the old value using <CODE>==</CODE>, though implementations might use a more direct test for there having been an assignment to the place. It is undefined whether the test will succeed or fail in the case where the place was updated with a value that is identical to the old value when compared using <CODE>\==</CODE>.
<DT><DD>2.  If the value was found not to have been updated since the initial evaluation, the new value is stored by assignment. Otherwise the conditional update fails. 
</DL>
<P> If the update was successful, then <CODE>conditional-update!</CODE> returns the result of the <CODE>success</CODE> expression, or returns the new value of the place if no <CODE>success</CODE> clause was supplied.</P>
<P> If the update failed, then <CODE>conditional-update!</CODE> signals a condition, unless a <CODE>failure</CODE> clause was given, in which case the value is returned.</P>
<P> If the <I>place</I> is a <EM>name</EM>, it must be the name of a <CODE>locked variable </CODE>in the current module scope. See <A HREF="core_182.htm#MARKER-9-866">Section 4.10 on page 114</A>.</P>
<H3>Exceptions</H3>
<P> <CODE>conditional-update!</CODE> may signal a condition of the following class (which is a subclass of <CODE>&lt;error&gt;</CODE>), unless a <CODE>failure</CODE> clause is supplied.</P>
<dl><dd><pre>&lt;conditional-update-error&gt;</pre></dl>
<H3>Example</H3>
<P> The following example does an atomic increment of <CODE>*number-detected*</CODE>.</P>
<DL><DD><PRE>until (conditional-update! 
        (current-val = *number-detected*) 
          current-val + 1
        failure #f
       end conditional-update!) 
end until</PRE></DL>

</DIV>

<DIV>

<DIV>

<!-- TOC --><DL>
<DL>
<DT><A REL=BELOW HREF="core_186.htm#HEADING186-0"><B></B>atomic-increment!</A>
<DD>
<DT><A REL=BELOW HREF="core_187.htm#HEADING187-0"><B></B>atomic-decrement!</A>
<DD>
</DL>
</DL>


</DIV>

<HR>
<ADDRESS>Common Dylan and Functional Extensions - 31 Mar 00</ADDRESS>
<P><A HREF="core_186.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_184.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_184.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
