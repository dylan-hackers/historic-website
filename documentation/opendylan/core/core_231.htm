<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="core_1.htm">
<LINK REL=UP HREF="core_228.htm">
<LINK REL=PREV HREF="core_230.htm">
<LINK REL=NEXT HREF="core_232.htm">
<TITLE>6.3.2   Basic and signed single word operations</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING231></A>

<DIV>
<P><A HREF="core_232.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_230.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_228.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>6.3   The MACHINE-WORDS module</P>

</DIV>
<A NAME=HEADING231-0></A>
<H1>6.3.2   Basic and signed single word operations</H1>
<P>For all of the following functions, all arguments that are specified as being specialized to <CODE>&lt;machine-word&gt;</CODE> accept an instance of <CODE>&lt;abstract-integer&gt;</CODE>, which is then coerced to a <CODE>&lt;machine-word&gt;</CODE> before performing the operation.</P>
<STRONG><A NAME=MARKER-2-1160></A>%logior </STRONG>
<P><I>Function</I></P>
<PRE>
%logior (<I>#rest</I> <I>machine-words</I>) =&gt; (r :: <I>machine-word</I>)
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1161></A>%logxor </STRONG>
<P><I>Function</I></P>
<PRE>
%logxor (<I>#rest</I> <I>machine-words</I>) =&gt; (r :: <I>machine-word</I>)
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1162></A>%logand </STRONG>
<P><I>Function</I></P>
<PRE>
%logand (<I>#rest</I> <I>machine-words</I>) =&gt; (r :: m<I>achine-word</I>)
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1163></A>%lognot </STRONG>
<P><I>Function</I></P>
<PRE>
%lognot (m :: <I>machine-word</I>) =&gt; (r :: <I>machine-word</I>)
<P></P>
</PRE>
<P>These four functions have the same semantics as <CODE>logior</CODE>, <CODE>logxor</CODE>, <CODE>logand</CODE>, and <CODE>lognot</CODE> in the Dylan library, but they operate on <CODE>&lt;machine-word&gt;</CODE>s instead of <CODE>&lt;integer&gt;</CODE>s.</P>
<STRONG><A NAME=MARKER-2-1164></A>%logbit? </STRONG>
<P><I>Function</I></P>
<PRE>
%logbit? (index :: <I>integer</I>, m :: <I>machine-word</I>) =&gt; (set? :: <I>boolean</I>)
<P></P>
</PRE>
<P>Returns true iff the indexed bit (zero based, counting from the least significant bit) of <CODE>m</CODE> is set. An error is signaled unless <CODE>0 &lt;= index &lt; $machine-word-size</CODE>.</P>
<STRONG><A NAME=MARKER-2-1165></A>%count-low-zeros</STRONG>
<P><I>Function</I></P>
<PRE>
%count-low-zeros (m :: <I>machine-word</I>) =&gt; (c :: <I>integer</I>)
<P></P>
</PRE>
<P>Returns the number of consecutive zero bits in <CODE>m</CODE> counting from the least significant bit.</P>
<P><B>Note:</B> This is the position of the least significant non-zero bit in <CODE>m</CODE>. So if <CODE>i</CODE> is the result, then <CODE>%logbit?(i, m)</CODE> is true, and for all values of <CODE>j</CODE> such that <CODE>0 &lt;= j &lt; i</CODE>, <CODE>%logbit?(j, m)</CODE> is false.</P>
<STRONG><A NAME=MARKER-2-1166></A>%count-high-zeros </STRONG>
<P><I>Function</I></P>
<PRE>
%count-high-zeros (m :: <I>machine-word</I>) =&gt; (c :: <I>integer</I>)
<P></P>
</PRE>
<DL>
<DT><DD>Returns the number of consecutive zero bits in <CODE>m</CODE> counting from the most significant bit.
<DT><DD><B>Note:</B> The position of the most significant non-zero bit in <CODE>m</CODE> can be computed by subtracting this result from <CODE>$machine-word-size - 1</CODE>. So if <CODE>i</CODE> is the result and <CODE>p = ($machine-word-size - i - 1)</CODE>, then <CODE>%logbit?(p, m)</CODE> is true, and for all values of <CODE>j</CODE> such that <CODE>p &lt; j &lt; $machine-word-size</CODE>, <CODE>%logbit?(j, m)</CODE> is false.
</DL>
<STRONG><A NAME=MARKER-2-1167></A>%+ </STRONG>
<P><I>Function</I></P>
<PRE>
%+ (m1 :: <I>machine-word</I>, m2 :: <I>machine-word</I>) =&gt; (sum :: <I>machine-word</I>, overflow? :: <I>boolean</I>) 
<P></P>
</PRE>
<DL>
<DT><DD>Signed addition.
</DL>
<STRONG><A NAME=MARKER-2-1168></A>%- </STRONG>
<P><I>Function</I></P>
<PRE>
%- (m1 :: <I>machine-word</I>, m2 :: <I>machine-word</I>) =&gt; (difference :: <I>machine-word</I>, overflow? :: <I>boolean</I>)
<P></P>
</PRE>
<DL>
<DT><DD>Signed subtraction. 
</DL>
<STRONG><A NAME=MARKER-2-1169></A>%* </STRONG>
<P><I>Function</I></P>
<PRE>
%* (m1 :: <I>machine-word</I>, m2 :: <I>machine-word</I>) =&gt; (low :: <I>machine-word</I>, high :: <I>machine-word</I>, overflow? :: <I>boolean</I>)
<P></P>
</PRE>
<DL>
<DT><DD>Signed multiplication. The value of <CODE>overflow?</CODE> is false iff the <CODE>high</CODE> word result is a sign extension of the <CODE>low</CODE> word result.
</DL>
<STRONG><A NAME=MARKER-9-1170></A>%floor/<A NAME=MARKER-2-1171></A></STRONG>
<P><I>Function</I></P>
<PRE>
%floor/ (dividend :: <I>machine-word</I>, divisor :: <I>machine-word</I>) =&gt; (quotient :: <I>machine-word</I>, remainder :: <I>machine-word</I>)
<P></P>
</PRE>
<STRONG><A NAME=MARKER-9-1172></A>%ceiling/<A NAME=MARKER-2-1173></A></STRONG>
<P><I>Function</I></P>
<PRE>
%ceiling/ (dividend :: <I>machine-word</I>, divisor :: <I>machine-word</I>) =&gt; quotient :: <I>machine-word</I>, remainder :: <I>machine-word</I>
<P></P>
</PRE>
<STRONG><A NAME=MARKER-9-1174></A>%round/<A NAME=MARKER-2-1175></A></STRONG>
<P><I>Function</I></P>
<PRE>
%round/ (dividend :: <I>machine-word</I>, divisor :: <I>machine-word</I>)=&gt; (quotient :: <I>machine-word</I>, remainder :: <I>machine-word</I>)
<P></P>
</PRE>
<STRONG><A NAME=MARKER-9-1176></A>%truncate/<A NAME=MARKER-2-1177></A></STRONG>
<P><I>Function</I></P>
<PRE>
%truncate/ (dividend :: <I>machine-word</I>, divisor :: <I>machine-word</I>) =&gt; (quotient :: <I>machine-word</I>, remainder :: <I>machine-word</I>)
<P></P>
</PRE>
<STRONG><A NAME=MARKER-9-1178></A>%divide<A NAME=MARKER-2-1179></A></STRONG>
<P><I>Function</I></P>
<PRE>
%divide (dividend :: <I>machine-word</I>, divisor :: <I>machine-word</I>) =&gt; (quotient :: <I>machine-word</I>, remainder :: <I>machine-word</I>)
<P></P>
</PRE>
<P>The functions <CODE>%divide</CODE>, <CODE>%floor/</CODE>, <CODE>%ceiling/</CODE>, <CODE>%round/</CODE>, and <CODE>%truncate/</CODE> all perform signed division of the dividend by the divisor, returning a quotient and remainder such that</P>
<PRE>
(quotient * divisor + remainder = dividend)
<P></P>
</PRE>
<P>When the division is inexact (in other words, when the remainder is not zero), the kind of rounding depends on the operation:</P>
<DL>
<DT><CODE><A HREF="#MARKER-9-1170">%floor/</A></CODE><DD><P> The quotient is rounded toward negative infinity.</P>
<DT><CODE><A HREF="#MARKER-9-1172">%ceiling/</A></CODE><DD><P> The quotient is rounded toward positive infinity.</P>
<DT><CODE><A HREF="#MARKER-9-1174">%round/</A></CODE><DD><P> The quotient is rounded toward the nearest integer. If the mathematical quotient is exactly halfway between two integers, then the resulting quotient is rounded to the nearest even integer.</P>
<DT><CODE><A HREF="#MARKER-9-1176">%truncate/</A></CODE><DD><P> The quotient is rounded toward zero.</P>
<DT><CODE><A HREF="#MARKER-9-1178">%divide</A></CODE><DD><P> If both operands are non-negative, then the quotient is rounded toward zero. If either operand is negative, then the direction of rounding is unspecified, as is the sign of the remainder.</P>
</DL>
<P>For all of these functions, an error is signaled if the value of the divisor is zero or if the correct value for the quotient exceeds the machine word range.</P>
<STRONG><A NAME=MARKER-2-1180></A>%negative </STRONG>
<P><I>Function</I></P>
<PRE>
%negative (m :: <I>machine-word</I>) =&gt; (r :: <I>machine-word</I>, overflow? :: <I>boolean</I>)
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1181></A>%abs </STRONG>
<P><I>Function</I></P>
<PRE>
%abs (m :: <I>machine-word</I>) =&gt; (r :: <I>machine-word</I>, overflow? :: <I>boolean</I>)
<P></P>
</PRE>
<STRONG><A NAME=MARKER-2-1182></A>%shift-left </STRONG>
<P><I>Function</I></P>
<PRE>
%shift-left (m :: <I>machine-word</I>, count :: <I>integer</I>) =&gt; (low :: <I>machine-word</I>, high :: <I>machine-word</I>, overflow? :: <I>boolean</I>)
<P></P>
</PRE>
<DL>
<DT><DD>Arithmetic left shift of <CODE>m</CODE> by count. An error is signaled unless <CODE>0 &lt;= count &lt; $machine-word-size</CODE>. The value of <CODE>overflow?</CODE> is false iff the high word result is a sign extension of the low word result.
</DL>
<STRONG><A NAME=MARKER-2-1183></A>%shift-right </STRONG>
<P><I>Function</I></P>
<PRE>
%shift-right (m :: <I>machine-word</I>, count :: <I>integer</I>) =&gt; (r :: <I>machine-word</I>)
<P></P>
</PRE>
<P>Arithmetic right shift of <CODE>m</CODE> by <CODE>count</CODE>. An error is signaled unless <CODE>0 &lt;= count &lt; $machine-word-size</CODE>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Common Dylan and Functional Extensions - 31 Mar 00</ADDRESS>
<P><A HREF="core_232.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_230.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_228.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
