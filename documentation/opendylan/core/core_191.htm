<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="core_1.htm">
<LINK REL=UP HREF="core_190.htm">
<LINK REL=PREV HREF="core_190.htm">
<LINK REL=NEXT HREF="core_192.htm">
<TITLE>5.1   Introduction</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING191></A>

<DIV>
<P><A HREF="core_192.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_190.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_190.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5 Integers</P>

</DIV>
<A NAME=HEADING191-0></A>
<A NAME=UID-numbers-897076></A>
<H1>5.1   <A NAME=MARKER-2-906></A><A NAME=MARKER-2-907></A><A NAME=MARKER-2-908></A>Introduction</H1>
<P>This chapter describes the Common Dylan implementation of arithmetic functions, especially integer arithmetic. It describes a number of extensions to the Dylan language, which are available from the Dylan library. It also describes a generic arithmetic facility that, through the use of other libraries, allows you to extend arithmetic to special number types, such as "big" (64-bit) integers.</P>
<P>Throughout this chapter, arguments are instances of the class specified by the argument name (ignoring any numeric suffixes), unless otherwise noted. Thus, the arguments <I>integer</I>, <I>integer1</I>, and <I>integer2</I> would all be instances of the class <CODE>&lt;integer&gt;</CODE>.</P>
<P>The goals of the extensions to the Dylan language described in this chapter are as follows:</P>
<UL>
<LI>Provide arithmetic operations that are closed over small integers. 
</UL>
<DL>
<DT><DD>This allows type inference to propagate small integer declarations more widely, because there is no possibility of automatic coercion into some more general format. 
</DL>
<UL>
<LI>Make the arithmetic operations that are closed over small integers easily accessible to programmers. 
<LI>Allow the Dylan library to be described in such a way that only small integers are present by default, moving support for infinite precision integer arithmetic to the Big-Integers library, which must be explicitly used. 
<LI>Support infinite precision integer arithmetic through the Big-Integers library.
</UL>
<DL>
<DT><DD><B>Note:</B> Using that library in another library does not have a negative effect on the correctness or performance of other libraries in the same application that do not use it. 
</DL>
<UL>
<LI>Maintain compatibility with the DRM specification. 
</UL>
<DL>
<DT><DD>In particular, the extensions support the production of efficient code for programs written to be portable with respect to the DRM specification. Use of implementation-specific types or operations in order to get reasonable efficiency is not required. This precludes relegating the <CODE>&lt;integer&gt;</CODE> class and <CODE>limited-&lt;integer&gt;</CODE> types to inefficient implementations. 
<DT><DD><B>Note:</B> When there are several distinct interfaces with the same name but in different modules, the notation <I>interface<CODE>#module</CODE></I> is used in this chapter to remove ambiguity.
</DL>
<UL>
<LI>Specify that the class <CODE>&lt;integer&gt;</CODE> has a finite, implementation-dependent range, bounded by the constants <CODE>$minimum-integer</CODE> and <CODE>$maximum-integer</CODE>. 
</UL>
<DL>
<DT><DD>The representation for integers must be at least 28 bits, including the sign. That is, the minimum conforming value for <CODE>$maximum-integer</CODE> is 2<SUP>27</SUP>-1 and the maximum conforming value for <CODE>$minimum-integer</CODE> is -2<SUP>27</SUP>. 
<DT><DD><B>Rationale:</B> Restricting <CODE>&lt;integer&gt;</CODE> in this way allows the programmer to stay in the efficient range without requiring exact knowledge of what that range might be. The full generality of extended precision integers is provided by the Big-Integers library, for programmers who actually need that functionality.
</DL>
<UL>
<LI>Define the type <CODE>&lt;machine-number&gt;</CODE> to be the type union of <CODE>&lt;float&gt;</CODE> and <CODE>&lt;integer&gt;</CODE>. 
</UL>
<P>The Dylan library provides implementations of the generic functions and functions described in this chapter. If the result of one of these operations is specified to be an instance of <CODE>&lt;integer&gt;</CODE> and the mathematically correct result cannot be represented as an <CODE>&lt;integer&gt;</CODE> then an error is signaled. This removes fully generic arithmetic from the Dylan library. In particular, it removes extended integers, ratios, and rectangular complex numbers.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Common Dylan and Functional Extensions - 31 Mar 00</ADDRESS>
<P><A HREF="core_192.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_190.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_190.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
