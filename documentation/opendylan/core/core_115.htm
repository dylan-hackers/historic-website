<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="core_1.htm">
<LINK REL=UP HREF="core_114.htm">
<LINK REL=PREV HREF="core_114.htm">
<LINK REL=NEXT HREF="core_116.htm">
<TITLE>4.2.1   Atomicity</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING115></A>

<DIV>
<P><A HREF="core_116.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_114.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_114.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4.2   Multi-thread semantics</P>

</DIV>
<A NAME=HEADING115-0></A>
<H1>4.2.1   <A NAME=MARKER-2-694></A><A NAME=MARKER-9-695></A>Atomicity</H1>
<P>In general, the Threads library guarantees that assignments to slots and variables are atomic. That is, after an assignment, but before synchronization, another thread will see either the old value or the new value of the location. There is no possibility of seeing a half-way state.</P>
<P>In some circumstances, when a slot or a variable is specialized to be of a particularly constrained type, the Threads library does not guarantee atomicity of assignments. Such a type may include a subtype of <CODE>&lt;double-float&gt;</CODE> or a subtype of <CODE>&lt;extended-float&gt;</CODE>. It may not include any other type that is either defined in the current specification of the Dylan language, or that could be created from standard facilities provided by the current specification of the language. This restriction of the atomicity guarantee is intended to permit implementations to represent the values of such slots or variables in a form which uses more space than a normal Dylan value, for optimal efficiency.</P>
<P>For those cases where the implementation does not provide the atomicity guarantee, the results of accessing a normal variable are undefined if:</P>
<UL>
<LI>The read could proceed in parallel with some write of the same location
<LI>Two writes of the same location could have proceeded in parallel since the last non-parallel write
</UL>
<P>Two memory references <I>proceed in parallel</I> if they are not explicitly sequentialized, either by being in a single thread, or by explicit inter-thread synchronization.</P>
<P>Programmers should guard against the possibility of undefined values by using explicit inter-thread synchronization. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Common Dylan and Functional Extensions - 31 Mar 00</ADDRESS>
<P><A HREF="core_116.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="core_114.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="core_114.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="core_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="core_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="core_271.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
