<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1977) -->
<HEAD>
<LINK REL=TOP HREF="dref_1.htm">
<LINK REL=UP HREF="dref_281.htm">
<LINK REL=PREV HREF="dref_281.htm">
<LINK REL=NEXT HREF="dref_283.htm">
<TITLE>5.1   Overview</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1977)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING282></A>

<DIV>
<P><A HREF="dref_283.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dref_281.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dref_281.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dref_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dref_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dref_991.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5 DUIM-Sheets Library</P>

</DIV>
<A NAME=HEADING282-0></A>
<A NAME=UID-silica-1269735></A>
<H1>5.1   Overview</H1>
<P>The elements that comprise a Graphical User Interface (GUI) are arranged in a hierarchical ordering of object classes. At the top level of the DUIM hierarchy there are three main classes<CODE>,</CODE> <CODE>&lt;sheet&gt;</CODE>, <CODE>&lt;gadget&gt;</CODE>, and <CODE>&lt;frame&gt;</CODE>, all of which are subclasses of <CODE>&lt;object&gt;. </CODE></P>
<P>Sheets are the most basic visual GUI element, and can be any unique part of a window: either a control such as a gadget or pane, or a layout.</P>
<UL>
<LI>Sheets have a visual presence: size, drawing context and so on.
<LI>The essential component of a sheet is its region; the area of the screen that the sheet occupies. 
<LI>In practice sheets always also have a transform that maps the coordinate system of the sheet's region to the coordinate system of its parent, because in practice all sheets maintain a pointer to a parent sheet.
<LI>Sheets can be output-only (labels, for example), input-output (most gadgets are like this) or even, in principle, input-only (for instance, you may need to provide some kind of simple drag'n'drop target). 
</UL>
<P>Most of the sheet classes that you need to use on a day to day basis are exposed in the DUIM-Gadgets and DUIM-Layouts libraries. The DUIM-Sheets library contains the basic building blocks to implement these classes, as well as providing the necessary functionality for you to create and manipulate your own classes of sheet. In addition, DUIM-Sheets defines a portable model for handling events. These event handling routines are used by the DUIM-Frames, DUIM-Gadgets, and DUIM-Layouts libraries without the need for any special action on your part. However, if you need to define your own sheet classes, you will also need to handle events occurring within those classes. </P>
<P>The DUIM-Sheets library contains a single module, <CODE>duim-sheets</CODE>, from which all the interfaces described in this chapter are exposed. <A HREF="dref_287.htm#MARKER-9-1821">Section 5.3 on page 207</A> contains complete reference entries for each exposed interface.</P>
<P>A sheet is the basic unit in a DUIM window. Inside any window, sheets are nested in a parent-child hierarchy. All sheets have the following attributes:</P>
<UL>
<LI><CODE>sheet-region</CODE>, expressed in the sheet's own coordinate system.
<LI><CODE>sheet-transform</CODE>, which maps the sheet's coordinate system to the coordinate system of its parent.
<LI><CODE>sheet-parent</CODE>, which is <CODE>#f</CODE> if the sheet has no parent.
<LI><CODE>sheet-mapped?</CODE>, which tells if the sheet is visible on a display, ignoring issues of occluding windows.
</UL>
<P>The <CODE>sheet-transform</CODE> is an instance of a concrete subclass of <CODE>&lt;transform&gt;</CODE>. The <CODE>sheet-region</CODE> can be an instance of any concrete subclass of <CODE>&lt;region&gt;</CODE>, but is usually represented by the region class <CODE>&lt;bounding-box&gt;</CODE>.</P>
<P>Some sheets (menu bars, button boxes, or tool bars, for instance) also have single or multiple children, in which case they have additional attributes:</P>
<UL>
<LI>A <CODE>sheet-children</CODE> slot. This is a sequence of sheets. Each sheet in the sequence is a child of the current sheet.
<LI>Methods to add, remove, and replace a child.
<LI>Methods to map over children.
</UL>
<P>The functions that maintain the sheet's region and transform are part of the <CODE>sheet-geometry</CODE> protocol. Functions that maintain a sheet's parent and children are part of the <CODE>sheet-genealogy</CODE> protocol. Note that the sheet geometry and genealogy protocols are independent. Adding a child to a sheet that is larger than its parent does not cause the parent's region to grow. Shrinking the region of a parent does not cause the children to shrink. You must maintain the region yourself, either by explicitly setting the sheet's region and transform, or by using the layout facilities (<CODE>compose-space</CODE> and <CODE>allocate-space</CODE>)<CODE>.</CODE></P>
<P>As a convenience, there are some glue functions that mediate between geometry and layout: <CODE>set-sheet-position</CODE>, <CODE>set-sheet-size</CODE>, and<CODE> set-sheet-edges</CODE>. </P>
<P>Some classes of sheet can receive input. These have:</P>
<UL>
<LI>A <CODE>sheet-event-queue</CODE> slot.
<LI>Methods for <CODE>&lt;handle-event&gt;</CODE>.
</UL>
<P>Sheets that can be repainted have methods for <CODE>handle-repaint</CODE>.</P>
<P>Sheets that can do output, have a <CODE>sheet-medium</CODE> slot.</P>
<P>Some sheets act as <I>controls</I> such as push buttons, scroll bars, and sliders. These are represented by the <CODE>&lt;gadget&gt;</CODE> class and its subclasses.</P>
<P>Other sheets act as layout controls, which allow you to specify how the elements in a sheet are laid out, whether they are placed vertically or horizontally, whether they are left, right, or center-aligned, and so on. These are represented by the <CODE>&lt;layout&gt;</CODE> class and its subclasses, and are described in <A HREF="dref_579.htm#MARKER-9-4344">Chapter 7,  "DUIM-Layouts Library"</A>.</P>
<P>A sheet can be associated with a <CODE>&lt;display&gt;</CODE>, which is an object that represents a single display (or screen) on some display server.</P>
<P>A display (and all the sheets attached to the display) is associated with a <CODE>&lt;port&gt;</CODE> that is a connection to a display server. The port manages:</P>
<UL>
<LI>a primary input device, such as a keyboard.
<LI>a pointing device, such as a mouse.
<LI>an event processor that <I>dispatches</I> events to the appropriate sheet.
</UL>
<P>There is a protocol for using the Windows clipboard. In order to manipulate the Windows clipboard from within DUIM, the clipboard needs to be locked, so that its contents can be manipulated. DUIM uses the functions <CODE>open-clipboard</CODE> and <CODE>close-clipboard</CODE> to create and free clipboard locks. The <CODE>open-clipboard</CODE> function creates an instance of the class <CODE>&lt;clipboard&gt;</CODE> which is used to hold the contents of the clipboard for the duration of the lock. For general use of the clipboard, use the macro <CODE>with-clipboard</CODE>, rather than calling <CODE>open-clipboard</CODE> and <CODE>close-clipboard</CODE> explicitly. This lets you manipulate the clipboard easily, sending the results of any code evaluated to the clipboard.</P>
<P>Once a clipboard lock has been created, you can use <CODE>add-clipboard-data</CODE> and <CODE>add-clipboard-data-as</CODE> to add data to the clipboard. Use <CODE>get-clipboard-data-as</CODE> to query the contents of the clipboard, and use <CODE>clear-clipboard</CODE> to empty the locked clipboard. Finally, use <CODE>clipboard-data-available?</CODE> to see if the clipboard contains data of a particular type.</P>
<P>You can put arbitrary Dylan objects onto the clipboard, and retrieve them within the same process. This gives you the ability to cut and paste more interesting pieces of an application within the application's own domain than would normally be possible. </P>
<P>The DUIM GUI test suite contains a demonstration of how to use the clipboard in DUIM, in the file </P>
<PRE>
Examples\duim\duim-gui-test-suite\clipboard.dylan 
<P></P>
</PRE>
<P>in the Functional Developer installation directory.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Functional Developer Library Reference: DUIM - 3 Dec 1998</ADDRESS>
<P><A HREF="dref_283.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dref_281.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dref_281.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dref_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dref_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dref_991.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
