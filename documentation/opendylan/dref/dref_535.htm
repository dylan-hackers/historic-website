<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1977) -->
<HEAD>
<LINK REL=TOP HREF="dref_1.htm">
<LINK REL=UP HREF="dref_531.htm">
<LINK REL=PREV HREF="dref_534.htm">
<LINK REL=NEXT HREF="dref_536.htm">
<TITLE>6.4   Rendering conventions for geometric shapes</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1977)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING535></A>

<DIV>
<P><A HREF="dref_536.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dref_534.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dref_531.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dref_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dref_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dref_991.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>6 DUIM-Graphics Library</P>

</DIV>
<A NAME=HEADING535-0></A>
<A NAME=UID-graphics-964212></A>
<H1>6.4   Rendering conventions for geometric shapes</H1>
<P>This section describes the conventions for how DUIM renders a shape on a display device.</P>
<P>When DUIM draws a geometric shape on a display device, the idealized geometric shape must somehow be rendered on that device. This involves mapping points on the idealized geometric shape onto points on the display device. </P>
<P>Idealized geometric shapes are made up of a set of mathematical points which have no size. The rendering of these shapes on the display device is usually composed of pixels, which are roughly square, and are specified in "device coordinates". Device coordinates are calculated by transforming the user-supplied coordinates by each of the following:</P>
<UL>
<LI>The user-supplied transformation
<LI>The medium transformation
<LI>The transformation that maps from the sheet to the display device
</UL>
<P><B>Note:</B> If the last of these is a pure translation that translates by an integer multiple of device units, then it has no effect on the rendering other than placement of the figure drawn on the display device.</P>
<P>Roughly speaking, a pixel is affected by drawing a shape only when it is inside that shape. Since pixels are little squares, and the abstract points in an idealized geometric shape have no size, most shapes will have many pixels that lie only partially inside the shape. It is important, therefore, to describe which pixels will be affected when rendering a shape, and which will not. </P>
<P>On devices that support color or grayscale, the rendering engine uses anti-aliasing techniques to render pixels that lie only partially inside the shape. That is, the affected pixels are drawn a little lighter than pixels that are wholly within the shape, the precise shade depending on how much of it is inside the shape. </P>
<P>The conventions used by DUIM are the same as the conventions used by X11:</P>
<UL>
<LI><A NAME=MARKER-10-4139></A>A pixel is a addressed by its upper-left corner.
<LI>A pixel is considered to be inside a shape, and hence affected by the rendering of that shape, if the center of the pixel is inside the shape. If the center of the pixel lies exactly on the boundary of the shape, it is considered to be inside the shape if the inside of the shape is immediately to the right of the center point of the pixel (that is, an increasing x direction on the display device). If the center of the pixel lies exactly on a horizontal boundary, it is considered to be inside the shape if the inside of the shape is immediately below the center point of the pixel (that is, an increasing y direction on the display device). This situation is illustrated in <A HREF="#MARKER-9-3903">Figure 6.1</A>.
<LI>An unfilled idealized geometric shape is drawn by calculating an artificial area for the shape, and then deciding which pixels are inside or outside that area, using the rules described above. The artificial area is calculated by taking the filled shape consisting of those points that are within half the line thickness from the outline curve (using a normal distance function, that is, the length of the line drawn at right angles to the tangent to the outline curve at the nearest point). To visualize this, imagine a filled shape the same size as the unfilled shape, and overlay on this filled shape an identical, but slightly smaller, unfilled shape.
<TABLE BORDER=1><CAPTION></UL>
<P>Figure 6.1   <A NAME=MARKER-9-3903></A>How pixels are defined to be "inside" and "outside" shapes</P>
</CAPTION><TR VALIGN=TOP><TD><P> <IMG ALIGN=TOP SRC=dr53ima5.gif></P>
</TD></TR></TABLE><P>It is important to note that these rules imply that the decision point used for insideness checking is offset from the point used for addressing the pixel by half a device unit in both the x and y directions. It is worth considering the motivations for these conventions.</P>
<P>When two shapes share a common edge, it is important that only one of the shapes own any pixel. The two triangles in <A HREF="#MARKER-9-3902">Figure 6.2</A> illustrate this. The pixels along the diagonal belong to the lower figure. When the decision point of the pixel (its center) lies to one side of the line or the other, there is no issue. When the boundary passes through a decision point, which side the inside of the figure is on is used to decide. </P>
<TABLE BORDER=1><CAPTION><P>Figure 6.2   <A NAME=MARKER-9-3902></A>Two triangles</P>
</CAPTION><TR VALIGN=TOP><TD><P> <IMG ALIGN=TOP SRC=dr53ima6.gif></P>
</TD></TR></TABLE><P>The reason for choosing the decision point half a pixel offset from the address point is to reduce the number of common figures (such as rectilinear lines and rectangles with integral coordinates) that invoke the boundary condition rule. This usually leads to more symmetrical results. For instance, shows a circle drawn when the decision point is the same as the address point. The four lighter points are indeterminate: it is not clear whether they are inside or outside the shape. Since each boundary case is determined according to which side has the figure on it, and since the same rule must be applied uniformly for all figures, there is no choice but to pick only two of the four points, leading to an undesirable lopsided figure.</P>
<TABLE BORDER=1><CAPTION><P>Figure 6.3   <A NAME=MARKER-9-3904></A>Choosing any two of the shaded pixels causes asymmetry</P>
</CAPTION><TR VALIGN=TOP><TD><P> <IMG ALIGN=TOP SRC=dr53ima7.gif></P>
</TD></TR></TABLE><P>If all four boundary points had been chosen instead, the result would be a symmetrical figure. However, since this figure is symmetrical about a whole pixel, it is one pixel wider than it ought to be. The problem with this can be seen clearly in <A HREF="#MARKER-9-3905">Figure 6.4</A>, in which a circle is drawn over a square. In the left-hand figure, the decision point is at the center of the pixel, but in the right-hand figure, it is not.</P>
<TABLE BORDER=1><CAPTION><P>Figure 6.4   <A NAME=MARKER-9-3905></A>Two forms of a circle inscribed in a square</P>
</CAPTION><TR VALIGN=TOP><TD><P> <IMG ALIGN=TOP SRC=dr53ima8.gif></P>
</TD></TR></TABLE><P>It is for this reason that the decision point is at the center of the pixel. This draws circles that look like the one in <A HREF="#MARKER-9-3906">Figure 6.5</A>. </P>
<TABLE BORDER=1><CAPTION><P>Figure 6.5   <A NAME=MARKER-9-3906></A>An aesthetically pleasing circle</P>
</CAPTION><TR VALIGN=TOP><TD><P> <IMG ALIGN=TOP SRC=dr53ima9.gif></P>
</TD></TR></TABLE><P>A consequence of these rendering conventions is that, when the start or end coordinate (minus half the line thickness, if the shape is a path) is not an integer, then rendering is not symmetric under reflection transformations. Thus, to correctly and portably draw an outline of thickness 1 around a (rectilinear) rectangular area with integral coordinates, the outline path must have half-integral coordinates. Drawing rectilinear areas whose boundaries are not on pixel boundaries cannot be guaranteed to be portable. In other words, the "control points" for a rectangular area are at the corners, while the control points for a rectilinear path are in the center of the path, not at the corners. Therefore, in order for a path and an area to abut seamlessly, the coordinates of the path must be offset from the coordinates of the area by half the thickness of the path.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC --><DL>
<DL>
<DT><A REL=BELOW HREF="dref_536.htm#HEADING536-0"><B>6.4.1  </B> - Permissible alternatives during rendering</A>
<DD>
</DL>
</DL>


</DIV>

<HR>
<ADDRESS>Functional Developer Library Reference: DUIM - 3 Dec 1998</ADDRESS>
<P><A HREF="dref_536.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dref_534.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dref_531.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dref_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dref_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dref_991.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
