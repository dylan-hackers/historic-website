<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dguid_34.htm">
<LINK REL=PREV HREF="dguid_34.htm">
<LINK REL=NEXT HREF="dguid_36.htm">
<TITLE>5.1   Defining the underlying data structures for tasks</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING35></A>

<DIV>
<P><A HREF="dguid_36.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_34.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_34.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5 Adding Callbacks to the Application</P>

</DIV>
<A NAME=HEADING35-0></A>
<A NAME=UID-callbacks-890070></A>
<H1>5.1   <A NAME=MARKER-2-246></A><A NAME=MARKER-9-247></A>Defining the underlying data structures for tasks</H1>
<P>Before defining any real callbacks, it is time to consider how you can represent task lists, and the information contained in them. This is essential, not just for handling tasks within the application, but for saving task lists to disk, and loading them back into the application.</P>
<P>Add the code described in this section to <CODE>task-list.dylan</CODE>.</P>
<P>There are two basic kinds of object that you need to model: task lists and tasks. A task list is a collection of one or more tasks. The best way to represent these is by defining a <CODE>&lt;task-list&gt;</CODE> class and a <CODE>&lt;task&gt;</CODE> class.</P>
<P>The definition of <CODE>&lt;task-list&gt;</CODE>, below, contains three slots:</P>
<DL>
<DT><CODE>task-list-tasks</CODE> <DD><P></P>
<DT><DD>This slot specifies a sequence of tasks that are contained in the task list. Each object in the sequence will be an instance of <CODE>&lt;task&gt;</CODE>. The default for new task lists is an empty stretchy vector. An init-keyword has been specified so that this slot can be set when an instance of the class is initialized.
<DT><CODE>task-list-filename</CODE> <DD><P></P>
<DT><DD>This slot specifies the file on disk to which the task list has been saved, if it has been saved at all. The default for new task lists is <CODE>#f</CODE>, since the task list has not yet been saved to disk. An init-keyword has been specified so that this slot can be set when an instance of the class is initialized.
<DT><CODE>task-list-modified?</CODE> <DD><P></P>
<DT><DD>The purpose for this slot is less obvious. It is useful to flag whether or not a task list has been modified so that, for instance, the <B>Save</B> command in the application can be disabled if the task list is unmodified. There is no init-keyword defined for this class, because you only ever want to use the supplied default value for new instances of <CODE>&lt;task-list&gt;</CODE>.
</DL>
<PRE>
define class &lt;task-list&gt; (&lt;object&gt;)
  constant slot task-list-tasks = make(&lt;stretchy-vector&gt;),
    init-keyword: tasks:;
  slot task-list-filename :: false-or(&lt;string&gt;) = #f,
    init-keyword: filename:;
  slot task-list-modified? :: &lt;boolean&gt; = #f;
end class &lt;task-list&gt;;
<P></P>
</PRE>
<P>Next, consider the information that needs to be encoded in each individual task. There are two pieces of information that need to be recorded:</P>
<UL>
<LI>The text of the task, which should be a string.
<LI>The priority, which should be one of high, medium, or low.
</UL>
<P>Priorities can be recorded using a constant, as shown below:</P>
<PRE>
define constant &lt;priority&gt; = one-of(#&quot;low&quot;, #&quot;medium&quot;, #&quot;high&quot;);
<P></P>
</PRE>
<P>Notice that it is most straightforward to encode each priority as a symbol. Later on, you will see how you can use <CODE>as</CODE> to convert each symbol to a format that can be saved to disk and read back into the application as a symbol.</P>
<P>The <CODE>&lt;task&gt;</CODE> class can then be defined as having two slots: one for the task text itself, and another for the priority. Both have init-keywords so that they can be specified when a new instance is created, and both init-keywords are required; they must be specified whenever a task is created.</P>
<PRE>
define class &lt;task&gt; (&lt;object&gt;)
  slot task-name :: &lt;string&gt;,
    required-init-keyword: name:;
  slot task-priority :: &lt;priority&gt;,
    required-init-keyword: priority:;
end class &lt;task&gt;;
<P></P>
</PRE>
<P>These three definitions are all that is needed to be able to represent tasks and task lists within the task list application.</P>
<P>In order to handle tasks effectively in the GUI of the task list manager, some changes are necessary to the definition of the <CODE>task-list</CODE> pane in the definition of <CODE>&lt;task-frame&gt;</CODE>. These changes are needed to ensure that information about tasks is passed to the <CODE>task-list</CODE> pane correctly. Make these changes to the existing definition in the file <CODE>frame.dylan</CODE>.</P>
<P>In <A HREF="dguid_33.htm#MARKER-9-211">Section 4.3 on page 35</A>, the definition of <CODE>task-list</CODE> was given as:</P>
<PRE>
// definition of list
  pane task-list (frame)
    make (&lt;list-box&gt;, items: #(), lines: 15,
          activate-callback: not-yet-implemented);
<P></P>
</PRE>
<P>First, you need to ensure that the items passed to <CODE>task-list</CODE> are the tasks in the <CODE>&lt;task-list&gt;</CODE> associated with the frame. Recall that a <CODE>frame-task-list</CODE> slot was specified in the definition of <CODE>&lt;task-frame&gt;</CODE>; this slot is used to hold the instance of <CODE>&lt;task-list&gt;</CODE> that is associated with the <CODE>&lt;task-frame&gt;</CODE>. The sequence of tasks contained in the associated <CODE>frame-task-list</CODE> can then be found using the <CODE>frame-task-list.task-list-tasks</CODE> accessor. To display these tasks in the <CODE>task-list</CODE> pane, the <CODE>items:</CODE> init-keyword needs to be set to the value of this accessor:</P>
<PRE>
items: frame.frame-task-list.task-list-tasks,
<P></P>
</PRE>
<P>Next, you need to ensure that the label for each task in the <CODE>task-list</CODE> pane is the text of the task itself. As described above, the text of any task is stored in its <CODE>task-name</CODE> slot. In order to display this text as the label for every item in the list box, you need to specify the <CODE>task-name</CODE> slot as the <CODE>gadget-label-key</CODE> of the list box. A label key is a function that is used to calculate the label of each item in a gadget, and it can be specified using the <CODE>label-key:</CODE> init-keyword:</P>
<PRE>
label-key: task-name,
<P></P>
</PRE>
<P>This gives the following new definition for the <CODE>task-list</CODE> pane:</P>
<PRE>
// definition of list
  pane task-list (frame)
    make (&lt;list-box&gt;,
          items: frame.frame-task-list.task-list-tasks,
          label-key: task-name,
          lines: 15,
          activate-callback: not-yet-implemented);
<P></P>
</PRE>
<P>There is one final change that still needs to be made to this pane definition. This is described in <A HREF="dguid_47.htm#MARKER-9-292">Section 5.3.3 on page 64</A>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dguid_36.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_34.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_34.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
