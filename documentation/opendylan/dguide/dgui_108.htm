<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dgui_107.htm">
<LINK REL=PREV HREF="dgui_107.htm">
<LINK REL=NEXT HREF="dgui_109.htm">
<TITLE>A.1   A task list manager using menu gadgets</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING108></A>

<DIV>
<P><A HREF="dgui_109.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dgui_107.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dgui_107.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>A Source Code For The Task List Manager</P>

</DIV>
<A NAME=HEADING108-0></A>
<H1>A.1   <A NAME=MARKER-10-611></A><A NAME=MARKER-2-612></A><A NAME=MARKER-2-613></A><A NAME=MARKER-2-614></A><A NAME=MARKER-9-615></A>A task list manager using menu gadgets</H1>
<P>This section contains the complete source code to the first complete design of the task list manager, described in Chapters <A HREF="dguid_19.htm#MARKER-9-149">3</A> to <A HREF="dguid_34.htm#MARKER-9-245">5</A>. To load this code into the environment, choose <B>Tools &gt; Open Example Project</B> from any window in the environment. The code in this section can be loaded by choosing Task List 1 in the Documentation category of the Open Example Project dialog.</P>
<P>Contents of the file <CODE>frame.dylan</CODE>:</P>
<PRE>
Module:    task-list
Synopsis:  Task List Manager.
Author:    Harlequin Group plc
Copyright: (C) 1998, Harlequin Group plc.  All rights reserved.

define constant $priority-items
  = #(#(&quot;Low&quot;, #&quot;low&quot;),
      #(&quot;Medium&quot;, #&quot;medium&quot;),
      #(&quot;High&quot;, #&quot;high&quot;));

define frame &lt;task-frame&gt; (&lt;simple-frame&gt;)
  slot frame-task-list :: &lt;task-list&gt; = make(&lt;task-list&gt;);

// definition of menu bar
  pane task-menu-bar (frame)
    make(&lt;menu-bar&gt;,
         children: vector(frame.file-menu, 
                          frame.edit-menu,  
                          frame.task-menu,  
                          frame.help-menu));
// definition of menus
  pane file-menu (frame)
    make(&lt;menu&gt;, label: &quot;File&quot;,
         children: vector(frame.open-menu-button,
                          frame.save-menu-button,
                          frame.save-as-menu-button,
                          frame.exit-menu-button));
  pane edit-menu (frame)
    make(&lt;menu&gt;, label: &quot;Edit&quot;,
         children: vector(frame.cut-menu-button,
                          frame.copy-menu-button,
                          frame.paste-menu-button));
  pane task-menu (frame)
    make(&lt;menu&gt;, label: &quot;Task&quot;,
         children: vector(frame.add-menu-button,
                          frame.remove-menu-button));
  pane help-menu (frame)
    make(&lt;menu&gt;, label: &quot;Help&quot;,
         children: vector(frame.about-menu-button));

// definition of menu buttons

  // Commands in the File menu
  pane open-menu-button (frame)
    make(&lt;menu-button&gt;, label: &quot;Open...&quot;,
         activate-callback: open-file,
         accelerator: make-keyboard-gesture(#&quot;o&quot;, #&quot;control&quot;),
         documentation: &quot;Opens an existing file.&quot;);
  pane save-menu-button (frame)
    make(&lt;menu-button&gt;, label: &quot;Save&quot;,
         activate-callback: save-file,
         accelerator: make-keyboard-gesture(#&quot;s&quot;, #&quot;control&quot;),
         documentation: &quot;Saves the current file to disk.&quot;);
  pane save-as-menu-button (frame)
    make(&lt;menu-button&gt;, label: &quot;Save As...&quot;,
         activate-callback: save-as-file,
         documentation: 
           &quot;Saves the current file with a new name.&quot;);
  pane exit-menu-button (frame)
    make(&lt;menu-button&gt;, label: &quot;Exit&quot;,
         activate-callback: exit-task,
         accelerator: make-keyboard-gesture(#&quot;f4&quot;, #&quot;alt&quot;),
         documentation: &quot;Exits the application.&quot;);

  //Commands in the Edit menu
  pane cut-menu-button (frame)
    make(&lt;menu-button&gt;, label: &quot;Cut&quot;,
         activate-callback: not-yet-implemented,
         accelerator: make-keyboard-gesture(#&quot;x&quot;, #&quot;control&quot;),
         documentation: &quot;Cut the selection to the clipboard.&quot;);
  pane copy-menu-button (frame)
    make(&lt;menu-button&gt;, label: &quot;Copy&quot;,
         activate-callback: not-yet-implemented,
         accelerator: make-keyboard-gesture(#&quot;c&quot;, #&quot;control&quot;),
         documentation: &quot;Copy the selection to the clipboard.&quot;);
  pane paste-menu-button (frame)
    make(&lt;menu-button&gt;, label: &quot;Paste&quot;,
         activate-callback: not-yet-implemented,
         accelerator: make-keyboard-gesture(#&quot;v&quot;, #&quot;control&quot;),
         documentation: &quot;Paste the selection in the clipboard at the current position.&quot;);

  //Commands in the Task menu
  pane add-menu-button (frame)
    make(&lt;menu-button&gt;, label: &quot;Add...&quot;,
         activate-callback: frame-add-task,
         accelerator: make-keyboard-gesture
                        (#&quot;a&quot;, #&quot;control&quot;, #&quot;shift&quot;),
         documentation: &quot;Add a new task.&quot;);
  pane remove-menu-button (frame)
    make(&lt;menu-button&gt;, label: &quot;Remove&quot;,
         activate-callback: frame-remove-task,
         accelerator: make-keyboard-gesture
                        (#&quot;d&quot;, #&quot;control&quot;, #&quot;shift&quot;),
         documentation: 
           &quot;Remove the selected task from the list.&quot;);

  //Commands in the Help menu
  pane about-menu-button (frame)
    make(&lt;menu-button&gt;, label: &quot;About&quot;,
         activate-callback: about-task,
         accelerator: make-keyboard-gesture(#&quot;f1&quot;),
         documentation: 
           &quot;Display information about the application.&quot;);

// definition of buttons
  pane add-button (frame)
    make(&lt;push-button&gt;, label: &quot;Add task&quot;,
         activate-callback: frame-add-task);
  pane remove-button (frame)
    make(&lt;push-button&gt;, label: &quot;Remove task&quot;,
         activate-callback: frame-remove-task);
  pane open-button (frame)
    make(&lt;push-button&gt;, label: &quot;Open file&quot;,
         activate-callback: open-file);
  pane save-button (frame)
    make(&lt;push-button&gt;, label: &quot;Save file&quot;,
         activate-callback: save-file);

// definition of radio box
  pane priority-box (frame)
    make (&lt;radio-box&gt;,
          items: $priority-items,
          orientation: #&quot;horizontal&quot;,
          label-key: first,
          value-key: second,
          value: #&quot;medium&quot;,
          activate-callback: not-yet-implemented);

// definition of tool bar
  pane task-tool-bar (frame)
    make(&lt;tool-bar&gt;,
         child: horizontally ()
                  frame.open-button;
                  frame.save-button;
                  frame.add-button;
                  frame.remove-button
                end); 

// definition of status bar
  pane task-status-bar (frame)
    make(&lt;status-bar&gt;, label: &quot;Task Manager&quot;);

// definition of list
  pane task-list (frame)
    make (&lt;list-box&gt;,
          items: frame.frame-task-list.task-list-tasks,
          label-key: task-name,
          lines: 15,
          value-changed-callback: note-task-selection-change);

// main layout
  pane task-layout (frame)
    vertically ()
      frame.task-list; 
      frame.priority-box;
    end;

// activation of frame elements
  layout (frame) frame.task-layout;
  tool-bar (frame) frame.task-tool-bar;
  status-bar (frame) frame.task-status-bar;
  menu-bar (frame) frame.task-menu-bar;

// frame title
  keyword title: = &quot;Task List Manager&quot;;
end frame &lt;task-frame&gt;;

define method initialize
    (frame :: &lt;task-frame&gt;, #key) =&gt; ()
  next-method();
  refresh-task-frame(frame);
end method initialize;

define method prompt-for-task 
   (#key title = &quot;Type text of new task&quot;, owner)
 =&gt; (name :: false-or(&lt;string&gt;), 
     priority :: false-or(&lt;priority&gt;))
  let task-text
    = make(&lt;text-field&gt;, 
           label: &quot;Task text:&quot;,
           activate-callback: exit-dialog);
  let priority-field
    = make(&lt;radio-box&gt;,
           items: $priority-items,
           label-key: first,
           value-key: second,
           value: #&quot;medium&quot;);
  let frame-add-task-dialog
    = make(&lt;dialog-frame&gt;, 
           title: title,
           owner: owner,
           layout: vertically ()
                     task-text;
                     priority-field
                   end,
           input-focus: task-text);
  if (start-dialog(frame-add-task-dialog))
    values(gadget-value(task-text), gadget-value(priority-field))
  end
end method prompt-for-task;

define function make-keyboard-gesture
    (keysym :: &lt;symbol&gt;, #rest modifiers)
 =&gt; (gesture :: &lt;keyboard-gesture&gt;)
  make(&lt;keyboard-gesture&gt;, keysym: keysym, modifiers: modifiers)
end function make-keyboard-gesture;

define function not-yet-implemented (gadget :: &lt;gadget&gt;) =&gt; ()
  notify-user(&quot;Not yet implemented!&quot;, owner: sheet-frame(gadget))
end function not-yet-implemented;

define method start-task () =&gt; ()
  let frame
    = make(&lt;task-frame&gt;);
  start-frame(frame);
end method start-task;

define method frame-add-task (gadget :: &lt;gadget&gt;) =&gt; ()
  let frame = sheet-frame(gadget);
  let task-list = frame-task-list(frame);
  let (name, priority) = prompt-for-task(owner: frame);
  if (name &amp; priority)
    let new-task = make(&lt;task&gt;, name: name, priority: priority);
    add-task(task-list, new-task);
    refresh-task-frame(frame);
    frame-selected-task(frame) := new-task
  end
end method frame-add-task;

define method frame-remove-task (gadget :: &lt;gadget&gt;) =&gt; ()
  let frame = sheet-frame(gadget);
  let task = frame-selected-task(frame);
  let task-list = frame-task-list(frame);
  if (notify-user(format-to-string
                    (&quot;Really remove task %s&quot;, task.task-name),
                  owner: frame, style: #&quot;question&quot;))
    frame-selected-task(frame) := #f;
    remove-task(task-list, task);
    refresh-task-frame(frame)
  end
end method frame-remove-task;

define method frame-selected-task
    (frame :: &lt;task-frame&gt;) =&gt; (task :: false-or(&lt;task&gt;))
  let list-box = task-list(frame);
  gadget-value(list-box)
end method frame-selected-task;

define method frame-selected-task-setter
    (task :: false-or(&lt;task&gt;), frame :: &lt;task-frame&gt;)
 =&gt; (task :: false-or(&lt;task&gt;))
  let list-box = task-list(frame);
  gadget-value(list-box) := task;
  note-task-selection-change(frame);
  task
end method frame-selected-task-setter;

define method refresh-task-frame
    (frame :: &lt;task-frame&gt;) =&gt; ()
  let list-box = frame.task-list;
  let task-list = frame.frame-task-list;
  let modified? = task-list.task-list-modified?;
  let tasks = task-list.task-list-tasks;
  if (gadget-items(list-box) == tasks)
    update-gadget(list-box)
  else
    gadget-items(list-box) := tasks
  end;
  gadget-enabled?(frame.save-button) := modified?;
  gadget-enabled?(frame.save-menu-button) := modified?;
  note-task-selection-change(frame);
end method refresh-task-frame;

define method note-task-selection-change
    (gadget :: &lt;gadget&gt;) =&gt; ()
  let frame = gadget.sheet-frame;
  note-task-selection-change(frame)
end method note-task-selection-change;

define method note-task-selection-change
    (frame :: &lt;task-frame&gt;) =&gt; ()
  let task = frame-selected-task(frame);
  if (task)
    frame.priority-box.gadget-value := task.task-priority;
  end;
  let selection? = (task ~= #f);
  frame.remove-button.gadget-enabled? := selection?;
  frame.remove-menu-button.gadget-enabled? := selection?;
end method note-task-selection-change;

define method open-file
    (gadget :: &lt;gadget&gt;) =&gt; ()
  let frame = sheet-frame(gadget);
  let task-list = frame-task-list(frame);
  let filename
    = choose-file(frame: frame,
                  default: task-list.task-list-filename,
                  direction: #&quot;input&quot;);
  if (filename)
    let task-list = load-task-list(filename);
    if (task-list)
      frame.frame-task-list := task-list;
      refresh-task-frame(frame)
    else
      notify-user
        (format-to-string(&quot;Failed to open file %s&quot;, filename),
         owner: frame)
    end
  end
end method open-file;

define method save-file
    (gadget :: &lt;gadget&gt;) =&gt; ()
  let frame = sheet-frame(gadget);
  let task-list = frame-task-list(frame);
  save-as-file(gadget, filename: task-list.task-list-filename)
end method save-file;

define method save-as-file
    (gadget :: &lt;gadget&gt;, #key filename) =&gt; ()
  let frame = sheet-frame(gadget);
  let task-list = frame-task-list(frame);
  let filename
    = filename
        | choose-file(frame: frame,
                      default: task-list.task-list-filename,
                      direction: #&quot;output&quot;);
  if (filename)
    if (save-task-list(task-list, filename: filename))
      frame.frame-task-list := task-list;
      refresh-task-frame(frame)
    else
      notify-user(format-to-string
                    (&quot;Failed to save file %s&quot;, filename),
                  owner: frame)
    end
  end
end method save-as-file;

define function about-task (gadget :: &lt;gadget&gt;) =&gt; ()
  notify-user(&quot;Task List Manager&quot;, owner: sheet-frame(gadget))
end function about-task;

define method exit-task (gadget :: &lt;gadget&gt;) =&gt; ()
  let frame = sheet-frame(gadget);
  let task-list = frame-task-list(frame);
  save-file (gadget);
  exit-frame(frame)
end method exit-task;

define method main (arguments :: &lt;sequence&gt;) =&gt; ()
// handle the arguments
  start-task();
end method main;

begin
  main(application-arguments()) // Start the application!
end;
</PRE>
<P>Contents of the file <CODE>task-list.dylan</CODE>:</P>
<PRE>
Module:    task-list
Synopsis:  Task List Manager.
Author:    Harlequin Group plc
Copyright: (C) 1998, Harlequin Group plc.  All rights reserved.

define class &lt;task-list&gt; (&lt;object&gt;)
  constant slot task-list-tasks = make(&lt;stretchy-vector&gt;),
    init-keyword: tasks:;
  slot task-list-filename :: false-or(&lt;string&gt;) = #f,
    init-keyword: filename:;
  slot task-list-modified? :: &lt;boolean&gt; = #f;
end class &lt;task-list&gt;;

define constant &lt;priority&gt; = one-of(#&quot;low&quot;, #&quot;medium&quot;, #&quot;high&quot;);

define class &lt;task&gt; (&lt;object&gt;)
  slot task-name :: &lt;string&gt;,
    required-init-keyword: name:;
  slot task-priority :: &lt;priority&gt;,
    required-init-keyword: priority:;
end class &lt;task&gt;;

define function add-task
    (task-list :: &lt;task-list&gt;, task :: &lt;task&gt;) =&gt; ()
  add!(task-list.task-list-tasks, task);
  task-list.task-list-modified? := #t
end function add-task;

define function remove-task
    (task-list :: &lt;task-list&gt;, task :: &lt;task&gt;) =&gt; ()
  remove!(task-list.task-list-tasks, task);
  task-list.task-list-modified? := #t
end function remove-task;

define function save-task-list
    (task-list :: &lt;task-list&gt;, #key filename)
 =&gt; (saved? :: &lt;boolean&gt;)
  let filename = filename | task-list-filename(task-list);
  with-open-file (stream = filename, direction: #&quot;output&quot;)
    for (task in task-list.task-list-tasks)
      format(stream, &quot;%s\n%s\n&quot;,
             task.task-name, as(&lt;string&gt;, task.task-priority))
    end
  end;
  task-list.task-list-modified? := #f;
  task-list.task-list-filename := filename;
  #t
end function save-task-list;

define function load-task-list
   (filename :: &lt;string&gt;) =&gt; (task-list :: false-or(&lt;task-list&gt;))
  let tasks = make(&lt;stretchy-vector&gt;);
  block (return)
    with-open-file (stream = filename, direction: #&quot;input&quot;)
      while (#t)
        let name = read-line(stream, on-end-of-stream: #f);
        unless (name) return() end;
        let priority = read-line(stream, on-end-of-stream: #f);
        unless (priority) 
          error(&quot;Unexpectedly missing priority!&quot;) 
        end;
        let task = make(&lt;task&gt;, name: name, 
                        priority: as(&lt;symbol&gt;, priority));
        add!(tasks, task)
      end
    end
  end;
//  debug-message(&quot;Tasks: %=&quot;, tasks);
  make(&lt;task-list&gt;, tasks: tasks, filename: filename)
end function load-task-list;
<P></P>
</PRE>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dgui_109.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dgui_107.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dgui_107.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
