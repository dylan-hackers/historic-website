<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dguid_19.htm">
<LINK REL=PREV HREF="dguid_23.htm">
<LINK REL=NEXT HREF="dguid_25.htm">
<TITLE>3.5   Adding a tool bar</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING24></A>

<DIV>
<P><A HREF="dguid_25.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_23.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_19.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>3 Improving The Design</P>

</DIV>
<A NAME=HEADING24-0></A>
<A NAME=UID-improve-889515></A>
<H1>3.5   <A NAME=MARKER-2-163></A><A NAME=MARKER-2-164></A><A NAME=MARKER-9-165></A>Adding a tool bar</H1>
<P>So far, you have seen how to experiment interactively to create an initial interface design. You have also seen how you can take that initial design and turn it into a more rigorous definition, for use within project source code, using a frame class. However, the design of the interface still leaves a lot to be desired, and the application still does not do anything. In this section, you start to look at improving the overall design of the interface. </P>
<P>To begin with, add a tool bar to the interface of the application. Most modern applications have a tool bar that runs along the top edge of the main application window, beneath the application menu bar. Tool bars contain a number of buttons that give you quick access to some of the most common commands in the application. Each button has a label that designates its use, or, more often, a small icon. Although you have already added buttons to the interface that perform important tasks, they have the appearance of buttons in a dialog box, rather than buttons in the main window of an application. The solution is to use a tool bar.</P>
<P>Adding a tool bar to the definition of a frame class is very similar to defining the overall layout of the panes in a frame class. You need to create the tool bar as a pane in the frame definition, and then incorporate it using the <CODE>tool-bar</CODE> clause, as shown below:</P>
<PRE>
pane task-tool-bar (frame)
  make(&lt;tool-bar&gt;, child: ...);
  // more definitions here
tool-bar (frame) frame.task-tool-bar;
<P></P>
</PRE>
<P>A tool bar has a layout as its child, and each button in the tool bar is defined as a child of that layout. You can either define each button within the definition of the tool bar itself, or, more appropriately, define each button as a pane in the frame, and then refer to the names of these panes in the tool bar definition.</P>
<P>In fact, the buttons you defined in the earlier interface design can be used just as easily in a tool bar as they can within the main layout of the application itself. However, first you must remove the buttons from the task-layout pane of the definition of <CODE>&lt;task-frame&gt;</CODE>. (If you fail to do this, DUIM attempts to use the same buttons in two different parts of the interface, with undefined results.) A complete definition of a simple tool bar containing two buttons is as follows:</P>
<PRE>
pane task-tool-bar (frame)
  make(&lt;tool-bar&gt;, child: horizontally ()
                            frame.add-button;
                            frame.remove-button
                          end);
<P></P>
// more definitions here
<P></P>
tool-bar (frame) frame.task-tool-bar;
<P></P>
</PRE>
<P>A tool bar that only contains two buttons is on the lean side, however, so let's add two more buttons to open a file and save a file to disk. </P>
<PRE>
pane open-button (frame)
  make(&lt;push-button&gt;, label: &quot;Open file&quot;,
       activate-callback: not-yet-implemented);
pane save-button (frame)
  make(&lt;push-button&gt;, label: &quot;Save file&quot;,
       activate-callback: not-yet-implemented);

// more definitions here

pane task-tool-bar (frame)
  make(&lt;tool-bar&gt;,
       child: horizontally ()
                frame.open-button;
                frame.save-button;
                frame.add-button;
                frame.remove-button
              end); 
// more definitions here
tool-bar (frame) frame.task-tool-bar;
<P></P>
</PRE>
<P>More commonly, an icon is used to label buttons in a tool bar, rather than a text label. You can do this by supplying an instance of <CODE>&lt;image&gt;</CODE> to the <CODE>label:</CODE> init-keyword when you define the button, rather than an instance of <CODE>&lt;string&gt;</CODE>.</P>
<P><A NAME=MARKER-10-166></A>So now the application has a tool bar. Somewhat oddly, it does not yet have a menu bar or a system of menus -- most tool bars represent a subset of the commands already available from the application's menu system. A menu system is added to the task list manager in <A HREF="dguid_28.htm#MARKER-9-195">Chapter 4, "Adding Menus To The Application"</A>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dguid_25.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_23.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_19.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
