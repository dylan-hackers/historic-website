<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dguid_44.htm">
<LINK REL=PREV HREF="dguid_44.htm">
<LINK REL=NEXT HREF="dguid_46.htm">
<TITLE>5.3.2.1   DUIM support for adding and removing tasks</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING45></A>

<DIV>
<P><A HREF="dguid_46.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_44.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_44.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5.3.2   Adding and removing tasks from the task list</P>

</DIV>
<A NAME=HEADING45-0></A>
<H1>5.3.2.1   <A NAME=MARKER-2-279></A><A NAME=MARKER-2-280></A><A NAME=MARKER-2-281></A><A NAME=MARKER-2-282></A><A NAME=MARKER-2-283></A><A NAME=MARKER-2-284></A><A NAME=MARKER-2-285></A><A NAME=MARKER-9-286></A>DUIM support for adding and removing tasks</H1>
<P>This section describes the methods necessary to provide support in the task list manager GUI for adding and removing tasks.</P>
<P>Add the code described in this section to <CODE>frame.dylan</CODE>.</P>
<P>The code for <CODE>frame-add-task</CODE> is as follows:</P>
<PRE>
define method frame-add-task (gadget :: &lt;gadget&gt;) =&gt; ()
  let frame = sheet-frame(gadget);
  let task-list = frame-task-list(frame);
  let (name, priority) = prompt-for-task(owner: frame);
  if (name &amp; priority)
    let new-task = make(&lt;task&gt;, name: name, priority: priority);
    add-task(task-list, new-task);
    refresh-task-frame(frame);
    frame-selected-task(frame) := new-task
  end
end method frame-add-task;
<P></P>
</PRE>
<P>The method takes a gadget as an argument and returns no values. The argument is the gadget which is used to invoke it, which in the case of the task list manager means either <CODE>add-menu-button</CODE> (in the <B>Task</B> menu of the application) or <CODE>add-button</CODE> (on the tool bar). The <CODE>frame-add-task</CODE> method then sets a number of local variables:</P>
<DL>
<DT><CODE>frame</CODE><DD><P> The frame containing the gadget passed as an argument. </P>
<DT><CODE>task-list</CODE><DD><P> The value of the <CODE>frame-task-list</CODE> slot for <CODE>frame</CODE>. This identifies the instance of <CODE>&lt;task-list&gt;</CODE> to which a task is to be added.</P>
<DT><CODE>name</CODE><DD><P> The text of the task to be added. </P>
<DT><CODE>priority</CODE><DD><P> The priority of the task to be added.</P>
</DL>
<P>As with other DUIM methods you have seen, <CODE>frame</CODE> and <CODE>task-list</CODE> are specified using known slot values about the gadget supplied to <CODE>frame-add-task</CODE>, and the frame that contains the gadget. The <CODE>name</CODE> and <CODE>priority</CODE> values are specified by calling the <CODE>prompt-for-task</CODE> method defined in <A HREF="dguid_27.htm#MARKER-9-175">Section 3.8 on page 25</A>. This method displays a dialog into which the user types the text for the new task and chooses the priority, both of which values are returned from <CODE>prompt-for-task</CODE>.</P>
<P>Once all the local variables have been specified, the main body of code for the method, repeated below, is executed. </P>
<PRE>
if (name &amp; priority)
  let new-task = make(&lt;task&gt;, name: name, priority: priority);
  add-task(task-list, new-task);
  refresh-task-frame(frame);
  frame-selected-task(frame) := new-task
end
<P></P>
</PRE>
<P>This consists of four expressions around which is wrapped an <CODE>if</CODE> statement. </P>
<DL>
<DT><DD>1.  The first expression creates a new task from the values of the <CODE>name</CODE> and <CODE>priority</CODE> local variables.
<DT><DD>2.  The second expression adds the new task to task list, by calling the <CODE>add-task</CODE> function.
<DT><DD>3.  The third expression refreshes the display of the task list in the task list manager, so that the new task is displayed on the screen once it has been added.
<DT><DD>4.  The fourth expression ensures that the new task is selected in the task list manager. The frame-selected--task method is described in <A HREF="dguid_47.htm#MARKER-9-292">Section 5.3.3 on page 64</A>.
</DL>
<P>The <CODE>if</CODE> statement ensures that all the information needed to construct the new task is specified before the new task is created.</P>
<P>The <CODE>add-task</CODE> function is described in <A HREF="dguid_46.htm#MARKER-9-289">Section 5.3.2.2 on page 63</A>.</P>
<P>The code for <CODE>frame-remove-task</CODE> is as follows:</P>
<PRE>
define method frame-remove-task (gadget :: &lt;gadget&gt;) =&gt; ()
  let frame = sheet-frame(gadget);
  let task = frame-selected-task(frame);
  let task-list = frame-task-list(frame);
  if (notify-user(format-to-string
                    (&quot;Really remove task %s&quot;, task.task-name),
                  owner: frame, style: #&quot;question&quot;))
    frame-selected-task(frame) := #f;
    remove-task(task-list, task);
    refresh-task-frame(frame)
  end
end method frame-remove-task;
<P></P>
</PRE>
<P>As with <CODE>frame-add-task</CODE>, this method takes the gadget that is used to invoke it as an argument and returns no values. In the case of the task list manager, the gadget is either <CODE>remove-menu-button</CODE> (in the <B>Task</B> menu of the application) or <CODE>remove-button</CODE> (on the tool bar). The <CODE>frame-remove-task</CODE> method then sets a number of local variables:</P>
<DL>
<DT><CODE>frame</CODE><DD><P> The frame containing the gadget passed as an argument. </P>
<DT><CODE>task</CODE><DD><P> The task that is to be removed. The task to be removed is the one selected in the list of tasks on screen. The method <CODE>frame-selected-task</CODE> is called to determine which task this is.</P>
<DT><CODE>task-list</CODE><DD><P> The value of the <CODE>frame-task-list</CODE> slot for <CODE>frame</CODE>. This identifies the instance of <CODE>&lt;task-list&gt;</CODE> from which a task is to be removed.</P>
</DL>
<P>The method <CODE>frame-selected-task</CODE> is described in <A HREF="dguid_47.htm#MARKER-9-292">Section 5.3.3 on page 64</A>.</P>
<P>Once these local variables have been set, the rest of the code goes about removing the task. The code consists of three expressions around which is wrapped an <CODE>if</CODE> statement, as shown below. </P>
<PRE>
if (notify-user(format-to-string
                  (&quot;Really remove task %s&quot;, task.task-name),
                owner: frame, style: #&quot;question&quot;))
  frame-selected-task(frame) := #f;
  remove-task(task-list, task);
  refresh-task-frame(frame)
end
<P></P>
</PRE>
<P>Notice here that the method <CODE>notify-user</CODE> is used as the condition in the <CODE>if</CODE> statement: if the call to <CODE>notify-user</CODE> returns <CODE>#t</CODE>, then the subsequent expressions are executed. This use of <CODE>notify-user</CODE> illustrates how you can use the method to generate a yes-no question for the user to answer, by using the <CODE>style:</CODE> init-keyword. You might like to compare the user of <CODE>notify-user</CODE> in this method with its use in <CODE>open-file</CODE> or <CODE>save-as-file</CODE>; essentially, the only difference is in the use of the <CODE>style:</CODE> init-keyword.</P>
<P>If the call to <CODE>notify-user</CODE> returns <CODE>#t</CODE>, then three expressions are executed:</P>
<DL>
<DT><DD>1.  The first calls the setter for <CODE>frame-selected-task</CODE>, to ensure that no items in the task list are selected. 
<DT><DD>2.  The second calls the function <CODE>remove-task</CODE>, which removes task from <CODE>task-list</CODE>. 
<DT><DD>3.  Then, <CODE>refresh-task-frame</CODE> is called to ensure that the task that has been removed is no longer displayed in the list of tasks on the screen.
</DL>
<P>The methods defined for <CODE>frame-selected-task</CODE> are described in <A HREF="dguid_47.htm#MARKER-9-292">Section 5.3.3 on page 64</A>. The function <CODE>remove-task</CODE> is described in <A HREF="dguid_46.htm#MARKER-9-289">Section 5.3.2.2 on page 63</A>. The <CODE>refresh-task-frame</CODE> method is described in <A HREF="dguid_47.htm#MARKER-9-292">Section 5.3.3 on page 64</A>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dguid_46.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_44.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_44.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
