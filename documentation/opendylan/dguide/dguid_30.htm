<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dguid_28.htm">
<LINK REL=PREV HREF="dguid_29.htm">
<LINK REL=NEXT HREF="dguid_31.htm">
<TITLE>4.2   Creating a menu hierarchy</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING30></A>

<DIV>
<P><A HREF="dguid_31.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_29.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_28.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4 Adding Menus To The Application</P>

</DIV>
<A NAME=HEADING30-0></A>
<A NAME=UID-menus-889757></A>
<H1>4.2   <A NAME=MARKER-10-198></A><A NAME=MARKER-2-199></A><A NAME=MARKER-2-200></A><A NAME=MARKER-2-201></A>Creating a menu hierarchy</H1>
<P>As you might expect, creating a menu hierarchy in a frame definition is a matter of defining a series of panes for the frame. At the top-most level in the menu hierarchy is the menu bar itself. The menu bar contains each menu defined for the application and each menu contains the menu commands that themselves perform operations. Once the panes have been defined, the menu bar needs to be included in the frame using the <CODE>menu-bar</CODE> clause.</P>
<P>First of all, you can create a pane that defines the menu bar itself as follows:</P>
<PRE>
pane task-menu-bar (frame)
  make(&lt;menu-bar&gt;,
       children: vector(frame.file-menu, 
                        frame.edit-menu,  
                        frame.task-menu,  
                        frame.help-menu));
<P></P>
</PRE>
<P>Next, define the File and Tasks menus themselves:</P>
<PRE>
pane file-menu (frame)
  make(&lt;menu&gt;, label: &quot;File&quot;,
       children: vector(frame.open-menu-button,
                        frame.save-menu-button,
                        frame.save-as-menu-button,
                        frame.exit-menu-button));

pane edit-menu (frame)
  make(&lt;menu&gt;, label: &quot;Edit&quot;,
       children: vector(frame.cut-menu-button,
                        frame.copy-menu-button,
                        frame.paste-menu-button));

pane task-menu (frame)
  make(&lt;menu&gt;, label: &quot;Task&quot;,
       children: vector(frame.add-menu-button,
                        frame.remove-menu-button));

pane help-menu (frame)
  make(&lt;menu&gt;, label: &quot;Help&quot;,
       children: vector(frame.about-menu-button));
<P></P>
</PRE>
<P>Finally, you need to define the menu commands themselves. A command that appears on a menu is defined as an instance of <CODE>&lt;menu-button&gt;</CODE>, and so there is a strong similarity between these buttons and some of the buttons already defined. DUIM also generates <A NAME=MARKER-2-202></A>mnemonics for each menu item; thus, the items appear as <B>File</B> and <B>Edit</B>, and so forth. (Note that the <CODE>make-keyboard-gesture </CODE>function that appears below is defined in <A HREF="dguid_32.htm#MARKER-9-209">Section 4.2.2, "Keyboard accelerators"</A>.)</P>
<PRE>
// Commands in the File menu
pane open-menu-button (frame)
  make(&lt;menu-button&gt;, label: &quot;Open...&quot;,
       activate-callback: not-yet-implemented,
       accelerator: make-keyboard-gesture(#&quot;o&quot;, #&quot;control&quot;),
       documentation: &quot;Opens an existing file.&quot;);
pane save-menu-button (frame)
  make(&lt;menu-button&gt;, label: &quot;Save&quot;,
       activate-callback: not-yet-implemented,
       accelerator: make-keyboard-gesture(#&quot;s&quot;, #&quot;control&quot;),
       documentation: &quot;Saves the current file to disk.&quot;);
pane save-as-menu-button (frame)
  make(&lt;menu-button&gt;, label: &quot;Save As...&quot;,
       activate-callback: save-as-file,
       documentation: &quot;Saves the current file with a new name.&quot;);
pane exit-menu-button (frame)
  make(&lt;menu-button&gt;, label: &quot;Exit&quot;,
       activate-callback: not-yet-implemented,
       accelerator: make-keyboard-gesture(#&quot;f4&quot;, #&quot;alt&quot;),
       documentation: &quot;Exits the application.&quot;);
<P></P>
//Commands in the Edit menu
pane cut-menu-button (frame)
  make(&lt;menu-button&gt;, label: &quot;Cut&quot;,
       activate-callback: not-yet-implemented,
       accelerator: make-keyboard-gesture(#&quot;x&quot;, #&quot;control&quot;),
       documentation: &quot;Cut the selection to the clipboard.&quot;);
pane copy-menu-button (frame)
  make(&lt;menu-button&gt;, label: &quot;Copy&quot;,
       activate-callback: not-yet-implemented,
       accelerator: make-keyboard-gesture(#&quot;c&quot;, #&quot;control&quot;),
       documentation: &quot;Copy the selection to the clipboard.&quot;);
pane paste-menu-button (frame)
  make(&lt;menu-button&gt;, label: &quot;Paste&quot;,
       activate-callback: not-yet-implemented,
       accelerator: make-keyboard-gesture(#&quot;v&quot;, #&quot;control&quot;),
       documentation: &quot;Paste the selection in the clipboard 
                       at the current position.&quot;);
<P></P>
//Commands in the Task menu
pane add-menu-button (frame)
  make(&lt;menu-button&gt;, label: &quot;Add...&quot;,
       activate-callback: not-yet-implemented,
       accelerator: make-keyboard-gesture
                      (#&quot;a&quot;, #&quot;control&quot;, #&quot;shift&quot;),
       documentation: &quot;Add a new task.&quot;);
pane remove-menu-button (frame)
  make(&lt;menu-button&gt;, label: &quot;Remove&quot;,
       activate-callback: not-yet-implemented,
       accelerator: make-keyboard-gesture
                      (#&quot;d&quot;, #&quot;control&quot;, #&quot;shift&quot;),
       documentation: &quot;Remove the selected task from the list.&quot;);
<P></P>
//Commands in the Help menu
pane about-menu-button (frame)
  make(&lt;menu-button&gt;, label: &quot;About&quot;,
       activate-callback: not-yet-implemented,
       accelerator: make-keyboard-gesture(#&quot;f1&quot;),
       documentation: 
         &quot;Display information about the application.&quot;);
<P></P>
</PRE>
<P><A NAME=MARKER-10-203></A>Once you have defined the menu bar and all the children that it is to contain, you need to activate the menu bar in the frame by including the following towards the end of the frame definition.</P>
<PRE>
menu-bar (frame) frame.task-menu-bar;
<P></P>
</PRE>
<P>The definitions of these menu buttons demonstrate two interesting new features: the use of keyboard accelerators, and the use of documentation strings.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC --><DL>
<DL>
<DT><A REL=BELOW HREF="dguid_31.htm#HEADING31-0"><B>4.2.1  </B> - Documentation strings</A>
<DD>
<DT><A REL=BELOW HREF="dguid_32.htm#HEADING32-0"><B>4.2.2  </B> - Keyboard accelerators</A>
<DD>
</DL>
</DL>


</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dguid_31.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_29.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_28.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
