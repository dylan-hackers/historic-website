<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dguid_38.htm">
<LINK REL=PREV HREF="dguid_41.htm">
<LINK REL=NEXT HREF="dguid_43.htm">
<TITLE>5.3.1.4   The load-task-list function</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING42></A>

<DIV>
<P><A HREF="dguid_43.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_41.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_38.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5.3.1   Handling files in the task list manager</P>

</DIV>
<A NAME=HEADING42-0></A>
<H1>5.3.1.4   <A NAME=MARKER-2-264></A><A NAME=MARKER-9-265></A>The load-task-list function</H1>
<P>The code for <CODE>load-task-list</CODE> is shown below. Because this function does not use any DUIM code, it is described only briefly.</P>
<PRE>
define function load-task-list
   (filename :: &lt;string&gt;) =&gt; (task-list :: false-or(&lt;task-list&gt;))
  let tasks = make(&lt;stretchy-vector&gt;);
  block (return)
    with-open-file (stream = filename, direction: #&quot;input&quot;)
      while (#t)
        let name = read-line(stream, on-end-of-stream: #f);
        unless (name) return() end;
        let priority = read-line(stream, on-end-of-stream: #f);
        unless (priority) 
          error(&quot;Unexpectedly missing priority!&quot;) 
        end;
        let task = make(&lt;task&gt;, name: name, 
                        priority: as(&lt;symbol&gt;, priority));
        add!(tasks, task)
      end
    end
  end;
  make(&lt;task-list&gt;, tasks: tasks, filename: filename)
end function load-task-list;
<P></P>
</PRE>
<P><A NAME=MARKER-10-266></A>Add this code to <CODE>task-list.dylan</CODE>.</P>
<P>The function <CODE>load-task-list</CODE> reads a file from disk and attempts to convert its contents into an instance of <CODE>&lt;task-list&gt;</CODE>, which itself contains any number of instances of <CODE>&lt;task&gt;</CODE>. It takes one argument, the filename, and returns one value, the instance of <CODE>&lt;task-list&gt;</CODE>.</P>
<P>This function uses a generic function and a macro from the Streams library to read information from the file. For full information about this library, please refer to the <A HREF="../io/io_1.htm"><I>I/O and Networks Library Reference</I></A>.</P>
<P>The file format used by the task list manager is very simple, with each element of a task occupying a single line in the file. Suppose <CODE>load-task-list</CODE> is called on a file containing the following information:</P>
<PRE>
Wash the dog
medium
Video Men Behaving Badly
high
<P></P>
</PRE>
<P>This would create an instance of <CODE>&lt;task-list&gt;</CODE> whose <CODE>task-list-tasks</CODE> slot was a sequence of two instances of <CODE>&lt;task&gt;</CODE>. </P>
<UL>
<LI>The first <CODE>&lt;task&gt;</CODE> would have a <CODE>task-name</CODE> of <CODE>&quot;Wash the dog&quot;</CODE> and a <CODE>task-priority</CODE> of <CODE>#&quot;medium&quot;</CODE>.
<LI>The second <CODE>&lt;task&gt;</CODE> would have a <CODE>task-name</CODE> of <CODE>&quot;Video Men Behaving Badly&quot;</CODE> and a <CODE>task-priority</CODE> of <CODE>#&quot;high&quot;</CODE>. 
</UL>
<P>The <CODE>task-list-filename</CODE> slot of the <CODE>&lt;task-list&gt;</CODE> is the filename itself. Note that the <CODE>task-list-modified?</CODE> slot of the <CODE>&lt;task-list&gt;</CODE> is set to <CODE>#f</CODE>, reflecting the fact that the task list is loaded, but unchanged. This does not have to be done explicitly by <CODE>load-task-list</CODE>, since <CODE>#f</CODE> is the default value of this slot, as you can see from its definition in <A HREF="dguid_35.htm#MARKER-9-247">Section 5.1 on page 42</A>.</P>
<P>The file is opened for reading using the <CODE>with-open-file</CODE> macro. It is then read a line at a time, setting the local variables <CODE>name</CODE> and <CODE>priority</CODE> with each alternate line. After successfully setting both <CODE>name</CODE> and <CODE>priority</CODE>, an instance of <CODE>&lt;task&gt;</CODE> is created, and added to the stretchy vector tasks using <CODE>add!</CODE>. When the end of the file is reached, <CODE>#f</CODE> is returned and an instance of <CODE>&lt;task-list&gt;</CODE> is created from <CODE>tasks</CODE> and returned by the function. </P>
<P>Note how the <CODE>as</CODE> method is used to convert a string value such as <CODE>&quot;medium&quot;</CODE> into a symbol such as <CODE>#&quot;medium&quot;</CODE>. This is a useful technique to use when you wish to save and load symbol information in an application.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dguid_43.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_41.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_38.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
