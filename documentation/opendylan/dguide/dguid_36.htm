<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dguid_34.htm">
<LINK REL=PREV HREF="dguid_35.htm">
<LINK REL=NEXT HREF="dguid_37.htm">
<TITLE>5.2   Specifying a callback in the definition of each gadget</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING36></A>

<DIV>
<P><A HREF="dguid_37.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_35.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_34.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5 Adding Callbacks to the Application</P>

</DIV>
<A NAME=HEADING36-0></A>
<A NAME=UID-callbacks-890117></A>
<H1>5.2   <A NAME=MARKER-2-248></A><A NAME=MARKER-2-249></A><A NAME=MARKER-2-250></A>Specifying a callback in the definition of each gadget</H1>
<P>As you have already seen when using the <CODE>not-yet-implemented</CODE> callback, providing a callback for a gadget is just a matter of specifying another keyword-value pair in the definition of the gadget. There are two ways that you can specify the callback function to use.</P>
<DL>
<DT><DD>1.  If you wish, you can define the callback function inline, making the definition itself the value part of the keyword-value pair. 
<DT><DD>This can be useful for a simple callback function that you only need to invoke from a single callback type in a single pane. However, if several panes, or several types of callback, need to invoke the same callback function, you need to define the function explicitly in each gadget that uses it.
<DT><DD>2.  Alternatively, you can define a callback function explicitly in your application code, and then refer to it by name in the keyword-value pair. 
<DT><DD>This method is best for portability and reusability of your code, since the same callback function can be referred to by name in as many gadgets as you need to use it in, without having to redefine the callback function in each gadget. It can also lead to more readable source code. This technique is the one used throughout this example application.
</DL>
<P>As already mentioned, there are a number of different kinds of callback available, depending on the behavior that you want to specify, and the gadget for which you are defining a callback. When defining different callbacks for a gadget, you need to use a different init-keyword for each callback.</P>
<P>As you have already seen, by far the most common callback is the activate callback. This type of callback is invoked when you activate any instance of <CODE>&lt;action-gadget&gt;</CODE>. For buttons, the activate callback is invoked when you click on the button. For menu commands, the activate callback is invoked when you choose the command from the menu. The activate callback is the callback that is used most in the task list manager. You can specify an activate callback for any gadget using the <CODE>activate-callback:</CODE> init-keyword. In addition, you have seen the value-changed callback, which is invoked when the gadget-value has been changed. You can specify this callback using the <CODE>value-changed-callback:</CODE> init-keyword.</P>
<P>You have already defined a callback for all the gadgets in the GUI. All you need to do now is replace the reference to <CODE>not-yet-implemented</CODE> with the real function name that should get called when each gadget is activated. Thus, to specify an activate callback for the <B>Add task</B> button in the tool bar, redefine the button as follows in the definition of the <CODE>&lt;task-frame&gt;</CODE> class: </P>
<PRE>
pane add-button (frame)
  make(&lt;push-button&gt;, label: &quot;Add task&quot;,
       activate-callback: frame-add-task);
<P></P>
</PRE>
<P>You can use exactly the same callback in the new definition of <CODE>add-menu-button</CODE>:</P>
<PRE>
pane add-menu-button (frame)
  make(&lt;menu-button&gt;, label: &quot;Add...&quot;,
       activate-callback: frame-add-task,
       accelerator: make-keyboard-gesture
                      (#&quot;a&quot;, #&quot;control&quot;, #&quot;shift&quot;),
       documentation: &quot;Add a new task.&quot;);
<P></P>
</PRE>
<P>Notice how both of these gadgets specify the same activate callback. This is because the <B>Add</B> command in the menu should perform exactly the same action as the <B>Add task</B> button in the tool bar.</P>
<P>At this point, redefine the callback for each gadget listed in the table below, making sure that you supply the same callback to those gadgets that perform the same functions.</P>
<TABLE BORDER=1><CAPTION><P>Table 5.1   The callback functions used in the Task List Manager (Continued)</P>
</CAPTION><TR VALIGN=TOP><TH><P>Gadget</P>
</TH><TH><P>Callback</P>
</TH></TR><TR VALIGN=TOP><TD><P>open-menu-button </P>
</TD><TD><P>open-file</P>
</TD></TR><TR VALIGN=TOP><TD><P>save-menu-button </P>
</TD><TD><P>save-file</P>
</TD></TR><TR VALIGN=TOP><TD><P>save-as-menu-button </P>
</TD><TD><P>save-as-file</P>
</TD></TR><TR VALIGN=TOP><TD><P>exit-menu-button </P>
</TD><TD><P>exit-task</P>
</TD></TR><TR VALIGN=TOP><TD><P>cut-menu-button </P>
</TD><TD><P>cut-command</P>
<P><A NAME=MARKER-10-213></A></P>
</TD></TR><TR VALIGN=TOP><TD><P>copy-menu-button </P>
</TD><TD><P>copy-command</P>
<P><A NAME=MARKER-10-214></A></P>
</TD></TR><TR VALIGN=TOP><TD><P>paste-menu-button </P>
</TD><TD><P>paste-command</P>
<P><A NAME=MARKER-10-215></A></P>
</TD></TR><TR VALIGN=TOP><TD><P>add-menu-button </P>
</TD><TD><P>frame-add-task</P>
</TD></TR><TR VALIGN=TOP><TD><P>remove-menu-button </P>
</TD><TD><P>frame-remove-task</P>
</TD></TR><TR VALIGN=TOP><TD><P>about-menu-button </P>
</TD><TD><P>about-task</P>
</TD></TR><TR VALIGN=TOP><TD><P>add-button </P>
</TD><TD><P>frame-add-task</P>
</TD></TR><TR VALIGN=TOP><TD><P>remove-button </P>
</TD><TD><P>frame-remove-task</P>
</TD></TR><TR VALIGN=TOP><TD><P>open-button</P>
</TD><TD><P>open-file</P>
</TD></TR><TR VALIGN=TOP><TD><P>save-button</P>
</TD><TD><P>save-file</P>
</TD></TR></TABLE><P>The following sections show you how to define the callbacks themselves. You will need to define other functions and methods, as well as the callback functions listed above. These other functions and methods are called by some of the callbacks themselves.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dguid_37.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_35.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_34.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
