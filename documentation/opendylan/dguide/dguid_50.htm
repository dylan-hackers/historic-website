<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dguid_47.htm">
<LINK REL=PREV HREF="dguid_49.htm">
<LINK REL=NEXT HREF="dguid_51.htm">
<TITLE>5.3.3.3   Enabling and disabling buttons in the interface</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING50></A>

<DIV>
<P><A HREF="dguid_51.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_49.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_47.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5.3.3   Updating the user interface</P>

</DIV>
<A NAME=HEADING50-0></A>
<H1>5.3.3.3   <A NAME=MARKER-9-296></A>Enabling and disabling buttons in the interface</H1>
<P>The two methods for <CODE>note-task-selection-change</CODE> make a number of changes to the GUI of the task list manager, to ensure that the correct information is displayed to the user. In particular, they perform any changes necessary after an item in the task list has been selected or deselected. They ensure that the correct priority is displayed in the radio box, depending on whether there is a task currently selected, and they also enable or disable the <B>Remove task</B> button and its equivalent command in the <B>Task</B> menu, depending on whether there is a task selected or not (if there is no task selected, then the button and menu command should both be disabled). </P>
<P>There are two methods defined, one on an instance of <CODE>&lt;task-frame&gt;</CODE>, and one on an instance of <CODE>&lt;gadget&gt;</CODE>. The Task List 1 project requires both of these methods. For the Task List 2 project, however, the first method requires a slightly different definition, and the second method is not required at all.</P>
<P>The <CODE>note-task-selection-change</CODE> method defined on <CODE>&lt;task-frame&gt;</CODE> is called by <CODE>refresh-task-frame</CODE>, described<A NAME=MARKER-10-297></A> at the end of this section. For the Task List 1 project, the <CODE>note-task-selection-change</CODE> method is defined:</P>
<PRE>
define method note-task-selection-change
    (frame :: &lt;task-frame&gt;) =&gt; ()
  let task = frame-selected-task(frame);
  if (task)
    frame.priority-box.gadget-value := task.task-priority;
  end;
  let selection? = (task ~= #f);
  frame.remove-button.gadget-enabled? := selection?;
  frame.remove-menu-button.gadget-enabled? := selection?;
end method note-task-selection-change;
<P></P>
</PRE>
<P>For the Task List 2 project the <CODE>note-task-selection-change</CODE> method is defined:</P>
<PRE>
define method note-task-selection-change
    (frame :: &lt;task-frame&gt;) =&gt; ()
  let task = frame-selected-task(frame);
  if (task)
    frame.priority-box.gadget-value := task.task-priority;
  end;
  command-enabled?(frame-remove-task, frame) := task ~= #f;
end method note-task-selection-change;
<P></P>
</PRE>
<P>The method takes an instance of <CODE>&lt;task-frame&gt;</CODE> as an argument, and returns no values. It works by calling <CODE>frame-selected-task</CODE> to determine which, if any, task is currently selected, and sets that to a local variable, <CODE>task</CODE>.</P>
<P>The expression</P>
<PRE>
if (task)
  frame.priority-box.gadget-value := task.task-priority;
end;
<P></P>
</PRE>
<P>sets the gadget value of the <CODE>priority-box</CODE> pane in the task list manager to the value of the <CODE>task-priority</CODE> slot of the selected task, if a task is selected. This ensures that if a task is selected, its priority is displayed correctly beneath the list of tasks. Note that <CODE>priority-box</CODE> may take the same set of values as the <CODE>task-priority</CODE> slot, namely <CODE>#&quot;low&quot;</CODE>, <CODE>#&quot;medium&quot;</CODE>, and <CODE>#&quot;high&quot;</CODE>, so it is straightforward to make this kind of assignment.</P>
<P>The rest of the method deals with enabling or disabling gadgets that let the user remove a task from the task list. If there is no task selected, then <CODE>remove-button</CODE> and <CODE>remove-menu-button</CODE> need to be disabled. If there is a task selected, then they need to be enabled. This behavior is achieved by converting the value of the variable <CODE>task</CODE>, which can take a value of <CODE>false-or(&lt;task&gt;)</CODE>, into a boolean value, called <CODE>selection?</CODE>. This is done in the expression</P>
<PRE>
let selection? = (task ~= #f);
<P></P>
</PRE>
<P>This sets <CODE>selection?</CODE> to the result of performing an inequality comparison on <CODE>task</CODE> and <CODE>#f</CODE>. Thus, if <CODE>task</CODE> is <CODE>#f</CODE> (there is no task selected), then <CODE>selection?</CODE> is <CODE>#f</CODE>, but if <CODE>task</CODE> is an instance of <CODE>&lt;task&gt;</CODE> (there is a task selected), then <CODE>selection?</CODE> is <CODE>#t</CODE>.</P>
<P>The two calls to <CODE>gadget-enabled?</CODE> then set the <CODE>gadget-enabled</CODE> slot of the appropriate gadgets to the value of <CODE>selection?</CODE>, enabling or disabling each gadget as appropriate.</P>
<P>The second method for <CODE>note-task-selection-change</CODE> is defined for an instance of <CODE>&lt;gadget&gt;</CODE>, as follows:</P>
<PRE>
define method note-task-selection-change
    (gadget :: &lt;gadget&gt;) =&gt; ()
  let frame = gadget.sheet-frame;
  note-task-selection-change(frame)
end method note-task-selection-change;
<P></P>
</PRE>
<P>This takes a gadget as an argument. It simply finds the frame that the gadget belongs to, and calls the other method for <CODE>note-task-selection-change</CODE> on that frame. </P>
<P>The second method for <CODE>note-task-selection-change</CODE> needs to be used as the value-changed callback of the <CODE>task-list</CODE> pane in the definition of <CODE>&lt;task-frame&gt;</CODE>; a value-changed callback is invoked whenever the <CODE>gadget-value</CODE> of a gadget changes. Because the <CODE>gadget-value</CODE> of a list box is the currently selected item, whenever a different item is selected in the list box, <CODE>note-task-selection-change</CODE> is called.</P>
<P>In order to achieve this, a small change is needed to the definition of the task-list pane in <CODE>frame.dylan</CODE>. In this definition for the Task List 1 project, change the line that reads:</P>
<PRE>
activate-callback: not-yet-implemented);
<P></P>
</PRE>
<P>to</P>
<PRE>
value-changed-callback: note-task-selection-change);
<P></P>
</PRE>
<P>and for the Task List 2 project change the line to</P>
<PRE>
value-changed-callback: method (gadget) 
                        note-task-selection-change(frame) end);
<P></P>
</PRE>
<P>to give a final definition for this pane as follows:</P>
<PRE>
// definition of list
  pane task-list (frame)
    make (&lt;list-box&gt;,
          items: frame.frame-task-list.task-list-tasks,
          label-key: task-name,
          lines: 15,
          value-changed-callback: note-task-selection-change);
<P></P>
</PRE>
<P>Add the code for these methods to <CODE>frame.dylan</CODE>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dguid_51.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_49.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_47.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
