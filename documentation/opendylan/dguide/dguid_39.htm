<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dguid_38.htm">
<LINK REL=PREV HREF="dguid_38.htm">
<LINK REL=NEXT HREF="dguid_40.htm">
<TITLE>5.3.1.1   The open-file method</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING39></A>

<DIV>
<P><A HREF="dguid_40.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_38.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_38.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5.3.1   Handling files in the task list manager</P>

</DIV>
<A NAME=HEADING39-0></A>
<H1>5.3.1.1   <A NAME=MARKER-2-260></A>The open-file method</H1>
<P>The code for open-file is shown below. Add this code to <CODE>frame.dylan</CODE>.</P>
<PRE>
define method open-file
    (gadget :: &lt;gadget&gt;) =&gt; ()
  let frame = sheet-frame(gadget);
  let task-list = frame-task-list(frame);
  let filename
    = choose-file(frame: frame,
                  default: task-list.task-list-filename,
                  direction: #&quot;input&quot;);
  if (filename)
    let task-list = load-task-list(filename);
    if (task-list)
      frame.frame-task-list := task-list;
      refresh-task-frame(frame)
    else
      notify-user(format-to-string(&quot;Failed to open file %s&quot;, filename),
                  owner: frame)
    end
  end
end method open-file;
<P></P>
</PRE>
<P>The method takes a gadget as an argument and returns no values. The argument is the gadget that is used to invoke it, which in the case of the task list manager means either <CODE>open-menu-button</CODE> (in the <B>File</B> menu of the application) or <CODE>open-button</CODE> (on the tool bar). The <CODE>open-file</CODE> method then sets three local variables:</P>
<DL>
<DT><CODE>frame</CODE><DD><P> This contains the frame of which the gadget argument is a part. This is a simple way of identifying the main application frame.</P>
<DT><CODE>task-list</CODE><DD><P> This contains the value of the <CODE>frame-task-list</CODE> slot for frame. This identifies the instance of <CODE>&lt;task-list&gt;</CODE> that is being used to hold the task list information currently loaded into the task list manager.</P>
<DT><CODE>filename</CODE><DD><P> This is the name of the file that is to be loaded into the task list manager, and the user is always prompted to supply it.</P>
</DL>
<P>The method <CODE>choose-file</CODE> (a method provided by DUIM) is used to prompt for a file to load. The portion of code that performs this task is repeated here:</P>
<PRE>
choose-file(frame: frame,
            default: task-list.task-list-filename,
            direction: #&quot;input&quot;);
<P></P>
</PRE>
<P>This method displays a standard file dialog box so that the user can select a file on any disk connected to the host computer. For <CODE>open-file</CODE>, you need to supply three arguments to <CODE>choose-file</CODE>: the frame that owns the dialog, a default value to supply to the user, and the direction of the interaction. </P>
<P>You need to supply a frame so that the system knows how to treat the frame correctly, with respect to the dialog box. Thus, while the dialog is displayed, the frame that owns it cannot be minimized, resized, or interacted with in any way; this is standard behavior for modal dialog boxes.</P>
<P>In this case, supplying a default value is useful in that it lets us supply the filename for the currently loaded task list as a default value. It determines this by examining the <CODE>task-list-filename</CODE> slot of <CODE>task-list</CODE> (which, remember, is defined as a local variable and represents the instance of <CODE>&lt;task-list&gt;</CODE> in use). If this slot has a value, then it is offered as a default. (Note that if the currently loaded task list has never been saved to disk, then this slot is <CODE>#f</CODE>, and so no default is offered.)</P>
<P>The direction of interaction should also be specified when calling <CODE>choose-file</CODE>, since the same generic function can be used to prompt for a filename using a standard Open File dialog or a standard Save File dialog. In this case, the direction is <CODE>#&quot;input&quot;</CODE>, which indicates that data is being read in (that is, Open File is used).</P>
<P>The rest of the <CODE>open-file</CODE> method deals with loading in the task list information safely. It consists of two nested <CODE>if</CODE> statements as shown below. </P>
<PRE>
if (filename)
  let task-list = load-task-list(filename);
  if (task-list)
    frame.frame-task-list := task-list;
    refresh-task-frame(frame)
  else
    notify-user(format-to-string
                  (&quot;Failed to open file %s&quot;, filename),
                owner: frame)
  end
end
<P></P>
</PRE>
<P>The clause</P>
<PRE>
if (filename)
  ...
end
<P></P>
</PRE>
<P>is necessary to handle the case where the user cancels the Open file dialog: on cancelling the dialog, the <CODE>open-file</CODE> method should return silently with no side effects. </P>
<P>If a filename is supplied, then it is read from disk and converted into a format that is readable by the application, in the line that reads</P>
<PRE>
let task-list = load-task-list(filename);
<P></P>
</PRE>
<P>The function <CODE>load-task-list</CODE> is described in <A HREF="dguid_42.htm#MARKER-9-265">Section 5.3.1.4 on page 56</A>.</P>
<P>The clause</P>
<PRE>
if (task-list)
  ...
else
  ...
end
<P></P>
</PRE>
<P>is necessary to handle the case where the filename specified does not contain data that can be interpreted by <CODE>load-task-list</CODE>. If <CODE>task-list</CODE> cannot be assigned, then the <CODE>else</CODE> code is run. This calls the function <CODE>notify-user</CODE>, which is a simple way to display a short message to the user in a message box. </P>
<P>If <CODE>task-list</CODE> can be assigned (that is, the contents of the specified file have been successfully read by <CODE>load-task-list</CODE>), then two lines of code are run. The line</P>
<PRE>
frame.frame-task-list := task-list;
<P></P>
</PRE>
<P>assigns the <CODE>frame-task-list</CODE> slot of frame to the value of <CODE>task-list</CODE>.</P>
<P>The line</P>
<PRE>
refresh-task-frame(frame)
<P></P>
</PRE>
<P>calls a method that refreshes the list of tasks displayed in the task list manager, so that the contents of the newly loaded file are correctly displayed on the screen. The method <CODE>refresh-task-frame</CODE> is described in <A HREF="dguid_47.htm#MARKER-9-292">Section 5.3.3 on page 64</A>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dguid_40.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_38.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_38.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
