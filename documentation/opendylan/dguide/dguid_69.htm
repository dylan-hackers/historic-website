<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dguid_68.htm">
<LINK REL=PREV HREF="dguid_68.htm">
<LINK REL=NEXT HREF="dguid_70.htm">
<TITLE>7.2.2.1   Standard buttons</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING69></A>

<DIV>
<P><A HREF="dguid_70.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_68.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_68.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>7.2.2   Button gadgets</P>

</DIV>
<A NAME=HEADING69-0></A>
<H1>7.2.2.1   <A NAME=MARKER-2-370></A><A NAME=MARKER-2-371></A><A NAME=MARKER-9-372></A>Standard buttons</H1>
<P>DUIM provides three standard button gadget classes:</P>
<DL>
<DT><CODE>&lt;push-button&gt; </CODE><DD><P> Sometimes referred to as <I><A NAME=MARKER-2-373></A><A NAME=MARKER-2-374></A><A NAME=MARKER-6-375></A>command button</I> in Microsoft documentation.</P>
<DT><CODE>&lt;radio-button&gt;</CODE><DD><P> Sometimes referred to as <I><A NAME=MARKER-2-376></A><A NAME=MARKER-2-377></A><A NAME=MARKER-6-378></A>option button</I> in Microsoft documentation.</P>
<DT><CODE>&lt;check-button&gt;</CODE><DD><P> Sometimes referred to as <I>check box</I> in Microsoft documentation.</P>
</DL>
<P></P>
<TABLE BORDER=1><CAPTION><P>Figure 7.1   <A NAME=MARKER-9-338></A>A push button, a radio button, and a check button</P>
</CAPTION><TR VALIGN=TOP><TD><P> <IMG ALIGN=TOP SRC=dg69ima4.gif></P>
</TD></TR></TABLE><P>The chapters covering the task list manager application (chapters <A HREF="dguid_11.htm#MARKER-9-118">2</A> to <A HREF="dguid_55.htm#MARKER-9-326">6</A>) introduced you to the <CODE>&lt;push-button&gt; </CODE>class. This is the default type of button (that is, creating an instance of <CODE>&lt;button&gt;</CODE> actually creates an instance of <CODE>&lt;push-button&gt;</CODE>).</P>
<PRE>
make(&lt;push-button&gt;, label: &quot;Hello&quot;);
<P></P>
</PRE>
<P>Radio buttons let you choose one option out of a group of several. They are usually implemented in groups of several buttons (using the <CODE>&lt;radio-box&gt;</CODE> class), although they can also be created singly, as shown in <A HREF="#MARKER-9-338">Figure 7.1</A>. For more information about creating groups of radio buttons, see <A HREF="dguid_73.htm#MARKER-9-394">Section 7.2.3.2 on page 94</A>.</P>
<PRE>
make(&lt;radio-button&gt;, label: &quot;Hello&quot;);
<P></P>
</PRE>
<P>Check buttons are buttons whose setting can be toggled on and off. Like radio buttons, they are often implemented in groups, although unlike radio buttons, they are frequently used individually. For more information about creating groups of check buttons, see <A HREF="dguid_73.htm#MARKER-9-394">Section 7.2.3.2 on page 94</A>.</P>
<PRE>
define variable *my-check-button* 
   := make(&lt;check-button&gt;, label: &quot;Hello&quot;
           value: #f);
</PRE>
<P>Remember that you can use <CODE>gadget-label</CODE> to set or return the label for any button. As demonstrated in the examples above, it is also good practice to set the label when defining any button, using the <CODE>label:</CODE> init-keyword.</P>
<P>Radio and check buttons have a <CODE>gadget-value</CODE> of <CODE>#t</CODE> or <CODE>#f</CODE>, depending on whether or not the button is selected. For example:</P>
<PRE>
gadget-value(*my-check-button*) 
<P></P>
</PRE>
<P>returns <CODE>#f</CODE> if the check button is not selected.</P>
<P>You can set the <CODE>gadget-value</CODE> with the <CODE>:=</CODE> operator.</P>
<PRE>
gadget-value(*my-check-button*) := #t;
<P></P>
</PRE>
<P>Supplying a value for a push button is a useful way of sending information to your application. The value of a push button can be used by any callback defined on the push button.</P>
<P>You can make any push button the default option for the frame it is a part of using the <CODE>default?:</CODE> init-keyword when defining the button. By default, this is <CODE>#f</CODE>, but if specified as <CODE>#t</CODE>, the button is displayed on the screen with a heavier border, and any callback defined for the button is invoked by pressing the RETURN key on the keyboard, as well as by clicking the button itself.</P>
<PRE>
define variable *my-default-button* 
  := make(&lt;push-button&gt;, 
          label: &quot;Click me or press Return&quot;, 
          default?: #t));
<P></P>
</PRE>
<P>It is good practice to define a default button in most dialog boxes, so that the user can easily perform a default action. Generally, the <B>OK</B> or <B>Yes</B> button in a dialog box is the most acceptable default button, though for particularly destructive operations you should consider another choice.</P>
<P>Buttons are intrinsically "non-stretchy" objects. That is, the width of a button is computed from the length of its label, and the button will not automatically size itself according to the size of the sheet that it is a part of. You should use the <CODE>max-width:</CODE> init-keyword to make a button fill all the available space, by setting it to the constant <CODE>$fill</CODE>.</P>
<P>Thus, the button created by </P>
<PRE>
make(&lt;button&gt;, label: &quot;Red&quot;);
<P></P>
</PRE>
<P>will only be as wide as the label it is given--"Red", in this case--but the button created by</P>
<PRE>
make(&lt;button&gt;, label: &quot;Red&quot;, max-width: $fill);
<P></P>
</PRE>
<P>will have a width that is determined by the sheet that it is a child of and will still have the same minimum width, so it cannot be resized too small.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dguid_70.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_68.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_68.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
