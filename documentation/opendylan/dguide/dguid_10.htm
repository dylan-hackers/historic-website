<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dguide_8.htm">
<LINK REL=PREV HREF="dguide_9.htm">
<LINK REL=NEXT HREF="dguid_11.htm">
<TITLE>1.2   The DUIM programming model</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING10></A>

<DIV>
<P><A HREF="dguid_11.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguide_9.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguide_8.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>1 Introduction</P>

</DIV>
<A NAME=HEADING10-0></A>
<A NAME=UID-intro-888053></A>
<H1>1.2   <A NAME=MARKER-2-97></A><A NAME=MARKER-2-98></A>The DUIM programming model</H1>
<P>The Dylan User Interface Manager (DUIM) provides a complete functional interface so that you can use Functional Developer to develop and build graphical user interfaces (GUIs) for your applications. It comprises a suite of libraries, each of which provides a specific set of components necessary for developing a GUI.</P>
<P>DUIM has a simple overall design, ensuring that developers who are relatively new to Dylan can produce results quickly and effectively. At the same time, the design is robust enough to allow more experienced developers to extend and use DUIM in non-standard ways when required, in order to produce specific behavior. </P>
<P>Because it is completely written in Dylan, DUIM is able to harness all the power of the Dylan language. This means not only the clean object-oriented design of Dylan, but also the power of functionality such as macros and collections, together with the concise nature of the language syntax. This makes it easy to implement quite complicated GUI designs from the ground up, using small, clear pieces of code. This is in contrast to other GUI design libraries that have to rely on a much more verbose underlying language, such as C, which in turn leads to more complex GUI code that is harder to improve upon and maintain.</P>
<P>In the functionality that it provides, DUIM has a number of goals:</P>
<UL>
<LI>It should be as easy to use as possible.
</UL>
<DL>
<DT><DD>As well as providing the minimum feature set necessary to build a GUI, DUIM provides functionality that lets you use common GUI features easily.
</DL>
<UL>
<LI>It should be as compact as possible.
</UL>
<DL>
<DT><DD>DUIM does not provide <I>so much</I> functionality that either you, or the environment, is swamped in complexity.
</DL>
<UL>
<LI>It should be as portable as possible.
</UL>
<DL>
<DT><DD>It should be relatively easy to compile code in, and for, as many different hardware and software configurations as possible.
</DL>
<P>DUIM provides support for all the controls available in every modern GUI environment, and also allows you to develop your own controls as required. As far as possible, DUIM code is not specific to any particular platform, and whenever possible, controls native to the target environment are used in the resulting executable. This has two important consequences for your code:</P>
<DL>
<DT><DD>1.  By using controls native to the target environment, it is easy to develop an application that has the correct look and feel for your platform.
<DT><DD>2.  It enables DUIM code to be compiled and run on any platform for which a DUIM backend has been implemented.
</DL>
<P>A DUIM interface is built from <I>frames</I>; each window in your application is represented by a frame. Each frame contains a hierarchy of <I>sheets</I>, in which each sheet represents a unique piece of your window (the menu bar, buttons, and so on). DUIM also handles the event loop for you, allowing you to write methods to handle just the events you wish to treat specially.</P>
<P>The components of the sheet structure itself consist of three types of DUIM object:</P>
<UL>
<LI><I>Gadgets</I>, which are discrete GUI controls such as buttons, panes, and menus. These are the basic behavioral element of a GUI, and provide methods to handle events such as mouse clicks.
<LI><I>Layouts</I>, which are controls that, rather than having a physical appearance on screen, describe the arrangement of the sheets that are their children.
<LI><I>User-defined sheets</I>, which are implemented by you rather than by DUIM itself.
</UL>
<P><A NAME=MARKER-10-99></A>To implement a user-defined sheet, you create a new class and write methods to handle the different events that it receives, such as repainting itself, supporting mouse events, or handling the clipboard.</P>
<P>To develop an application using DUIM, you typically have to define a number of classes of frame (one for every kind of window or dialog in your application). The definition of each frame class contains a description of the sheet hierarchy that describes the contents of the frame, together with any slots and initial values that are required by the frame class. Once the frame classes are defined, you need to define callback functions that are invoked when certain events occur within the scope of the sheet hierarchy, such as mouse button clicks or textual input. These callback functions encapsulate the behavior of the application.</P>
<P><A HREF="dguid_11.htm#MARKER-9-118">Chapter 2,  "Designing A Simple DUIM Application"</A>, to <A HREF="dguid_55.htm#MARKER-9-326">Chapter 6,  "Using Command Tables"</A>, provide an extended tutorial that illustrates the basic and most common principles involved in building a GUI for a simple application.</P>
<P>As well as a rich set of GUI controls, DUIM provides support for the following features that are required in GUI design:</P>
<DL>
<DT><B>Dialogs</B><DD><P> You can build your own dialogs, wizards, and property frames using pre-supplied DUIM classes. In addition, a number of convenience functions are provided which let you add common dialogs (such as file requesters) to your GUI without having to design the dialog from scratch.</P>
<DT><B>Graphics</B><DD><P> DUIM provides portable models for colors, fonts, images, and generic drawing operations.</P>
<DT><B>Events</B><DD><P> DUIM provides portable models for keyboard handling and mouse handling, to simplify the process of writing your own event handling routines.</P>
<DT><B>Layouts</B><DD><P> DUIM makes it easy to lay out groups of controls in a variety of standard ways, letting you arrange controls in columns, rows, or tables. DUIM takes care of any necessary calculations, ensuring that the size of each control, and the spacing between controls, is correct, without the need for any explicit layout calculation on your part.</P>
</DL>
<P></P>
<A NAME=LINK-intro-lastpage></A><A NAME=LINK-design-firstpage></A><!-- FM pgf ignored -->

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dguid_11.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguide_9.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguide_8.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
