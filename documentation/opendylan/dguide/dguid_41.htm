<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dguid_38.htm">
<LINK REL=PREV HREF="dguid_40.htm">
<LINK REL=NEXT HREF="dguid_42.htm">
<TITLE>5.3.1.3   The save-as-file method</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING41></A>

<DIV>
<P><A HREF="dguid_42.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_40.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_38.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>5.3.1   Handling files in the task list manager</P>

</DIV>
<A NAME=HEADING41-0></A>
<H1>5.3.1.3   <A NAME=MARKER-2-263></A>The save-as-file method</H1>
<P>The code for <CODE>save-as-file</CODE> is as follows:</P>
<PRE>
define method save-as-file
    (gadget :: &lt;gadget&gt;, #key filename) =&gt; ()
  let frame = sheet-frame(gadget);
  let task-list = frame-task-list(frame);
  let filename
    = filename
        | choose-file(frame: frame,
                      default: task-list.task-list-filename,
                      direction: #&quot;output&quot;);
  if (filename)
    if (save-task-list(task-list, filename: filename))
      frame.frame-task-list := task-list;
      refresh-task-frame(frame)
    else
      notify-user(format-to-string
                    (&quot;Failed to save file %s&quot;, filename),
                  owner: frame)
    end
  end
end method save-as-file;
<P></P>
</PRE>
<P>Add this code to <CODE>frame.dylan</CODE>.</P>
<P>Like <CODE>open-file</CODE> and <CODE>save-file</CODE>, this method takes a gadget as an argument and returns no values. This argument is the gadget which is used to invoke it. In addition, an optional keyword argument, a filename, can be passed.</P>
<P>This method is a little unusual; as well as being the activate callback for the <CODE>save-as-menu-button</CODE> (the command <B>File &gt; Save As</B>), it is also called by the <CODE>save-file</CODE> method. </P>
<UL>
<LI>When directly invoked as an activate callback, the <CODE>filename</CODE> argument is not passed to <CODE>save-as-file</CODE>. Instead, the user is prompted to supply it. In addition, the <CODE>gadget</CODE> is <CODE>save-as-menu-button</CODE>.
<LI>When invoked by <CODE>save-file</CODE>, a <CODE>filename</CODE> may be passed, if the associated task list has been saved before. In addition, the gadget is either <CODE>save-button</CODE> or <CODE>save-menu-button</CODE>.
</UL>
<P>As with <CODE>open-file</CODE>, <CODE>save-as-file</CODE> sets three local variables:</P>
<DL>
<DT><CODE>frame</CODE><DD><P> This is the frame containing the gadget passed as an argument. </P>
<DT><CODE>task-list</CODE><DD><P> This contains the value of the <CODE>frame-task-list</CODE> slot for <CODE>frame</CODE>, and identifies the instance of <CODE>&lt;task-list&gt;</CODE> to be saved.</P>
<DT><CODE>filename</CODE><DD><P> The filename to which the instance of <CODE>&lt;task-list&gt;</CODE> is saved. </P>
</DL>
<P>Unless <CODE>filename</CODE> is passed as an optional argument, the user is prompted to supply a filename in which the task list information is to be saved. As with <CODE>open-file</CODE>, the <CODE>choose-file</CODE> method is used to do this. In fact, the call to <CODE>choose-file</CODE> here is identical to the call to <CODE>choose-file</CODE> in <CODE>open-file</CODE>, with the exception of the direction argument, which is set to <CODE>#&quot;output&quot;</CODE>.</P>
<P>The rest of the <CODE>save-as-file</CODE> method deals with saving the task list information safely. It is similar to the equivalent code in <CODE>open-file</CODE>, and consists of two nested <CODE>if</CODE> statements as shown below. </P>
<PRE>
if (filename)
  if (save-task-list(task-list, filename: filename))
    frame.frame-task-list := task-list;
    refresh-task-frame(frame)
  else
    notify-user(format-to-string(&quot;Failed to save file %s&quot;, filename),
                owner: frame)
  end
end
<P></P>
</PRE>
<P>As with <CODE>open-file</CODE>, the clause</P>
<PRE>
if (filename)
  ...
end
<P></P>
</PRE>
<P>is necessary in case the user cancels the Save file dialog: on cancelling the dialog, <CODE>save-as-file</CODE> should fail silently with no side effects. </P>
<P>The second <CODE>if</CODE> statement is more interesting. The body of the <CODE>if</CODE> statement is like the body of the equivalent <CODE>if</CODE> statement in <CODE>open-file</CODE>: </P>
<PRE>
frame.frame-task-list := task-list;
refresh-task-frame(frame)
<P></P>
</PRE>
<P>This sets the <CODE>frame-task-list</CODE> slot of <CODE>frame</CODE> and then calls <CODE>refresh-task-frame</CODE> to ensure that the correct information is shown on the screen. </P>
<P>Similarly, the body of the <CODE>else</CODE> clause warns that the task list could not be saved, when the <CODE>if</CODE> condition does not return true:</P>
<PRE>
notify-user(format-to-string(&quot;Failed to save file %s&quot;, filename),
            owner: frame)
<P></P>
</PRE>
<P>The interesting part of this <CODE>if</CODE> statement is the <CODE>if</CODE> condition itself:</P>
<PRE>
save-task-list(task-list, filename: filename)
<P></P>
</PRE>
<P>As well as providing a test for whether the task list frame should be updated, it actually performs the save operation, by calling the function <CODE>save-task-list</CODE> with the required arguments.</P>
<P>The function <CODE>save-task-list</CODE> is described in <A HREF="dguid_43.htm#MARKER-9-270">Section 5.3.1.5 on page 58</A> and the method <CODE>refresh-task-frame</CODE> is described in <A HREF="dguid_47.htm#MARKER-9-292">Section 5.3.3 on page 64</A>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dguid_42.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_40.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_38.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
