<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dgui_102.htm">
<LINK REL=PREV HREF="dgui_103.htm">
<LINK REL=NEXT HREF="dgui_105.htm">
<TITLE>7.5.3.2   Specifying panes for a new class of frame</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING104></A>

<DIV>
<P><A HREF="dgui_105.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dgui_103.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dgui_102.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>7.5.3   Defining new classes of frame</P>

</DIV>
<A NAME=HEADING104-0></A>
<H1>7.5.3.2   <A NAME=MARKER-2-512></A><A NAME=MARKER-2-513></A><A NAME=MARKER-2-514></A>Specifying panes for a new class of frame</H1>
<P>In the same way that you can define slots, you can define panes for a frame class using pane options. Panes may be used to define all the visual aspects of a frame class, including such things as:</P>
<UL>
<LI>The layouts and gadgets displayed in the frame
<LI>The menu bar, menus, and menu commands available in the frame
<LI>Additional components, such as tool bars or status bars
</UL>
<P>Typically, the definition for any pane has the following syntax:</P>
<PRE>
pane <I>pane-name</I> (<I>pane-owner</I>) <I>pane-definition</I>;
<P></P>
</PRE>
<P>This breaks down into the following elements:</P>
<UL>
<LI>The reserved word <CODE>pane.</CODE>
<LI>The name you wish to give the pane, which acts as a slot accessor for the frame, to let you retrieve the pane.
<LI>A space in which you can bind the owner of the pane (usually the frame itself) to a local variable for use inside the pane definition
<LI>The definition of the pane
</UL>
<P>Once you have defined all the visual components of a frame using an arrangement of panes of your choice, each major component needs to be included in the frame using an appropriate clause. For example, to include a tool bar, having created a pane called <CODE>app-tool-bar</CODE> that contains the definition of the tool bar itself, you need to include the following code at the end of the definition of the frame:</P>
<PRE>
tool-bar (frame) frame.app-tool-bar;
<P></P>
</PRE>
<P>The major components that need to be activated in any frame definition are the top level layout, menu bar, tool bar, and status bar.</P>
<P>The following example shows how to define and activate panes within a frame. </P>
<P>Three panes are defined:</P>
<DL>
<DT><CODE>button</CODE><DD><P> A push button that contains a simple callback.</P>
<DT><CODE>status</CODE><DD><P> A status bar.</P>
<DT><CODE>main-layout</CODE><DD><P> A column layout that consists of the <CODE>button</CODE> pane, together with a drawing pane.</P>
</DL>
<PRE>
define frame &lt;example-frame&gt; (&lt;simple-frame&gt;)

... other code here

// pane definitions
  pane button (frame) 
    make(&lt;push-button&gt;,
         label: &quot;Press&quot;,
         activate-callback: 
           method (button) 
             notify-user (format-to-string (&quot;Pressed button&quot;),
                            owner: frame)
           end);
  pane status (frame)
    make(&lt;status-bar&gt;);
  pane main-layout (frame)
    vertically (spacing: 10)
      horizontally (borders: 2, x-alignment: #&quot;center&quot;)
        frame.button;
      end;
      make(&lt;drawing-pane&gt;,
           foreground: $red); 
    end;

... other code here

// activate components of frame
  layout (frame) frame.main-layout;
  status-bar (frame) frame.status;
// frame title
  keyword title: = &quot;Example Frame&quot;;
end frame &lt;example-frame&gt;;
<P></P>
</PRE>
<P>The following method creates an instance of an <CODE>&lt;example-frame&gt;</CODE>. </P>
<P>The simplest way to create an example frame is by calling this method thus: <CODE>make-example-frame();</CODE>.</P>
<PRE>
define method make-example-frame =&gt; (frame :: &lt;example-frame&gt;)
  let frame
    = make(&lt;example-frame&gt;);
  start-frame(frame);
end method make-example-frame;
<P></P>
</PRE>
<P>For a more complete example of how to define your own class of frame for use in an application, see the chapters that cover the development of the Task List Manager in this manual (Chapters <A HREF="dguid_11.htm#MARKER-9-118">2</A> to <A HREF="dguid_55.htm#MARKER-9-326">6</A>).</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dgui_105.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dgui_103.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dgui_102.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
