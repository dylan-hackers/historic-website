<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="dguide_1.htm">
<LINK REL=UP HREF="dguid_92.htm">
<LINK REL=PREV HREF="dguid_92.htm">
<LINK REL=NEXT HREF="dguid_94.htm">
<TITLE>7.3.1   Row layouts and column layouts</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING93></A>

<DIV>
<P><A HREF="dguid_94.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_92.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_92.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>7.3   A tour of layouts</P>

</DIV>
<A NAME=HEADING93-0></A>
<H1>7.3.1   <A NAME=MARKER-2-473></A><A NAME=MARKER-2-474></A><A NAME=MARKER-2-475></A><A NAME=MARKER-2-476></A>Row layouts and column layouts</H1>
<P>Create a column layout containing three buttons as follows:</P>
<PRE>
contain(make(&lt;column-layout&gt;, 
             children: vector(make(&lt;push-button&gt;, label: &quot;One&quot;),
                              make(&lt;push-button&gt;, label: &quot;Two&quot;),
                              make(&lt;push-button&gt;, label: &quot;Three&quot;))));
<P></P>
<TABLE BORDER=1><CAPTION></PRE>
<P>Figure 7.24   Three button arranged in a column layout</P>
</CAPTION><TR VALIGN=TOP><TD><P> <IMG ALIGN=TOP SRC=dg93im27.gif></P>
</TD></TR></TABLE><P>Similarly, <CODE>&lt;row-layout&gt;</CODE> can be used to lay out any number of children in a single row. </P>
<P>A number of different init-keywords can be used to specify the initial appearance of any layouts you create. Using these init-keywords, you can ensure that all children are the same size in one or both dimensions, and that a certain amount of space is placed between each child. You can also place a border of any width around the children of a layout.</P>
<P>To equalize the heights or widths of any child in a layout, use <CODE>equalize-heights?: #t </CODE>or <CODE>equalize-widths?: #t</CODE> respectively. To ensure that each child is shown in its entirety, the children are sized according to the largest child in the layout, for whatever dimension is being equalized. </P>
<P>The <CODE>equalize-heights?:</CODE> and <CODE>equalize-widths?:</CODE> init-keywords are particularly useful when defining a row of buttons, when you want to ensure that the buttons are sized automatically. In addition, remember that each button can be specified as <CODE>max-width: $fill</CODE> to ensure that the button is sized to be as large as possible, rather than the size of its label.</P>
<P>To add space between each child in a layout, use <CODE>spacing:</CODE>, which takes an integer value that represents the number of pixels of space that is placed around each child in the layout. Use <CODE>border:</CODE> in much the same way; specifying an integer value creates a border around the entire layout which is that number of pixels wide. Notice that while <CODE>spacing:</CODE> places space around each individual child in the layout, <CODE>border:</CODE> creates a border around the entire layout. You can use <CODE>border-type:</CODE> to specify whether you want borders to appear sunken, raised, or flat.</P>
<P>Each of the init-keywords described above apply to both row layouts and column layouts. The following init-keywords each only apply to one of these classes.</P>
<P>Use <CODE>x-alignment:</CODE> to align the children of a column layout along the <I>x</I> axis. This can be either <CODE>#&quot;left&quot;</CODE>, <CODE>#&quot;right&quot;</CODE>, or <CODE>#&quot;center&quot;</CODE>, and the children of the column layout are aligned appropriately. By default, the children of a column layout are aligned along the left hand side.</P>
<P>Use <CODE>y-alignment:</CODE> to align the children of a row layout along the <I>y</I> axis. This can be either <CODE>#&quot;top&quot;</CODE>, <CODE>#&quot;bottom&quot;</CODE>, <CODE>or</CODE> <CODE>#&quot;center&quot;</CODE>, and the children of the column layout are aligned appropriately. By default, the children of a row layout are aligned along the top.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Building Applications Using DUIM - 26 May 1999</ADDRESS>
<P><A HREF="dguid_94.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="dguid_92.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="dguid_92.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="dguide_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="dguide_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="dgui_110.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
