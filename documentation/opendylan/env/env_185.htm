<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="env_1.htm">
<LINK REL=UP HREF="env_184.htm">
<LINK REL=PREV HREF="env_184.htm">
<LINK REL=NEXT HREF="env_186.htm">
<TITLE>A.2.1   Creating the server stubs library</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING185></A>

<DIV>
<P><A HREF="env_186.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_184.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_184.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>A.2   An example COM server and client</P>

</DIV>
<A NAME=HEADING185-0></A>
<H1>A.2.1   Creating the server stubs library</H1>
<P>First we use the New Project wizard to create a Dylan library defining server-side stubs for the encryption interface.</P>
<DL>
<DT><DD>1.  Choose <B>File &gt; New...</B> from the main window.
<DT><DD>2.  Select <B>Project</B> and click <B>OK</B>.
<DT><DD>The New Project wizard appears. 
<DT><DD>3.  In the Project Type section, select "Interface to COM Type Library" and click <B>Next</B>.
</DL>
<P>The next page allows you to name a type library to be translated. Most COM components store the location of their type libraries in the Windows Registry. These registered type libraries are listed in the Installed Type Libraries section of the window. You can select a type library from the list, or click <B>Browse...</B> in the Location pane to select a type library file from disk.</P>
<P><IMG ALIGN=TOP SRC=motwiz.gif></P>
<P>Figure A.1   <A NAME=MARKER-10-728></A>Choosing a type library file to convert.</P>
<P>In this case, we use a type library supplied with Functional Developer. </P>
<DL>
<DT><DD>4.  Click <B>Browse...</B> and navigate to the Functional Developer examples folder. 
<DT><DD>The folder required is called Examples and is placed under the top-level Functional Developer folder. 
<DT><DD>It is usually <CODE>C:\Program Files\Functional Objects\Functional Developer\Examples</CODE>.
<DT><DD>5.  Go to the <CODE>Documentation\RotNExample</CODE> subfolder and choose the <CODE>RotNExample.tlb</CODE> file.
<DT><DD>6.  Click <B>Next</B> to continue to the next page of the wizard. 
</DL>
<P><A NAME=MARKER-10-729></A><IMG ALIGN=TOP SRC=motstub.gif></P>
<P>Figure A.2   Choosing the kind of skeleton code to generate.</P>
<P>The next page allows you to choose what kind of stubs to generate from the type library. There are two options:</P>
<DL>
<DT>Dispatch client interfaces <DD><P></P>
<DT><DD>Defines Dylan code to allow you to interface to COM servers.
<DT>Dispatch server skeletons<DD><P></P>
<DT><DD>Defines Dylan code to allow you to create COM servers implementing the interfaces described in the type library.
</DL>
<P>Because we are writing the server side of the application, we want to generate dispatch server skeleton code.</P>
<DL>
<DT><DD>7.  Select "Dispatch server skeletons".
<DT><DD>8.  Click <B>Next</B> to continue to the next page of the wizard.
</DL>
<P><A NAME=MARKER-10-730></A><IMG ALIGN=TOP SRC=motinters.gif></P>
<P>Figure A.3   Choosing interfaces and classes from the type library.</P>
<P>The next page presents a list of COM classes and interfaces contained in the selected type library. You can select which to translate by choosing "Translate selected" and then clicking to select individual items, dragging or using the Shift key to select ranges, and using the Ctrl key to select additional items. Choose "Translate all" and all classes and interfaces in the type library will be translated. This is different from selecting all items under "Translate selected" because if classes or interfaces are added to the type library later, they will only be translated if you selected "Translate all".</P>
<DL>
<DT><DD>9.  Choose "Translate all", so that both the RotNExample COM class and the IRotNExample interface are translated. 
<DT><DD>10.  Click <B>Next</B>.
</DL>
<P>Now we reach the Project Name and Location page. This and all subsequent pages are the same as those that you see for other kinds of project in the New Project wizard. Follow the remaining steps to finish defining the server stubs project.</P>
<DL>
<DT><DD>11.  Change the name of the project to <B>RotNExample-server-stubs</B>.
<DT><DD>12.  Choose a suitable Location for the project.
<DT><DD>13.  Make sure that the "Dynamic Link Library (DLL)" option is chosen in the Project Settings and Templates section.
<DT><DD>14.  Make sure that the "Include any available templates" option is <I>not</I> checked.
<DT><DD>15.  Click <B>Next</B> to continue.
</DL>
<P>We are now at the Use Libraries page. We are only defining the stubs for the server, so we do not need any unusual libraries. </P>
<DL>
<DT><DD>16.  Choose the "Minimal" option. 
<DT><DD>17.  Click <B>Next</B> to continue.
</DL>
<P>We are now at the final page of the New Project wizard.</P>
<DL>
<DT><DD>18.  Make any changes you want to the Source File Headers section. 
<DT><DD>19.  Click <B>Finish</B>.
<DT><DD>The new project appears. 
</DL>
<P><A NAME=MARKER-10-731></A><IMG ALIGN=TOP SRC=motproj.gif></P>
<P>Figure A.4   The server stubs project.</P>
<P>In addition to the usual files, this project contains a file named <CODE>type-library.spec</CODE>. This is a specification file. It provides information to the type library tool.</P>
<DL>
<DT><DD>20.  Double-click on the specification file. 
<DT><DD>An editor window opens on the specification file. 
</DL>
<P>The specification file looks something like this:</P>
<PRE>
Origin: COM-type-library
Type-library: C:\Program Files\Functional Objects\Functional Developer\Examples\...\RotNExample.tlb
Module: type-library-module
Module-file: type-library-module.dylan
Generate: dispatch-servers
Stub-file: stubs.dylan
<P></P>
</PRE>
<P>As you can see, the specification file contains all the information provided to the type library portion of the New Project wizard.</P>
<P>However, no skeleton code has yet been generated. The type library tool, which generates the skeleton code, only runs when you build the project. </P>
<DL>
<DT><DD>21.  Build the project with <B>Project &gt; Build</B>.
</DL>
<P>The build process adds some new files to the project. These files were generated by the type library tool.</P>
<P>The file <CODE>type-library-module.dylan</CODE> defines a module in which the translated code resides. This module exports all translated symbols. If you look at <CODE>module.dylan</CODE>, you will see that the main module re-exports all of these symbols.</P>
<P>The file <CODE>stubs.dylan</CODE> contains the Dylan code generated by the type library tool. It defines a class for an implementation of the IRotNExample interface, and generic functions for the methods and properties of the interface:</P>
<PRE>
/* Dispatch interface: IRotNExample version 0.0
* GUID: {822ED42A-3EB1-11D2-A3CA-0060B0572A7F}
* Description: An example interface for Functional Developer's Getting
  Started manual. */
<P></P>
define open dispatch-interface &lt;IRotNExample&gt; (&lt;simple-dispatch&gt;)
  uuid &quot;{822ED42A-3EB1-11D2-A3CA-0060B0572A7F}&quot;;
  virtual property IRotNExample/key :: type-union(&lt;integer&gt;, 
    &lt;machine-word&gt;), name: &quot;key&quot;, disp-id: 12288;
  function IRotNExample/encrypt (arg-pre :: &lt;string&gt;) =&gt;
    (arg-result :: &lt;string&gt;), name: &quot;encrypt&quot;, disp-id: 24576;
  function IRotNExample/decrypt (arg-pre :: &lt;string&gt;) =&gt;
    (arg-result :: &lt;string&gt;), name: &quot;decrypt&quot;, disp-id: 24577;
end dispatch-interface &lt;IRotNExample&gt;;
<P></P>
define open generic IRotNExample/key (this :: &lt;IRotNExample&gt;) =&gt; 
  (arg-result :: type-union(&lt;integer&gt;, &lt;machine-word&gt;));
<P></P>
define open generic IRotNExample/key-setter (arg-result :: 
  type-union(&lt;integer&gt;, &lt;machine-word&gt;), this :: &lt;IRotNExample&gt;)
=&gt; (arg-result :: type-union(&lt;integer&gt;, &lt;machine-word&gt;));
<P></P>
define open generic IRotNExample/encrypt (this :: &lt;IRotNExample&gt;,
  arg-pre :: &lt;string&gt;) =&gt; (result :: &lt;HRESULT&gt;, arg-result ::
    &lt;string&gt;);
define open generic IRotNExample/decrypt (this :: &lt;IRotNExample&gt;,
  arg-pre :: &lt;string&gt;) =&gt; (result :: &lt;HRESULT&gt;, arg-result ::
    &lt;string&gt;);
<P></P>
</PRE>
<P>This defines a class <CODE>&lt;IRotNExample&gt;</CODE> which implements the given interface. The implementation is not complete until methods are provided for the generics. This can be done by adding methods in the same library, or by defining a subclass of <CODE>&lt;IRotNExample&gt;</CODE> in another library and defining methods on the subclass. We will take the latter approach.</P>
<P>There is also generated code corresponding to the COM class RotNExample from the type library:</P>
<PRE>
/* COM class: RotNExample version 0.0
* GUID: {C44502DB-3EB1-11D2-A3CA-0060B0572A7F}
* Description: Implementation of IRotNExample.
*/
<P></P>
define constant $RotNExample-class-id = as(&lt;REFCLSID&gt;, 
  &quot;{C44502DB-3EB1-11D2-A3CA-0060B0572A7F}&quot;);
<P></P>
/* You should define your coclass something like this:

define coclass $RotNExample-type-info
  name &quot;RotNExample&quot;;
  uuid $RotNExample-class-id;
  default interface &lt;IRotNExample&gt;;
end coclass;

*/
<P></P>
</PRE>
<P>Note that the <CODE>define</CODE> <CODE>coclass</CODE> is within a comment, since you may want to define a COM class based on a subclass of <CODE>&lt;IRotNExample&gt;</CODE>.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Getting Started with Functional Developer - 31 MAR 2000</ADDRESS>
<P><A HREF="env_186.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_184.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_184.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
