<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="env_1.htm">
<LINK REL=UP HREF="env_42.htm">
<LINK REL=PREV HREF="env_45.htm">
<LINK REL=NEXT HREF="env_47.htm">
<TITLE>3.3.4   Binding </TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING46></A>

<DIV>
<P><A HREF="env_47.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_45.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_42.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>3.3   Compilation </P>

</DIV>
<A NAME=HEADING46-0></A>
<H1>3.3.4   Binding </H1>
<P><A NAME=MARKER-2-282></A>Interactive Development mode and Production mode are in fact combinations of some lower-level compiler modes. Functional Developer presents these two <A NAME=MARKER-2-283></A>compilation modes to make development simpler, but some understanding of these lower-level modes is useful. They are <I>loose binding</I> and <I>tight binding</I>.</P>
<DL>
<DT><A NAME=MARKER-10-284></A>Loose binding<DD><P> This is a way of compiling code that makes no use of the type information available in the source. When the compiler is run using loose binding, it considers only names and macro definitions. References to objects and types are always made indirectly through the objects' names, so that the objects can be changed without forcing recompilation of code that uses them. </P>
<DT>Tight binding<DD><P> This is a way of compiling code that uses all type information available in order to drive optimizations. This type information includes declared types and some inferred types. Tight binding bypasses names, referencing objects and types directly. Amongst other optimizations, tight bindings inlines some methods, performs tail-call elimination, and removes unused code. These optimizations can affect the information seen in the debugger.</P>
</DL>
<P>Code can be loosely or tightly bound within a library, and it can be loosely or tightly bound with respect to other libraries. If code within a library is loosely bound, other libraries will be loosely bound to it. Similarly, if code is tightly bound within a library, other libraries will bind tightly to it.</P>
<P>The code within all libraries that Functional Objects supplies with Functional Developer--the system libraries--is tightly bound. This means that all libraries you develop will bind tightly to whichever of the system libraries you use. </P>
<P>When libraries are compiled in <A NAME=MARKER-2-285></A>Interactive Development mode, they are loosely bound internally, and therefore libraries that use them will be loosely bound to them. When libraries are <A NAME=MARKER-2-286></A>compiled in Production mode, they are tightly bound internally, and therefore libraries that use them are tightly bound to them.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Getting Started with Functional Developer - 31 MAR 2000</ADDRESS>
<P><A HREF="env_47.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_45.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_42.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
