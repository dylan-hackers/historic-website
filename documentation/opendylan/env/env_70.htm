<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="env_1.htm">
<LINK REL=UP HREF="env_53.htm">
<LINK REL=PREV HREF="env_69.htm">
<LINK REL=NEXT HREF="env_71.htm">
<TITLE>4.6   The project start function</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING70></A>

<DIV>
<P><A HREF="env_71.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_69.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_53.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>4 Creating and Using Projects</P>

</DIV>
<A NAME=HEADING70-0></A>
<A NAME=UID-projects-898858></A>
<H1>4.6   <A NAME=MARKER-9-359></A>The <A NAME=MARKER-2-360></A>project start function</H1>
<P>The New Project wizard always adds a <I>start function</I> to the end of the last file in the project. </P>
<P>The Dylan language does not require that a program define an explicit start function, such as <CODE>main</CODE> in C or Java. However, when you are debugging or interacting, Functional Developer finds it useful to know what you consider to be your program's start function. It allows the name of your start function to be recorded in its project information. By default, this name will be <CODE>main</CODE>, and corresponds to the <CODE>main</CODE> function that the New Project creates by default in the <I>project-name<CODE>.dylan</CODE></I> file for all new projects. However, you are free to change the name if you like--there is nothing special about it.</P>
<P>The <I>project-name<CODE>.dylan</CODE></I> file for all new projects will contain a definition of <CODE>main</CODE> and a call to it. Projects that include template code will contain this definition of <CODE>main</CODE>:</P>
<PRE>
define method main () =&gt; ()
  start-template()
end method main;
<P></P>
</PRE>
<P>Projects that do not include template code will contain this definition:</P>
<PRE>
define method main () =&gt; ()
  // Your program starts here...
end method main;
<P></P>
</PRE>
<P>For both kinds of project, the <I>project-name<CODE>.dylan</CODE></I> file will end with this expression:</P>
<PRE>
begin
  main();
end;
<P></P>
</PRE>
<P>The name of the Start Function is one of the project settings you can change in the <B>Project &gt; Settings...</B> dialog. It appears on the Debug page in the Start Function section. The default name is <CODE>main</CODE>, but you can change it to any valid Dylan name you like. If you do so, make sure to replace the call to <CODE>main</CODE> with a call to your new start function. The source file is not updated automatically.</P>
<P>Note that you can make the wizard use a different start function name in new project files by changing the default setting in the Advanced Project Settings dialog. Click <B>Advanced...</B> on the second wizard page to produce the dialog. In this case, the generated project code will call the correct new name without requiring you to make a change by hand.</P>
<P>The debugger uses the start function name to know where to pause a program that you start up in interaction mode with <B>Application &gt; Interact</B> or the Interact (<IMG ALIGN=TOP SRC=interact.gif>) toolbar button, or in debugging mode with <B>Application &gt; Debug</B>. When you start a program either way, the debugger allows the program to execute normally, but sets a breakpoint on the start function so that interaction or debugging begins at a point where the entire program has already been initialized.</P>
<P>If no start function is nominated for a project, the program pauses precisely before it exits but after everything in it has executed. This is usually what we want for a DLL, but not for an application.</P>
<P><B>Note:</B> To be sure that you can access all the definitions in your application when you start it up in interaction mode, the call to <CODE>main</CODE> must come after all the definitions in the project. Typically, this means the call must be the last expression in the last file listed in the project. Otherwise, the application will be paused before all its definitions have been initialized, and interactions involving its definitions could behave in unexpected ways. See <A HREF="env_51.htm#MARKER-9-294">"Application and library initialization" on page 55</A> for more information on this topic. <A NAME=MARKER-2-361></A></P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Getting Started with Functional Developer - 31 MAR 2000</ADDRESS>
<P><A HREF="env_71.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_69.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_53.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
