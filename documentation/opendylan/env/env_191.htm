<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="env_1.htm">
<LINK REL=UP HREF="env_182.htm">
<LINK REL=PREV HREF="env_190.htm">
<LINK REL=NEXT HREF="env_192.htm">
<TITLE>A.4   The type library tool and specification files</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING191></A>

<DIV>
<P><A HREF="env_192.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_190.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_182.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>A Creating COM Projects</P>

</DIV>
<A NAME=HEADING191-0></A>
<H1>A.4   <A NAME=MARKER-9-734></A>The type library tool and specification files</H1>
<P>The type library tool is invoked any time you build a project which includes a a type library tool specification, or .<A NAME=MARKER-2-735></A>SPEC, file. This is a text file, where the first line must be: </P>
<PRE>
Origin: COM-type-library 
<P></P>
</PRE>
<P>This line identifies that the type library tool should be used to process the file. When it runs, the type library tool will regenerate the module and stub files when they do not exist, or if the .SPEC file has been modified more recently then the last build.</P>
<P>Type library tool specification files can contain the following keywords:</P>
<STRONG>Type-library:</STRONG>
<P><I>SPEC file keyword</I></P>
<PRE>
Type-library: <I>typelibrary-path</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Required. Specifies the pathname of the type library to translate. If <I>typelibrary-path</I> is a relative path, it is considered to be relative to the location of the specification file.
</DL>
<STRONG>Module-file:</STRONG>
<P><I>SPEC file keyword</I></P>
<PRE>
Module-file: <I>module-file-to-generate</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Required. Specifies the pathname of the module file to generate. The file will be created, if necessary, and added to the project, if necessary.
</DL>
<STRONG>Module:</STRONG>
<P><I>SPEC file keyword</I></P>
<PRE>
Module: <I>module-name-to-generate</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Required. The name of the module definition to generate. This module definition is placed in the file <I>module-file-to-generate</I>.
</DL>
<STRONG>Stub-file:</STRONG>
<P><I>SPEC file keyword</I></P>
<PRE>
Stub-file: <I>stub-file-to-generate</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Required. Specifies the pathname of the Dylan source file to generate. This file will be created, if necessary, and added to the project, if necessary.
</DL>
<STRONG>Generate:</STRONG>
<P><I>SPEC file keyword</I></P>
<PRE>
Generate: <I>type-of-stubs</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Required. Determines what type of stubs are generated in the file specified using <CODE>Stub-file:</CODE>. Possible values of <I>type-of-stubs</I> are:
<DT><CODE>dispatch-clients</CODE> <DD><P></P>
<DT><DD>Dispatch client code is generated, using <CODE>define</CODE> <CODE>dispatch-client</CODE>.
<DT><CODE>dispatch-servers</CODE> <DD><P></P>
<DT><DD>Dispatch server code is generated, using <CODE>define</CODE> <CODE>dispatch-interface</CODE>.
<DT><CODE>vtable-interfaces</CODE> <DD><P></P>
<DT><DD>Custom (vtable) interfaces are generated, using <CODE>define</CODE> <CODE>vtable-interface</CODE>. The names of server interfaces are affected by the value of <CODE>Server-suffix:</CODE> (below). The names of client interfaces and whether client interfaces are generated are affected by the presence and the value of <CODE>Client-suffix:</CODE> (below).
<DT><CODE>dual-interfaces</CODE> <DD><P></P>
<DT><DD>Dual (vtable and dispatch) interfaces are generated, using <CODE>define</CODE> <CODE>vtable-interface</CODE>. The names of server interfaces are affected by the value of <CODE>Server-suffix:</CODE>. The names of client interfaces and whether client interfaces are generated are affected by the presence and the value of <CODE>Client-suffix:</CODE>.
</DL>
<STRONG>Server-suffix:</STRONG>
<P><I>SPEC file keyword</I></P>
<PRE>
Server-suffix: <I>server-suffix</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Optional. Only meaningful when <CODE>Generate:</CODE>'s <I>type-of-stubs</I> argument is <CODE>vtable-interfaces</CODE> or <CODE>dual-interfaces</CODE>. Specifies a suffix which is appended to generated server interface names. If no value is provided or the <CODE>Server-suffix:</CODE> keyword is omitted then no suffix is appended.
</DL>
<STRONG>Client-suffix:</STRONG>
<P><I>SPEC file keyword</I></P>
<PRE>
Client-suffix: <I>client-suffix</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Optional. Only meaningful when <CODE>Generate:</CODE>'s <I>type-of-stubs</I> argument is <CODE>vtable-interfaces</CODE> or <CODE>dual-interfaces</CODE>. Specifies a suffix which is appended to generated client interface names. If the <CODE>Client-suffix:</CODE> keyword is omitted then client classes are not generated (the client-class clause is not provided to the define vtable-interfaces or define dual-interfaces macro invocation). To generate client classes but not append a suffix, an empty value must be provided to the <CODE>Client-suffix:</CODE> keyword. For example:
</DL>
<PRE>
Client-suffix: 
<P></P>
</PRE>
<STRONG>Interfaces:</STRONG>
<P><I>SPEC file keyword</I></P>
<PRE>
Interfaces: <I>interfaces-and-coclasses-to-translate</I> 
<P></P>
</PRE>
<DL>
<DT><DD>Optional. If provided, specifies the names of the interfaces and COM classes to translate. If not provided, all interfaces and COM classes are translated. All interfaces or COM classes after the first listed should be provided on a new line, preceded by a tab or spaces. For example:
</DL>
<PRE>
Interfaces: IInterfaceOne
            InterfaceOneCoclass
            IInterfaceTwo
            InterfaceTwoCoclass
<P></P>
</PRE>
<P><A NAME=MARKER-2-736></A></P>
<P></P>
<A NAME=LINK-com-projects-lastpage></A><A NAME=LINK-console-firstpage></A><!-- FM pgf ignored -->

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Getting Started with Functional Developer - 31 MAR 2000</ADDRESS>
<P><A HREF="env_192.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_190.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_182.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
