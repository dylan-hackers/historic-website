<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="env_1.htm">
<LINK REL=UP HREF="env_25.htm">
<LINK REL=PREV HREF="env_28.htm">
<LINK REL=NEXT HREF="env_30.htm">
<TITLE>2.3.4   Fixing the error</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING29></A>

<DIV>
<P><A HREF="env_30.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_28.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_25.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>2.3   Problems at run time </P>

</DIV>
<A NAME=HEADING29-0></A>
<H1>2.3.4   Fixing the error</H1>
<P>In this section, we fix the Reversi project source code to eliminate the cause of the exception we have been tracking down.</P>
<P>This is what we have learned about the error so far:</P>
<UL>
<LI>It occurred when trying to save a Reversi game.
<LI>It was caused in a call to <CODE>coerce-from-element</CODE>, which attempted to pass an integer to <CODE>byte-char-to-byte</CODE>, a method which expects an instance of <CODE>&lt;byte-character&gt;</CODE>.
<LI>The <CODE>coerce-from-element</CODE> method received the integer from <CODE>write-element</CODE>, which received the integer from <CODE>reversi-square-write-data</CODE>.
<LI>The <CODE>reversi-square-write-data</CODE> method uses the <CODE>number-for-piece</CODE> method to translate board square representations (type <CODE>&lt;piece&gt;</CODE>) into instances of <CODE>&lt;integer&gt;</CODE>. The <CODE>&lt;piece&gt;</CODE> values are either <CODE>#f</CODE> (no piece on this square), <CODE>#&quot;white&quot;</CODE> (a white piece on this square), or <CODE>#&quot;black&quot;</CODE> (a black piece on this square); those values are translated into 0, 1, and 2 respectively. That is why <I>n</I> could have been either 0, 1, or 2 in the error message:
</UL>
<PRE>
Dylan error: <I>n</I> is not of type {&lt;class&gt;: &lt;BYTE-CHARACTER&gt;}
<P></P>
</PRE>
<DL>
<DT><DD>So the value of <I>n</I> depends on the state of the first square to be written.
</DL>
<P>In addition:</P>
<UL>
<LI>The <CODE>write-element</CODE> generic function is from the Functional Developer Streams library. It is part of that library's protocol for writing to streams.
<LI>The stack shows that the <CODE>write-element</CODE> method tried to coerce an integer to a byte character, and that the attempt failed.
</UL>
<P>So we know that Reversi is trying to write integer values to a file stream with a <CODE>&lt;byte-character&gt;</CODE> element type, and the exception occurs during the attempt to coerce an integer into a byte character. </P>
<P>We could simply change the file stream's element type to <CODE>&lt;integer&gt;</CODE>. </P>
<P>In fact, we have not yet looked at the call that created the file stream. That call is <CODE>reversi-game-save-game</CODE>.</P>
<DL>
<DT><DD>1.  Return to the debugger and select the call frame for <CODE>reversi-game-save-game</CODE>.
</DL>
<P>As expected, the source pane shows that the file stream is created with an element type of <CODE>&lt;byte-character&gt;</CODE>. The relevant code fragment is:</P>
<PRE>
let file-stream = make(&lt;file-stream&gt;, locator: file, 
                       direction: #&quot;output&quot;, 
                       element-type: &lt;byte-character&gt;);
<P></P>
</PRE>
<DL>
<DT><DD>2.  Click the Edit Source (<IMG ALIGN=TOP SRC=editsrc.gif>) button above the source code pane.
<DT><DD>An editor window opens on <CODE>saving.dylan</CODE>. 
</DL>
<P>We now have <CODE>saving.dylan</CODE> in the editor, and the insertion point is positioned at the start of the definition for <CODE>reversi-game-save-game</CODE>. We can make the change to <CODE>&lt;integer&gt;</CODE>, but should first check <CODE>reversi-game-load-game</CODE>, the method that loads games saved by <CODE>reversi-game-save-game</CODE>, to see what sort of file-stream elements it expects to read back. </P>
<P>That definition is located directly below that of <CODE>reversi-game-save-game</CODE>. It shows that the file-stream element type expected is <CODE>&lt;byte&gt;</CODE>. </P>
<PRE>
let file-stream = make(&lt;file-stream&gt;, locator: file, 
                       direction: #&quot;input&quot;, 
                       element-type: &lt;byte&gt;);
<P></P>
</PRE>
<P>The class <CODE>&lt;byte&gt;</CODE> is actually a constant value, defined:</P>
<PRE>
define constant &lt;byte&gt; = limited(&lt;integer&gt;, min: 0, max: 255);
<P></P>
</PRE>
<P>So there is no harm in changing the <CODE>element-type:</CODE> argument in <CODE>reversi-game-save-game</CODE>'s call to <CODE>make</CODE> from <CODE>&lt;byte-character&gt;</CODE> to <CODE>&lt;integer&gt;</CODE> (because 0, 1, and 2 are all within the defined range for <CODE>&lt;byte&gt;</CODE>), but for symmetry we may as well change it to <CODE>&lt;byte&gt;</CODE>.</P>
<DL>
<DT><DD>3.  Fix the definition of <CODE>reversi-game-save-game</CODE>.
<DT><DD>The <CODE>element-type:</CODE> keyword in the call to <CODE>make</CODE> on <CODE>&lt;file-stream&gt;</CODE> should take <CODE>&lt;byte&gt;</CODE>, not <CODE>&lt;byte-character&gt;</CODE>.
<DT><DD>4.  Choose <B>File &gt; Save</B> in the editor. 
</DL>
<P>Before we can rebuild the application we need to stop the current version running.</P>
<DL>
<DT><DD>5.  Choose <B>Application &gt; Stop</B> in the editor. 
<DT><DD>A dialog appears asking you to confirm that you want to stop the application.
<DT><DD>6.  Click <B>OK</B>. 
<DT><DD>7.  Rebuild the application with <B>Project &gt; Build</B>. 
<DT><DD>8.  Start the application again, and try to save a game.
</DL>
<P>The save operation now works without raising an unhandled exception. </P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Getting Started with Functional Developer - 31 MAR 2000</ADDRESS>
<P><A HREF="env_30.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_28.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_25.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
