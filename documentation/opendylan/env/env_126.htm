<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="env_1.htm">
<LINK REL=UP HREF="env_123.htm">
<LINK REL=PREV HREF="env_125.htm">
<LINK REL=NEXT HREF="env_127.htm">
<TITLE>6.9.3   Interaction basics using the Dylan playground</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING126></A>

<DIV>
<P><A HREF="env_127.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_125.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_123.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>6.9   Interacting with an application</P>

</DIV>
<A NAME=HEADING126-0></A>
<H1>6.9.3   <A NAME=MARKER-9-517></A>Interaction basics using the Dylan playground</H1>
<P><A NAME=MARKER-10-518></A>The <A NAME=MARKER-2-519></A>Dylan playground allows you to carry out interactive Dylan programming experiments. The playground is a pre-built Dylan application that you can start from the main window using the Open Playground button (<IMG ALIGN=TOP SRC=playground.gif>), or with the menu command <B>Tools &gt; Open Playground</B> from any Functional Developer window. The playground has its own project, which also opens when you start it. </P>
<DL>
<DT><DD>1.  Start the playground with <B>Tools &gt; Open Playground</B> in any open window.
</DL>
<P>Upon opening the playground, its project window appears. Then the playground application starts automatically and enters the debugger. The debugger window has a large interaction pane, and no visible stack or source panes. This is the debugger's <I>interaction layout</I>. (We can change the layout to the normal debugging layout with <B>View &gt; Debugging Layout</B>.)</P>
<P>One of the simplest things we can do in the interaction pane is to use it as a desktop calculator.</P>
<DL>
<DT><DD>2.  Enter <CODE>56 - 24;</CODE> at the interaction pane prompt. 
<DT><DD>Make sure to include the terminating semi-colon, and to include spaces between the numbers and the <CODE>-</CODE> sign.
</DL>
<PRE>
? 56 - 24;
=&gt; $0 = 32

?
<P></P>
</PRE>
<P>Here, text entered after the <CODE>?</CODE> represents interaction pane input, and text after the <CODE>=&gt;</CODE> represents interaction pane output. </P>
<P><A NAME=MARKER-10-520></A>Any compilation warnings resulting from typing errors are displayed in the interaction pane itself. </P>
<P>The interaction pane offers a history facility which allows us to refer to previous interaction results. Each value returned by an interactive expression is bound to a name, which we can then use in subsequent expressions. We call these bindings history variables. They are named using a dollar sign ($) suffixed with an integer. To keep the history variable names unique, the integer suffix increments each time a new history variable is created. So far, our one result was assigned to the history variable <CODE>$0</CODE>.</P>
<P>We can add the value bound to <CODE>$0</CODE> to itself.</P>
<DL>
<DT><DD>3.  Enter <CODE>$0 + $0;</CODE> at the interaction pane prompt.
</DL>
<PRE>
? $0 + $0;
=&gt; $1 = 64

?
<P></P>
</PRE>
<P>This expression produces the expected result of 64 and creates a new history variable, <CODE>$1</CODE>, bound to that result. </P>
<P><B>Note:</B> History variable values are local to the debugger in which they were created, so you cannot refer to a history variable from any other debugger's interaction pane. <A NAME=MARKER-10-521></A> </P>
<P>We can define new classes and methods interactively simply by entering their definitions.</P>
<DL>
<DT><DD>4.  Enter the following definition of <CODE>&lt;my-class&gt;</CODE> at the interaction pane prompt.
</DL>
<PRE>
define class &lt;my-class&gt; (&lt;object&gt;)
    slot my-slot :: &lt;integer&gt;
end class &lt;my-class&gt;;
<P></P>
</PRE>
<P><B>Note:</B> You can hit Return to format your input in multi-line form where you prefer. (An expression is only evaluated when you hit Return after a semicolon.)</P>
<P>The output in the interaction pane is:</P>
<PRE>
? define class &lt;my-class&gt; (&lt;object&gt;)
    slot my-slot :: &lt;integer&gt;
end class &lt;my-class&gt;;

=&gt; No values 
<P></P>
</PRE>
<DL>
<DT><DD>5.  Enter <CODE>&lt;my-class&gt;;</CODE> at the interaction pane prompt.
</DL>
<PRE>
? &lt;my-class&gt;;
=&gt; $2 = {&lt;class&gt;: &lt;my-class&gt;}

?
<P></P>
</PRE>
<P>Return values in the <A NAME=MARKER-2-522></A>interactor are "live". You can use the shortcut (right-click) menu to perform a variety of useful operations on them. </P>
<P>The <B>Show Contents</B> command allows you to browse the contents of values within the interaction pane itself. What you see depends on the type of the value; with a class, each slot name and slot value is listed. Each slot value is bound to new history variable so you can refer to it in future interactive expressions. </P>
<DL>
<DT><DD>6.  Right-click over <CODE>$2 = {&lt;class&gt;: &lt;my-class&gt;}</CODE> and choose <B>Show Contents</B>.
</DL>
<PRE>
=&gt; $2 = {&lt;class&gt;: &lt;my-class&gt;}

? Contents of {&lt;class&gt;: &lt;my-class&gt;}
=&gt; {&lt;class&gt;: &lt;my-class&gt;} is a &lt;class&gt;
    $3 = instance?-iep                : '\&lt;-49&gt;'
    $4 = debug-name                  : &quot;&lt;my-class&gt;&quot;
    $5 = class-implementation-class  : {&lt;implementation-class&gt;}
    $6 = class-subtype-bit           : 0
    $7 = class-module                : {&lt;module&gt;}

?
<P></P>
</PRE>
<P>For the duration of the interactive session with a project, interactively created definitions, objects, and any resultant warnings are layered onto the project's compiler database. During an interactive session, these items will be available in the project window and browser. You can think of them as being like any definition or object, with the exception that they do not come from a source file.</P>
<DL>
<DT><DD>7.  Enter <CODE>define variable *obj* = make(&lt;my-class&gt;);</CODE> at the interaction pane prompt.
<DT><DD>8.  In the playground's project window, go to the Definitions page.
<DT><DD>9.  Expand <B>library dylan-playground</B> and then <B>module dylan-playground</B>.
</DL>
<P>Three definitions are listed under <B>module dylan-playground</B>: one for <CODE>*obj*</CODE>, one for <CODE>&lt;my-class&gt;</CODE>, one for the <CODE>my-slot</CODE> accessor, one for its getter, and one for the method <CODE>main</CODE>. Thus we see two interactively created definitions alongside one definition created at compile time.</P>
<P> <A NAME=MARKER-10-523></A><IMG ALIGN=TOP SRC=interact-objs.gif></P>
<P>Figure 6.5   Interactively created definitions alongside a compile-time definition.</P>
<P>We can also use the interactor to make a <A NAME=MARKER-2-524></A>GUI window by using the Dylan User Interface Manager (DUIM) capabilities. For example:</P>
<DL>
<DT><DD>1.  At the interaction pane prompt, enter:
</DL>
<PRE>
contain(make(&lt;push-button&gt;,
             label: &quot;Hello World! This is my DUIM window.&quot;));
<P></P>
</PRE>
<DL>
<DT><DD>2.  The code is compiled and run and a DUIM window opens.
</DL>
<P>Figure 6.6   <A NAME=MARKER-10-525></A>Window created interactively with the Dylan User Interface Manager.</P>
<P> <IMG ALIGN=TOP SRC=duimhello.gif></P>
<P>For more information about creating GUI interfaces with Functional Developer, see the <I>Building Applications Using DUIM</I> and <I>DUIM Reference</I> manuals.</P>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Getting Started with Functional Developer - 31 MAR 2000</ADDRESS>
<P><A HREF="env_127.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_125.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_123.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
