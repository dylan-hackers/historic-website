<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!-- Generated by Harlequin WebMaker 3.0.2 ( 8-May-1997) -->
<HEAD>
<LINK REL=TOP HREF="env_1.htm">
<LINK REL=UP HREF="env_184.htm">
<LINK REL=PREV HREF="env_185.htm">
<LINK REL=NEXT HREF="env_187.htm">
<TITLE>A.2.2   Creating the server</TITLE>
<META NAME=GENERATOR CONTENT="Harlequin WebMaker 3.0.2 ( 8-May-1997)">
</HEAD>
<BODY BGCOLOR="#FEFEF2" TEXT="#000000" LINK="#0000FF" VLINK="#800080" ALINK="#FF0000">

<DIV>
<A NAME=HEADING186></A>

<DIV>
<P><A HREF="env_187.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_185.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_184.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>
<P>A.2   An example COM server and client</P>

</DIV>
<A NAME=HEADING186-0></A>
<H1>A.2.2   Creating the server</H1>
<P>Now we create the actual server application. </P>
<DL>
<DT><DD>1.  Choose <B>File &gt; New...</B> from the main window.
<DT><DD>2.  Select <B>Project</B> and click <B>OK</B>.
<DT><DD>The New Project wizard appears. 
<DT><DD>3.  In the Project Type section, select "GUI Application (EXE)" and click <B>Next</B>.
<DT><DD>4.  Name the project <CODE>RotNExample-server</CODE>. 
<DT><DD>5.  Make sure that the "Include any available templates" option is <I>not</I> checked.
<DT><DD>6.  Make sure that "Production mode" is selected in the Compilation Mode section of the Advanced Project Settings dialog.
<DT><DD>This option will be set already if you have been following all steps from the start of this chapter.
<DT><DD>7.  Click <B>Next</B> to continue.
<DT><DD>8.  Choose the "Simple" libraries option and click <B>Next</B> to continue.
<DT><DD>9.  Choose the "Standard IO streams and string formatting" option from "IO and system support", and click <B>Next</B>.
<DT><DD>10.  Choose the "Win32 API" option from "GUI support", and click <B>Next</B>.
<DT><DD>11.  Choose the "OLE Automation" option from "OLE Automation support" and click <B>Next</B>. 
<DT><DD>12.  Choose the "None&Yacute;" option from "Database support" and click <B>Next</B>.
<DT><DD>13.  Click <B>Finish</B>.
<DT><DD>The RotNExample-server project window appears.
<DT><DD>14.  In the new project's window, edit <CODE>library.dylan</CODE>, and add to the <CODE>define</CODE> <CODE>library</CODE> declaration the following line:
</DL>
<PRE>
  use RotNExample-server-stubs;
<P></P>
</PRE>
<DL>
<DT><DD>15.  Add the same line to the <CODE>define</CODE> <CODE>module</CODE> declaration in <CODE>module.dylan</CODE>.
</DL>
<P>To implement the IRotNExample interface, we will create a subclass of <CODE>&lt;IRotNExample&gt;</CODE>. Because <CODE>&lt;IRotNExample&gt;</CODE> was created with <CODE>define</CODE> <CODE>dispatch-interface</CODE>, we must use <CODE>define</CODE> <CODE>COM-interface</CODE> to create the subclass.</P>
<P><B>Note:</B> The remainder of this section of the example involves adding code to <CODE>RotNExample-server.dylan</CODE>. A version of this file with all the code we add in this section is available in the Functional Developer installation folder, under <CODE>Examples\Documentation\RotNExample\RotNExample-server.dylan</CODE>. You may want to copy that file into place in your project folder rather than typing code in.</P>
<DL>
<DT><DD>16.  Add the following code to <CODE>RotNExample-server.dylan</CODE>.
</DL>
<PRE>
define COM-interface &lt;IRotN-implementation&gt; (&lt;IRotNExample&gt;)
  slot IRotNExample/key :: 
    type-union(&lt;integer&gt;, &lt;machine-word&gt;) = 13;
end;
<P></P>
</PRE>
<DL>
<DT><DD>If you add this by hand, make sure not to put it after the top-level call to <CODE>main</CODE>.
</DL>
<P>We provide here an implementation for the <CODE>IRotNExample/key</CODE> slot, which was defined as a virtual slot in the superclass. This slot must accept the <CODE>&lt;machine-word&gt;</CODE> type, since any 32-bit integer which does not fit in the range of a Dylan <CODE>&lt;integer&gt;</CODE> will be passed as a <CODE>&lt;machine-word&gt;</CODE>.</P>
<P>The next task is to define the <CODE>IRotNExample/encrypt</CODE> and <CODE>IRotNExample/decrypt</CODE> methods. Although it is not obvious from the definition of <CODE>&lt;IRotNExample&gt;</CODE>, these methods must take as their first parameter the instance of <CODE>&lt;IRotN-implementation&gt;</CODE> they operate on, and return as a first result a COM error code.</P>
<DL>
<DT><DD>17.  Add the following code to <CODE>RotNExample-server.dylan</CODE>.
</DL>
<PRE>
define method IRotNExample/encrypt 
  (this :: &lt;IRotN-implementation&gt;, pre :: &lt;string&gt;)
    =&gt; (result :: &lt;HRESULT&gt;, post :: &lt;string&gt;)

  if (instance?(this.IRotNExample/key, &lt;integer&gt;))
    let post = make(&lt;string&gt;, size: pre.size);
    for (char keyed-by index in pre)
      post[index] := rot-char-by-n(char, this.IRotNExample/key);
    end for;
    values($S-OK, post)
  else
    values($E-INVALIDARG, &quot;&quot;)
  end if
end;
<P></P>
define method IRotNExample/decrypt 
  (this :: &lt;IRotN-implementation&gt;, pre :: &lt;string&gt;)
    =&gt; (result :: &lt;HRESULT&gt;, post :: &lt;string&gt;)

  if (instance?(this.IRotNExample/key, &lt;integer&gt;))
    let post = make(&lt;string&gt;, size: pre.size);
    for (char keyed-by index in pre)
      post[index] := rot-char-by-n(char, -this.IRotNExample/key);
    end for;
    values($S-OK, post)
  else
    values($E-INVALIDARG, &quot;&quot;)
  end if
end;
<P></P>
</PRE>
<P>Note that this code is careful not to crash when <CODE>IRotNExample/key</CODE> is a <CODE>&lt;machine-word&gt;</CODE>. <CODE>$S-OK</CODE> represents success. <CODE>$E-INVALIDARG</CODE> is a generic failure representing some kind of invalid argument value.</P>
<P>The above method uses the <CODE>rot-char-by-n</CODE> function, which we must also add.</P>
<DL>
<DT><DD>18.  Add the following code to <CODE>RotNExample-server.dylan</CODE>.
</DL>
<PRE>
define function rot-char-by-n 
  (char :: &lt;character&gt;, n :: &lt;integer&gt;) 
    =&gt; (r :: &lt;character&gt;)

  let char-as-int = as(&lt;integer&gt;, char);
  local method rot-if-in-range 
    (lower :: &lt;integer&gt;, upper :: &lt;integer&gt;) =&gt; ()

    if (lower &lt;= char-as-int &amp; char-as-int &lt;= upper)
      char-as-int := lower + modulo(char-as-int - lower + n, 
                                    upper - lower + 1);
    end if;
  end method;
  rot-if-in-range(as(&lt;integer&gt;, 'a'), as(&lt;integer&gt;, 'z'));
  rot-if-in-range(as(&lt;integer&gt;, 'A'), as(&lt;integer&gt;, 'Z'));
  as(&lt;character&gt;, char-as-int)
end;
<P></P>
</PRE>
<P>This function rotates alphabetic characters forward <I>n</I> positions, wrapping around if the character passes "Z". When <I>n</I> is 13, this implements the classic Rot13 cipher often used to hide offensive material on USENET.<A NAME=MARKER-10-732></A> </P>
<P>In order to create our server, we must also create a COM class for it.</P>
<DL>
<DT><DD>19.  Add the following code to <CODE>RotNExample-server.dylan</CODE>. 
<DT><DD>You may want to copy the <CODE>define</CODE> <CODE>coclass</CODE> code from <CODE>stubs.dylan</CODE> in the <CODE>RotNExample-server-stubs</CODE> project and modify it.
</DL>
<PRE>
define coclass $RotNExample-type-info
  name &quot;RotNExample&quot;;
  uuid $RotNExample-class-id;
  default interface &lt;IRotN-implementation&gt;;
end coclass;
<P></P>
</PRE>
<P>Now we simply have to add a Windows event loop as the main body of the server program.</P>
<DL>
<DT><DD>20.  Modify the <CODE>main</CODE> method in <CODE>RotNExample-server.dylan</CODE> to look like the following.
</DL>
<PRE>
define method main () =&gt; ()
  if (OLE-util-register-only?())
    register-coclass($RotNExample-type-info,
      &quot;FunDev.RotNExample&quot;);
  else
    let factory :: &lt;class-factory&gt;
      = make-object-factory($RotNExample-type-info);

    with-stack-structure (pmsg :: &lt;PMSG&gt;)
      while (GetMessage(pmsg, $NULL-HWND, 0, 0))
        TranslateMessage(pmsg);          
        DispatchMessage(pmsg);
      end while;     
    end with-stack-structure;

    revoke-registration(factory);
  end if;
end method main;
<P></P>
</PRE>
<P>With this code in place, if the server is invoked from the command line with <CODE>/RegServer</CODE> as an argument, <CODE>OLE-util-register-only?</CODE> will return <CODE>#t</CODE>. The call to <CODE>register-coclass</CODE> creates a type library (with extension .TLB) and registers the type library and the server itself in the Windows registry.</P>
<P>Note that the server provides no way to exit. We can make it exit whenever our interface object is destroyed. This is a little simplistic, since it does not correctly handle the case in which two servers are created, but it will suffice for our example.</P>
<DL>
<DT><DD>21.  Add the following code to <CODE>RotNExample-server.dylan</CODE>.
</DL>
<PRE>
define method terminate (this :: &lt;IRotN-implementation&gt;) =&gt; ()
  next-method();
  PostQuitMessage(0);  // Cause main event loop to terminate.
end;
<P></P>
</PRE>
<P>The <CODE>PostQuitMessage</CODE> call causes the next call to <CODE>GetMessage</CODE> (in the main event loop) to return <CODE>#f</CODE>, and thus cause the program to exit.</P>
<DL>
<DT><DD>22.  Build the project with <B>Project &gt; Build</B>.
<DT><DD>During the build, you will be prompted for the location of the project file <CODE>RotNExample-server-stubs.hdp</CODE>. 
</DL>

</DIV>

<DIV>

<DIV>

<!-- TOC -->

</DIV>

<HR>
<ADDRESS>Getting Started with Functional Developer - 31 MAR 2000</ADDRESS>
<P><A HREF="env_187.htm"><IMG ALIGN=BOTTOM SRC=next.gif ALT=Next BORDER=0></A> <A HREF="env_185.htm"><IMG ALIGN=BOTTOM SRC=prev.gif ALT=Previous BORDER=0></A> <A HREF="env_184.htm"><IMG ALIGN=BOTTOM SRC=up.gif ALT=Up BORDER=0></A> <A HREF="env_1.htm"><IMG ALIGN=BOTTOM SRC=top.gif ALT=Top BORDER=0></A> <A HREF="env_2.htm"><IMG ALIGN=BOTTOM SRC=content.gif ALT=Contents BORDER=0></A> <A HREF="env_206.htm"><IMG ALIGN=BOTTOM SRC=index.gif ALT=Index BORDER=0></A></P>

</DIV>
</BODY>
</HTML>
