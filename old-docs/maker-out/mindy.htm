<HTML>
<HEAD>
<TITLE>Gwydion Dylan The Mindy Compiler and Interpreter  The Mindy Compiler and Interpreter</TITLE>
<LINK REL="ToC" HREF="httoc.htm">
<LINK REL="Index" HREF="htindex.htm">
<LINK REL="Next" HREF="debug.htm"></HEAD>
<BODY>

<H2>The Mindy Compiler and Interpreter</H2>
<P ALIGN=CENTER>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="gmindy/blrprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="gmindy/blrtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>
<A HREF="htindex.htm" TARGET="_self"><IMG SRC="gmindy/blrindex.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Index"></A>
<A HREF="debug.htm" TARGET="_self"><IMG SRC="gmindy/blrnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://legend.gwydion.cs.cmu.edu/gwydion" TARGET="_self"><IMG SRC="gmindy/blrhome.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="See Page"></A>

<P>
<CENTER><TABLE BORDER=1 CELLSPACING=1 ><TR>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="mindy.htm#E28E1">Mindy Compiler</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="debug.htm#E28E2">Mindy Debugger</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="inspect.htm#E28E3">Mindy Object</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="EXTENS~1.htm#E28E4">Extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="streams.htm#E28E5">Streams Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="STANDA~1.htm#E28E6">Standard IO</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="print.htm#E28E7">Print Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="format.htm#E28E8">Format Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="melange.htm#E28E9">Melange Interface</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="dylan-tk.htm#E28E10">TK Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="COLLEC~1.htm#E28E11">Collection extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="TABLE-~1.htm#E28E12">Table Extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="STRING~1.htm#E28E13">String extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="REGULA~1.htm#E28E14">Regular Expressions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="TRANSC~1.htm#E28E15">Transcendental Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="time.htm#E28E16">Time Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="random.htm#E28E17">Random Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="matrix.htm#E28E18">Matrix Library</A>
</TD></FONT>
</TR></TABLE>
</CENTER><HR ALIGN=CENTER>
<P>
<UL>
<LI>
<A HREF="#E8E1" >1. Introduction</A>
<LI>
<A HREF="#E8E2" >2. Hello, World</A>
<LI>
<A HREF="#E8E3" >3.  The Main Routine</A>
<LI>
<A HREF="#E8E4" >4.  Multiple Files</A>
<LI>
<A HREF="#E8E5" >5. Return Codes</A>
<LI>
<A HREF="#E8E6" >6. Command Line Switches and Environment Variables</A>
<LI>
<A HREF="#E8E7" >7. Errors and Warnings</A>
<UL>
<LI>
<A HREF="#E10E1" >7.1. Syntax Errors</A>
<LI>
<A HREF="#E10E2" >7.2. Runtime Errors</A>
<LI>
<A HREF="#E10E3" >7.3. Warnings</A>
<LI>
<A HREF="#E10E4" >7.4. Stack Overflow</A>
<LI>
<A HREF="#E10E5" >7.5. Internal Lossage</A></UL>
<LI>
<A HREF="#E8E8" >8. Dylan vs. Mindy Language Issues</A>
<LI>
<A HREF="#E8E9" >9. Built-in Libraries and Modules</A>
<LI>
<A HREF="#E8E10" >10. Using Libraries and Modules</A>
<LI>
<A HREF="#E8E11" >11. The Extensions Module</A>
<UL>
<LI>
<A HREF="#E10E6" >11.1. Generally Useful Definitions</A>
<LI>
<A HREF="#E10E7" >11.2. Exiting Applications</A>
<LI>
<A HREF="#E10E8" >11.3. Weak Pointers</A>
<LI>
<A HREF="#E10E9" >11.4. Debugger Customizations</A></UL>
<LI>
<A HREF="#E8E12" >12. The System Module</A>
<LI>
<A HREF="#E8E13" >13. The Introspection Module</A>
<UL>
<LI>
<A HREF="#E10E10" >13.1. Classes and Instances</A></UL>
<LI>
<A HREF="#E8E14" >14. The File-descriptor Module</A>
<LI>
<A HREF="#E8E15" >15. The Cheap-io Module</A>
<LI>
<A HREF="#E8E16" >16. The Threads Module</A>
<UL>
<LI>
<A HREF="#E10E11" >16.1. Classes and Functions</A>
<LI>
<A HREF="#E10E12" >16.2. Examples</A></UL>
<LI>
<A HREF="#E8E17" >17. Miscellaneous Implementation Choices</A>
<LI>
<A HREF="#E8E18" >18. Copyright and Terms of Use</A></UL>
<HR ALIGN=CENTER>
<P ALIGN=CENTER><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<A NAME="E28E1"></A>
<H1 ALIGN=CENTER>
<CENTER><B>The Mindy Compiler and Interpreter</B></CENTER></H1>
<P ALIGN=CENTER><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P><I>Copyright (c) 1994, 1995, 1996, 1997 Carnegie Mellon University All rights reserved.  Refer to the </I><I>end of this document for precise terms of use. </I>
<P>The Gwydion Project would like to thank those on the net that have contributed code patches and bug reports for Mindy:
<P>Adam Alpern, Steve Strassman, Scott Collins, Ed Gamble, Bruno Haible, John Shen, Galen Hunt, Richard Lynch, Dan Ratner, Court Demas, Miles Bader, Kelly Murray, Nick Thompson, Brent Benson, Brian Rogoff, Alain Rogister, Mark Chu-Carroll, Enrico Colombini, Dave Dyer, Jonathan Bachrach, Michael Binz, Jonathan Sobel, Eric Kidd, John Shen, Carl Gay, Patrick Premont, Eric Gouriou, Kim Barrett
<P>Special thanks for major efforts to Roger Critchlow, Patrick Beard, Gary Palter, and Jim Studt for enhancements to Mindy.
<BR>
<A NAME="E8E1"></A>
<H2><B>1. </B><B>Introduction</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>Mindy is an implementation of a language that is very much like the language described in the <I>Dylan</I><SUP>TM</SUP><I> Reference Manual</I> (DRM). <I>Mindy</I> was named for &quot;Mindy Is Not Dylan Yet&quot;, and it still is and will probably always remain a Dylan subset, primarily because mindycomp doesn&#146;t do enough semantic analysis to implement macros or to implement the precise semantics of Dylan naming. Now that the d2c Dylan-to-C compiler is available (see web documentation), debugged Dylan applications will normally be compiled for better performance. Mindy remains useful because:
<UL>
<LI>Mindy provides a better debugging environment when its performance can be tolerated, since Mindy has a source-level debugger and vastly faster compile times.
<LI>Mindy is more portable, so can be used on machines where d2c is not supported.
</UL>
<P>Mindy was developed by the Gwydion Project at Carnegie Mellon University for our own internal use as a development tool while we work on our <I>real</I> high-performance Dylan implementation.  We have decided to make Mindy available for other people who want to learn about Dylan.  However, the amount of effort that we can put into maintaining Mindy is strictly limited.
<P>Mindy will never be an industrial-strength implementation, and nobody should depend on it for real work.  We will make future releases from time to time as we add new features and fix bugs, but this is strictly a sideshow for us. We would appreciate receiving bug reports (especially those accompanied by code patches) and suggestions for improvements, but we may not fix every bug reported in a timely manner, or fix it at all.
<P>Mindy comprises two C programs, a compiler that produces byte-codes and a byte-code interpreter. Instructions for compiling and installing Mindy can be found in the file INSTALL at the top level of the Mindy release. Instructions for obtaining the different versions of Mindy can be found in the file README at the top level of the Mindy release.
<BR>
<A NAME="E8E2"></A>
<H2><B>2. </B><A NAME="I2"></A><B>Hello, World</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>Well, the first program anyone should endeavor to write in a new language is, of course, <I>Hello World</I>.  Type this into a file called hw-exports.dylan:
<CODE>
<PRE>  Module: dylan-user
  define library hello-world
    use Dylan;
  end library;
  define module hello-world
    use dylan;
    use cheap-io;
    use extensions;
  end module;</PRE>
</CODE>
<P>And put this in hw.dylan:
<CODE>
<PRE>  module: Hello-World
  // This is the canonical ``hello, world'' demo.
  define method main (argv0 :: &lt;byte-string&gt;, #rest noise)
    puts(&quot;Hello, World.\n&quot;);
  end;</PRE>
</CODE>
<P>To compile your program invoke $INSTALL/bin/mindycomp, for example: 
<CODE>
<PRE>    % $INSTALL/bin/mindycomp -lhello-world hw-exports.dylan
    % $INSTALL/bin/mindycomp -lhello-world hw.dylan</PRE>
</CODE>
<P>This produces files named hw.dbc and hw-exports.dbc.  The .dbc stands for &quot;Dylan Byte Code&quot;. To run the program, say:
<CODE>
<PRE>    % $INSTALL/bin/mindy -f hw-exports.dbc -f hw.dbc</PRE>
</CODE>
<P>It should print &quot;Hello, World.&quot; to standard output and then exit.
<P>Note that even the minimal Dylan program has at least two files. This is because in order to do anything much at all, you must access additional libraries, and the only way to set up your namespace is to define your own library and module. But the only way to place code in a module is to use the Module: file header, so two files are required.
<P>Note also that a blank line is required after the Module: file header.
<BR>
<A NAME="E8E3"></A>
<H2><B>3. </B><B> The Main Routine</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>After loading your program, Mindy invokes the generic function <B>main</B> from the Extensions module of the Dylan library.  Your program must define a method for <B>main</B>, or Mindy will signal a <I>no applicable methods</I> error and put you in the debugger.  For more information on the <B>main</B> function, see <A NAME="I3"></A><A NAME="I4"></A><A NAME="I5"></A><A HREF="mindy.htm#I30">section </A><I>The Extensions Module</I>.
<P>It can be useful to load code into Mindy with no main method.  Once you land in the debugger, you can call any function manually.  This provides a way to test any library.
<BR>
<A NAME="E8E4"></A>
<H2><B>4. </B><A NAME="I6"></A><B> Multiple Files</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>No matter how many files there are, you just compile them each independently, and then run Mindy with multiple -f switches:
<CODE>
<PRE>    % mindy -f foo.dbc -f bar.dbc -f baz.dbc</PRE>
</CODE>
<P>Mindy loads the files specified with the -f switches in the order you specify the files on the command line.  This becomes important when you define your own modules (see <A HREF="mindy.htm#I28">section </A><I>Using Libraries and Modules</I>).
<P>If you typically load several .dbc files as part of a single program, you can combine them into one file for convenience.  The mechanism for combining .dbc files is the Unix<SUP>TM</SUP> cat utility:
<CODE>
<PRE>    % cat foo.dbc bar.dbc baz.dbc &gt; big.dbc
<BR>    % mindy -f big.dbc</PRE>
</CODE>
<P>Under Microsoft Windows, many implementations of cat will corrupt .dbc files because they perform newline translation. For this reason, under MS-Windows, we recommend using dbclink:
<CODE>
<PRE>    % dbclink big.dbc cat foo.dbc bar.dbc baz.dbc
<BR>    % mindy -f big.dbc</PRE>
</CODE>
<BR>
<A NAME="E8E5"></A>
<H2><B>5. </B><A NAME="I7"></A><B>Return Codes</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>If Mindy encounters an unrecoverable error, or if Mindy is exited via the debugger quit command, Mindy exits with a return code of 1. If the Dylan program ends with a call to exit() and a return code is specified (see <A HREF="mindy.htm#I35">section </A><I>Exiting </I><I>Applications</I>), Mindy exits with that return code. Otherwise, the return code is 0.
<BR>
<A NAME="E8E6"></A>
<H2><B>6. </B><A NAME="I8"></A><A NAME="I9"></A><B>Command Line Switches and </B><A NAME="I10"></A><B>Environment Variables</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>Mindycomp recognizes the following command line switches:
<UL>
<LI>-D<I>feature</I> : This tells the conditional compilation system that <I>feature</I> is present (ie, &quot;define&quot;). Notice that there is no space between -D and <I>feature</I>. (See libraries/extensions.txt for more details)
<LI>-U<I>feature</I> : This tells the conditional compilation system that <I>feature</I> is not present (ie, &quot;undefine&quot;). Notice that there is no space between -U and <I>feature</I>. (See libraries/extensions.txt for more details)
</UL>
<P>Mindy recognizes the following command line switches:
<UL>
<LI>-f <I>filename</I> : This tells Mindy to load file <I>filename</I>. See <A HREF="mindy.htm#I6">section </A><I>Multiple Files</I>.
<LI>-x <I>filename</I> : This tells Mindy to load file <I>filename</I> like -f does, but the rest of the command line is then left uninterpretted by Mindy. This can be useful if your Dylan program also has a -f option.
</UL>
<P>Mindy recognizes the following environment variables:
<UL>
<LI><A NAME="I11"></A>BYTES_CONSED_BETWEEN_GCS : This is the number of bytes Mindy will allocate before invoking a garbage collection. For maximum speed, this should be set to the largest value possible that won&#146;t cause thrashing. See also <B>collect-garbage</B> and <B>*print-GC-messages*</B> in <A HREF="mindy.htm#I45">section </A><I>The System Module</I>.
<LI>DYLANPATH: This controls where Mindy searches for Dylan libraries. See <A HREF="mindy.htm#I28">section </A><I>Using Libraries and Mod</I><I>ules</I>.
<LI>DYLANDIR: This provides a way to inform a precompiled Gwydion Dylan binary distribution where it has been installed. All Mindy uses this variable for is to determine the default for DYLANPATH.
</UL>
<BR>
<A NAME="E8E7"></A>
<H2><B>7. </B><B>Errors and Warnings</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<A NAME="E10E1"></A>
<H3><B>7.1. </B><A NAME="I12"></A><B>Syntax Errors</B></H3>
<P>If there are any syntax errors in your program, mindycomp will report them to stderr while compiling.  For example, if you had left off the closing parenthesis in the call to <B>puts</B> in the above example, mindycomp would have reported:
<CODE>
<PRE>    hw.dylan:4: parse error at or before `;'</PRE>
</CODE>
<P>Because the line introduction, hw.dylan:4:, has the same format that the C compiler uses, gnu-emacs's compile package can parse the error messages from mindycomp.
<P>Mindycomp's error recovery is not the best in the world.  Often, it has to completely punt, telling you only about the first few errors it found.  You have to fix what it reports and try again.
<P>A hint to getting slightly tighter error recovery is to end all method and class definitions with &quot;end method;&quot; or &quot;end class;&quot;.  For example, if you forget an end token for a statement inside a method definition, the mindycomp parser goes all the way to the end of the file and then reports a syntax error at the EOF position.  You do not get any more clues.  If you use &quot;end method;&quot;, then the parser can recover at the end of the method containing the bad syntax and reports the syntax error there.  This gives you a lot tighter recovery and more information in this situation.
<A NAME="E10E2"></A>
<H3><B>7.2. </B><A NAME="I13"></A><B>Runtime Errors</B></H3>
<P>Much more common than syntax errors are runtime errors.  And given the simplistic model of compilation mindycomp uses, most semantic errors are not detected until runtime.  When Mindy hits a runtime error that is not handled via the condition system, it drops you into a debugger.  From this debugger you can look at variables, examine the stack, and invoke functions.  For example, if you had assumed that <B>puts</B> would be named something more reasonable, like <B>put-string</B>, you would have gotten the following when you tried to run your <I>Hello World</I> program:
<CODE>
<PRE>    % mindy -f hw.dbc
<BR>
<BR>    Warning: the following variables are undefined:
<BR>      in library Dylan-user:
<BR>        in module Dylan-user:
<BR>          put-string[hw.dylan, line 9]
<BR>
<BR>    thread [0] D   main
<BR>    fp 0x1003009c: invoke-debugger({&lt;simple-error&gt; 0x101a24c9})
<BR>    mindy&gt; </PRE>
</CODE>
<P>Typing help at the mindy&gt; prompt will list the various commands you can use.  See the document debug.ps for more information.
<A NAME="E10E3"></A>
<H3><B>7.3. </B><A NAME="I14"></A><B>Warnings</B></H3>
<P>Mindycomp issues warnings at compile time when:
<UL>
<LI>While or until is used inside a for loop instead of while: or until:
<LI>The obsolete &quot;keyword: (default)&quot; syntax is used instead of the &quot;keyword = default&quot; syntax.
<LI>Function return values have names but not types
<LI>Next-method is referenced inside a method that does not declare #next in the method header
</UL>
<P>Mindy issues warnings at runtime when:
<UL>
<LI>A variable is undefined (this becomes an error if the code referencing the undefined variable is executed)
<LI>A method&#146;s return types do not match the generic function&#146;s return types because return types were not specified for the method.
</UL>
<A NAME="E10E4"></A>
<H3><B>7.4. </B><B>Stack Overflow</B></H3>
<P>Mindy does not gracefully handle stack overflows. If Mindy gets a stack overflow, it will die with some kind of signal, like SIGSEG (segmentation fault). If this happens, you probably have an infinite recursion in your program.
<A NAME="E10E5"></A>
<H3><B>7.5. </B><B>Internal Lossage</B></H3>
<P>Sometimes mindycomp or Mindy will get an internal error.  When this happens, it will print a message to stderr and then abort.  This results in the process dying due to some kind of signal.  On the pmax, this signal is SIGILL, or Illegal Instruction.  When this happens, send <I>gwydion-bugs@cs.cmu.edu</I> a piece of mail containing the error message and information on what it was you did that triggered the problem.
<BR>
<A NAME="E8E8"></A>
<H2><B>8. </B><A NAME="I15"></A><A NAME="I16"></A><A NAME="I17"></A><B>Dylan vs. Mindy Language Issues</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>The Dylan language is still changing slightly.  Mindy implements most of the <I>Dylan Reference Manual</I>, as well as some features we would like to see in Dylan. In addition to those extensions described in <A HREF="#">the document </A><I>Gwydion Extensions</I>, Mindy diverges from the DRM as described below:
<P>Additions:
<UL>
<LI><A NAME="I18"></A>Mindy supports multiple value binding in the =/then clauses of for statements. The format of such a clause is
</UL>
<CODE>
<PRE>          (var1, var2, ...) = expr1 THEN expr2</PRE>
</CODE>
<UL>
<LI><A NAME="I19"></A>Keyword parameters may have type information, and you can specify default values with either DRM syntax (which uses &quot;= ...&quot;) or with the obsolete syntax (which uses &quot;(...)&quot;).  Using the second syntax will generate a compiler warning. Mindy does not enforce any congruence rules for keyword parameter types, so effectively, keyword type information in generic function declarations serves as documentation only.
<LI>Mindy allows you to place library and module definitions in the same file as the actual code. See <A HREF="mindy.htm#I28">section </A><I>Using Libraries and Modules</I> for details.
</UL>
<P>Deficiencies:
<UL>
<LI><A NAME="I20"></A>Mindy does not implement macros. The DRM built-in macros (such as if and method-definer) can not be manipulated via the module system.
<LI><A NAME="I21"></A><A NAME="I22"></A>Mindy does not have limited collections. (It does have limited integers, though)
<LI><A NAME="I23"></A><A NAME="I24"></A><A NAME="I25"></A>Sealed/open and primary keywords are parsed where allowed, but Mindy ignores this information about your program.
<LI>Mindy parses the seal generic and define sealed domain forms, but does not enforce them.
<LI><A NAME="I26"></A><A NAME="I27"></A>Define method does not automatically insert #next next-method in parameter lists.  You have to explicitly add it yourself.
<LI>Many of the DRM built-in macros allow the bodies to be empty. Mindy does not. For example, in Mindy the following is not legal:
</UL>
<CODE>
<PRE>          if (foo)
<BR>          end if;</PRE>
</CODE>
<UL>
<LI>Make(&lt;class&gt;, ...) is unsupported.
</UL>
<BR>
<A NAME="E8E9"></A>
<H2><B>9. </B><B>Built-in Libraries and Modules</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>Mindy has full support for modules and libraries.  Mindy provides two built-in libraries, Dylan and Dylan-user.  The Dylan library contains the Dylan language implementation and the following exported modules:
<DL>
<DT><B>Dylan</B></DT>
</DL>
<UL>
<UL>
<P>This module contains the Dylan language implementation and exports all the built-in Dylan definitions.
</UL></UL>
<DL>
<DT><B>Extensions</B></DT>
</DL>
<UL>
<UL>
<P>This module exports useful extensions to the Dylan language (see <A HREF="mindy.htm#I30">section </A><I>The Extensions Module</I>).  
<BR>Ultimately, there will be several, more logically separate libraries that extend Dylan or provide an 
<BR>application framework for users.  For now, we put any commonly used utilities in the Extensions 
<BR>module.
</UL></UL>
<DL>
<DT><B>System</B></DT>
</DL>
<UL>
<UL>
<P>This module exports an interface to operating system calls and special, low-level functionality (see <A HREF="mindy.htm#I45">section </A><I>The System Module</I>).
</UL></UL>
<DL>
<DT><B>Introspection</B></DT>
</DL>
<UL>
<UL>
<P>This module exports reflective operations for examining classes, functions, and so on.
</UL></UL>
<DL>
<DT><B>File-descriptors</B></DT>
</DL>
<UL>
<UL>
<P>This module exports an interface to most standard C system calls that operate on file descriptors.
</UL></UL>
<DL>
<DT><B>Cheap-io</B></DT>
</DL>
<UL>
<UL>
<P>This module exports some basic, unextendable input and output functionality.
</UL></UL>
<DL>
<DT><B>Threads</B></DT>
</DL>
<UL>
<UL>
<P>This module exports an interface to threads, locks, and objects that behave similarly to cthreads.h 
<BR>condition variables.
</UL></UL>
<P>The Dylan-user library is the default library in which mindycomp compiles user code.  Mindy provides this library for user convenience when whipping up play code or small applications for which the programmer does not want to bother to create a library.  You cannot redefine the Dylan-user library. This library contains one module, Dylan-user, and you cannot redefine this module.
<P>The Dylan language requires every library to contain a Dylan-user module, and this module must use the Dylan module from the Dylan library regardless of any user specifications.  This module provides a starting point in every library where users can begin to define modules; without an initial module in the library, you would be unable to write any code, including module definitions.  Each Dylan-user module in Mindy also automatically uses the modules from the Dylan library described above. You cannot redefine the Dylan-user module, so if your code requires module other than those described above, then you must define your own library and module.
<P>Mindy comes bundled with several other libraries. Documentation for these libraries can be found in $INSTALL/doc/libraries.
<BR>
<A NAME="E8E10"></A>
<H2><B>10. </B><A NAME="I28"></A><B>Using Libraries and Modules</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>To compile code into a particular library use the -l switch to mindycomp:
<CODE>
<PRE>    % mindycomp -lmy-lib foo.dylan</PRE>
</CODE>
<P>If there is no -l switch, then mindycomp compiles the code into the Dylan-user library.  When loading a .dbc file into Mindy that was compiled into a particular library, one of the following conditions must be satisfied to avoid errors:
<UL>
<LI>The library must be the Dylan-user library.  Technically, you could put code in the Dylan library, but do not do this.
<LI>You must have defined the library in a file previously loaded (see <A HREF="mindy.htm#I6">section </A><I>Multiple Files</I> for information on loading multiple files).
<LI>The first piece of code in the source file that produced the .dbc file must be the library definition.
</UL>
<P>While loading a file, if Mindy processes a library definition that uses an undefined library, then Mindy stops loading the current file, searches for the undefined library, and loads it.  After loading the undefined library, Mindy continues loading the current file and processing the original library definition.  Mindy searches for the undefined library in the directories listed in the <A NAME="I29"></A>DYLANPATH environment variable.  If DYLANPATH is undefined, then Mindy uses the path:
<CODE>
<PRE>    .:$DYLANDIR/lib/dylan</PRE>
</CODE>
<P>If DYLANDIR is also undefined, then the fallback default is /usr/local/lib/dylan on Unix and c:\dylan\lib\dylan on Windows. This default can be changed by recompiling Mindy, see the build instructions.
<P>In each directory, Mindy first looks for the file &lt;library&gt;-lib.dbc, where &lt;library&gt; is the name of the undefined library, and if this file does not exist, then Mindy looks for &lt;library&gt;.dbc.
<P>Mindy loads the Dylan library when it first sees a reference to it.  A reference to the Dylan library occurs when loading a file compiled to be in the Dylan library, or when loading a file with a library definition that uses the Dylan library.  Mindy loads the Dylan library by looking for the file dylan.dbc on DYLANPATH.
<P>To make a single compiled file for a library which has multiple source files, compile all the files that constitute the library with the -l switch set to the library's name.  Then cat all the resulting .dbc files together (see <A HREF="mindy.htm#I6">section </A><I>Multiple Files</I>), making sure the file that defines the library is first.  Then install the combined .dbc file in one of the directories in your DYLANPATH.
<P>To compile code into a particular module, use the module: file header. Whenever a source file lacks a module: file header, mindycomp issues a compiler warning and compiles the code into the Dylan-user module.  This is the Dylan-user module of the library specified with the -l switch, and if there was no -l switch, it is the Dylan-user module of the Dylan-user library. If a file contains no file headers, it still must contain a leading blank line to conform to Dylan syntax.
<P>When loading a .dbc file into Mindy that was compiled into a particular module, one of the following conditions must be satisfied to avoid errors:
<UL>
<LI>The module must be the Dylan-user module.
<LI>You must have defined the module in a file previously loaded (see <A HREF="mindy.htm#I6">section </A><I>Multiple Files</I> for information on loading multiple files).
<LI>The first code in the source file that produced the .dbc file must be library and module definitions, and one of the module definitions must be the module in question.
</UL>
<BR>
<A NAME="E8E11"></A>
<H2><B>11. </B><A NAME="I30"></A><B>The </B><A NAME="I31"></A><B>Extensions Module</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>Ultimately, there will be several, more logically separate libraries that extend Dylan or provide an application framework for users.  For now, we put any commonly used utilities in the Extensions module. Extensions which are likely to be supported in future Gwydion compilers are documented in <A HREF="#">the document </A><I>Gwydion Extensions</I>; here we document those extensions whose future is not so certain.
<A NAME="E10E6"></A>
<H3><B>11.1. </B><B>Generally Useful Definitions</B></H3>
<P>The Extensions module exports the following generally useful functionality:<A NAME="I32"></A>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>main</B> [Generic Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E1"></A>
<DD>invocation-name :: &lt;byte-string&gt;</DD>
</UL>
<UL>
<A NAME="E7E1"></A>
<DD>#rest arguments</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Has no methods, but is called by Mindy when it starts up.  To make a standalone program, you define a method on main that does whatever you want it to do.  <I>Invocation-name</I> is the first token on the command line that invoked Mindy. <I>Arguments</I> is a sequence of strings.  There is a string in <I>arguments</I> for every argument on the command line that invoked Mindy, except all -f switches and the argument following each -f switch (that is, the file to load) is missing.  Remember that any module that adds a method to main must use the Extensions module from the Dylan library.<A NAME="I33"></A><A NAME="I34"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>load</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E2"></A>
<DD>name :: &lt;byte-string&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E3"></A>
<DD><I>none</I></DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>This function takes the name of a .dbc file and loads the code in the file into Mindy as if the file had been specified on the command line to Mindy. There is one exception: you can only load code that defines new variables or adds methods. You cannot redefine existing definitions. Advanced Mindy users can call this function from the debugger to add code to a running process. (See <A HREF="#">the document </A><I>The Mindy Debugger</I>)
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>load-library</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E4"></A>
<DD>name :: &lt;symbol&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E5"></A>
<DD><I>none</I></DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>This function takes a library name and loads the code for the library into Mindy as if the library was used by another library. Advanced Mindy users can call this function from the debugger to add code to a running process. (See <A HREF="#">the document </A><I>The Mindy Debugger</I>)
<BR>
</UL></UL>
<A NAME="E10E7"></A>
<H3><B>11.2. </B><A NAME="I35"></A><B>Exiting Applications</B></H3>
<P> The Extensions module exports the following functionality for controlling the exiting of applications:<A NAME="I36"></A>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>on-exit</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E6"></A>
<DD>function :: &lt;function&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E7"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Arranges for the <B>exit</B> function to call the argument <I>function</I>.  The argument <I>function</I> must take no required arguments.  Users may call <B>on-exit</B> multiple times to install more than one function for <B>exit</B> to call, but the order in which <B>exit</B> invokes the functions is undefined. Calling <B>on-exit</B> on the same function repeatedly, installs that function multiple times.
<BR>
</UL></UL>
<A NAME="E10E8"></A>
<H3><B>11.3. </B><A NAME="I37"></A><B>Weak Pointers</B></H3>
<P> The Extensions module exports the following weak-pointer functionality:<A NAME="I38"></A>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>&lt;weak-pointer&gt;</B> [Class]</FONT>
<UL>
<UL>This class is a subclass of <B>&lt;object&gt;</B>.  The <B>make</B> method for this class takes the keyword parameter <I>object:</I>.  Instances of <B>&lt;weak-pointer&gt;</B> refer to the object passed to the <B>make</B> method as long as some other reference to the object exists.  Whenever an instance of <B>&lt;weak-pointer&gt;</B> is the only reference to an object, and a garbage collection occurs, then Mindy considers the object to be garbage.  When Mindy garbage collects an object referred to by a weak pointer, then Mindy marks the weak pointer as being <I>broken</I> (see the <B>weak-pointer-object</B> function).<A NAME="I39"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>weak-pointer-object </B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E8"></A>
<DD>wp :: &lt;weak-pointer&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E9"></A>
<DD>object :: &lt;object&gt;</DD>
</UL>
<UL>
<A NAME="E7E9"></A>
<DD>broken? :: &lt;boolean&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns the object referred to by the weak pointer and whether the weak pointer is <I>broken</I>.  A weak pointer is broken when it contains the only reference to an object, and in this situation, <B>weak-pointer-object</B> returns the values #f and #t.
<BR>
</UL></UL>
<A NAME="E10E9"></A>
<H3><B>11.4. </B><A NAME="I40"></A><A NAME="I41"></A><A NAME="I42"></A><B>Debugger Customizations</B></H3>
<P>The Extensions module exports the following debugger customization:<A NAME="I43"></A>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>*debug-output*</B> [Variable]</FONT>
<UL>
<UL>The debugger uses the value of <B>*debug-output*</B> when performing output; its use is similar to <B>*warning-output*</B> (See <A HREF="mindy.htm#I42">&quot;Debugger Customizations&quot; on page 45</A>). 
<BR>
</UL></UL>
<UL>
<UL>Using the <A NAME="I44"></A>Debugger-format module in the Format library will set both <B>*debug-output*</B> and <B>*warning-</B><B>output*</B> to <B>*standard-output*</B>.
<BR>
</UL></UL>
<BR>
<A NAME="E8E12"></A>
<H2><B>12. </B><A NAME="I45"></A><B>The </B><A NAME="I46"></A><B>System Module</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>In addition to those extensions described in <A HREF="#">the document </A><I>Gwydion Extensions</I>, the System module exports the following:<A NAME="I47"></A>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>*print-GC-messages*</B><B> </B>[Variable]</FONT>
<DL>
<DT><B>Default value</B></DT>
<UL>
<A NAME="E7E10"></A>
<DD>#f</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>This variable controls whether Mindy prints garbage collection information whenever the garbage collector runs.<A NAME="I48"></A><A NAME="I49"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>collect-garbage</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E11"></A>
<DD>#key purify :: &lt;boolean&gt; = #f</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E12"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>If <I>purify</I> is true, collect-garbage does a purifying garbage collection.  Otherwise, it does a normal garbage collection.  A purifying collection is just like a normal collection except that everything left over after the collection is rendered permanent and is never again considered for collection.  This can be quite useful in reducing the memory demands of your programs, as the total heap you need is: 
<BR>
</UL></UL>
<UL>
<UL> overhead + permanent + newspace + oldspace
<BR>
</UL></UL>
<UL>
<UL>with overhead being about five megabytes.  Without <I>purify</I>, permanent will be 0, newspace is the amount of live data, and oldspace is the amount of live data plus BYTES_CONSED_BETWEEN_GCS.  Note that the live data is being counted twice: once in newspace and once in oldspace.  But if you purify, that live data gets moved over to permanent, and then only gets counted once.<A NAME="I50"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>getcwd</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E13"></A>
<DD><I>none</I></DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E14"></A>
<DD>current-directory :: &lt;string&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns the current working directory.
<BR>
</UL></UL>
<BR>
<A NAME="E8E13"></A>
<H2><B>13. </B><B>The </B><A NAME="I51"></A><B>Introspection Module</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>The Mindy Introspection module exports reflective operations for examining classes, functions, and types. (See also <A HREF="#">the document </A><I>Gwydion Extensions</I>)
<A NAME="E10E10"></A>
<H3><B>13.1. </B><B>Classes and Instances</B></H3>
<P>The Introspection module exports the following for class objects, slot descriptions, and fetching and modifying the slot values of general objects:<A NAME="I52"></A>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>abstract?</B><B> </B>[Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E15"></A>
<DD>class :: &lt;class&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E16"></A>
<DD>result :: &lt;boolean&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns #t if <I>class</I> is an abstract class; otherwise returns<B> </B>#f.<A NAME="I53"></A><A NAME="I54"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>&lt;slot-descriptor&gt;</B> [Class]</FONT>
<UL>
<UL>This class is a subclass of <B>&lt;object&gt;</B>. The <B>slot-descriptors</B> function returns instances of this class to describe the slots of a class object.<A NAME="I55"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>slot-descriptors</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E17"></A>
<DD>class :: &lt;class&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E18"></A>
<DD>descriptors :: &lt;list&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns a list of <B>&lt;slot-descriptor&gt;</B>s for <I>class</I>. The result may be the empty list.<A NAME="I56"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>slot-name</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E19"></A>
<DD>slot :: &lt;slot-descriptor&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E20"></A>
<DD>name :: &lt;symbol&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns the name of <I>slot</I> as a <B>&lt;symbol&gt;</B>.<A NAME="I57"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>slot-allocation</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E21"></A>
<DD>slot :: &lt;slot-descriptor&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E22"></A>
<DD>allocation :: one-of(#&quot;instance&quot;, #&quot;class&quot;, #&quot;each-subclass&quot;, #&quot;virtual&quot;)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns the allocation type for <I>slot</I> as a <B>&lt;symbol&gt;</B>.<A NAME="I58"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>slot-type</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E23"></A>
<DD>slot :: &lt;slot-descriptor&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E24"></A>
<DD>type :: &lt;type&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns the type of values permitted for <I>slot</I>.<A NAME="I59"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>slot-getter</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E25"></A>
<DD>slot :: &lt;slot-descriptor&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E26"></A>
<DD>gf :: &lt;generic-function&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns the generic function that accesses <I>slot</I>.<A NAME="I60"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>slot-setter</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E27"></A>
<DD>slot :: &lt;slot-descriptor&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E28"></A>
<DD>gf :: &lt;generic-function&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns the generic function that stores into <I>slot</I>.<A NAME="I61"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>slot-value</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E29"></A>
<DD>slot :: &lt;slot-descriptor&gt;</DD>
</UL>
<UL>
<A NAME="E7E29"></A>
<DD>object :: &lt;object&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E30"></A>
<DD>value :: &lt;object&gt;</DD>
</UL>
<UL>
<A NAME="E7E30"></A>
<DD>initialized? :: &lt;boolean&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns the value for <I>slot</I> in <I>object</I> and #t. If the slot in the object is uninitialized, then this function returns #f and #f. Note, this function does not go through generic function dispatch, and it calls no user methods; this function uses an internal primitive to fetch the slot&#146;s value.<A NAME="I62"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>slot-value-setter</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E31"></A>
<DD>value :: &lt;object&gt;</DD>
</UL>
<UL>
<A NAME="E7E31"></A>
<DD>slot :: &lt;slot-descriptor&gt;</DD>
</UL>
<UL>
<A NAME="E7E31"></A>
<DD>object :: &lt;object&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E32"></A>
<DD>value :: &lt;object&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Stores <I>value</I> into <I>slot</I> of <I>object</I> and returns <I>value</I>. This function performs whatever type checking is necessary to ensure <I>value</I> is safe for <I>slot</I>. Note, this function does not go through generic function dispatch, and it calls no user methods; this function uses an internal primitive to set the slot&#146;s value.<A NAME="I63"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>init-keyword</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E33"></A>
<DD>slot :: &lt;slot-descriptor&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E34"></A>
<DD>keyword :: false-or(&lt;symbol&gt;)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns the init-keyword associated with <I>slot</I>, or #f if there is none.<A NAME="I64"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>keyword-required?</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E35"></A>
<DD>slot :: &lt;slot-descriptor&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E36"></A>
<DD>answer :: &lt;boolean&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns #t if there is a required-init-keyword for <I>slot</I>, otherwise returns #f.
<BR>
</UL></UL>
<BR>
<A NAME="E8E14"></A>
<H2><B>14. </B><B>The </B><A NAME="I65"></A><B>File-descriptor Module</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>A cleaner interface to most of these functions is available from the Streams library (see <A HREF="#">the document </A><I>The Streams Library</I>).  You probably do not need to use the File-descriptor module, unless you need an obscure file mode.
<P>The File-descriptor module exports the following functions and constants:<A NAME="I66"></A>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>fd-exec</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E37"></A>
<DD>command-line :: &lt;string&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E38"></A>
<DD>in-fd :: false-or(&lt;integer&gt;)</DD>
</UL>
<UL>
<A NAME="E7E38"></A>
<DD>out-fd :: false-or(&lt;integer&gt;)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>This function provides a facility for running programs and scripts from within Mindy.  The <I>command-line</I> argument should contain the name of the program and all of the command line arguments for that program.  This function returns the file descriptors for the new process's standard input and output.  If <B>fd-exec</B> is unable to start the process, then it returns #f and #f.
<BR>
</UL></UL>
<UL>
<UL><I>Note: </I>This function has been deprecated in favor of <B>piped-exec</B>, which is exported from the Piped-exec module of the Streams library. See<I> </I><A HREF="#"><I>section </I><I>Extensions to the Streams Library</I></A><I> </I>in <A HREF="#">the document </A><I>Gwydion Extensions</I>.<A NAME="I67"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>fd-open</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E39"></A>
<DD>path :: &lt;byte-string&gt;</DD>
</UL>
<UL>
<A NAME="E7E39"></A>
<DD>flags :: &lt;integer&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E40"></A>
<DD>fd :: false-or(&lt;integer&gt;)</DD>
</UL>
<UL>
<A NAME="E7E40"></A>
<DD>errno :: false-or(&lt;integer&gt;)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>This function calls the C <B>open</B> system call and returns the file descriptor and #f, if successful.  If the first value is #f, then the second value is the error number.  You can convert the error number to a string using the <B>fd</B><B>-</B><B>error</B><B>-</B><B>string</B> function.<A NAME="I68"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>fd-close</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E41"></A>
<DD>fd :: &lt;integer&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E42"></A>
<DD>win? :: &lt;boolean&gt;</DD>
</UL>
<UL>
<A NAME="E7E42"></A>
<DD>errno :: false-or(&lt;integer&gt;)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>This function calls the C <B>close</B> system call and returns #t and #f, if successful.  If the first value is #f, then the second value is the error number.  You can convert the error number to a string using the <B>fd-error-string</B> function.<A NAME="I69"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>fd-read</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E43"></A>
<DD>fd :: &lt;integer&gt;</DD>
</UL>
<UL>
<A NAME="E7E43"></A>
<DD>buffer :: &lt;buffer&gt;</DD>
</UL>
<UL>
<A NAME="E7E43"></A>
<DD>offset :: &lt;integer&gt;</DD>
</UL>
<UL>
<A NAME="E7E43"></A>
<DD>count :: &lt;integer&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E44"></A>
<DD>count :: false-or( &lt;integer&gt;)</DD>
</UL>
<UL>
<A NAME="E7E44"></A>
<DD>errno :: false-or(&lt;integer&gt;)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>This function calls the C <B>read</B> system call and returns the number of bytes read and #f, if successful.  <I>Offset</I> is an index into <I>buffer</I>, and it the index at which <B>fd-read</B> should start writing into the buffer.  All other arguments are the same as those described by the Unix man page.
<BR>
</UL></UL>
<UL>
<UL>If the first value is #f, then the second value is the error number.  You can convert the error number to a string using the <B>fd-error-string</B> function.
<BR>
</UL></UL>
<UL>
<UL>This function does no bounds checking.<A NAME="I70"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>fd-write</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E45"></A>
<DD>fd :: &lt;integer&gt;</DD>
</UL>
<UL>
<A NAME="E7E45"></A>
<DD>buffer :: &lt;buffer&gt;</DD>
</UL>
<UL>
<A NAME="E7E45"></A>
<DD>offset :: &lt;integer&gt;</DD>
</UL>
<UL>
<A NAME="E7E45"></A>
<DD>count :: &lt;integer&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E46"></A>
<DD>count :: false-or( &lt;integer&gt;)</DD>
</UL>
<UL>
<A NAME="E7E46"></A>
<DD>errno :: false-or(&lt;integer&gt;)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>This function calls the C <B>write</B> system call and returns the number of bytes written and #f, if successful.  <I>Offset</I> is an index into <I>buffer</I>, and it is the index at which <B>fd-write</B> should start reading from the buffer.  All other arguments are the same as those described by the Unix man page.
<BR>
</UL></UL>
<UL>
<UL>If the first value is #f, then the second value is the error number.  You can convert the error number to a string using the <B>fd-error-string</B> function.
<BR>
</UL></UL>
<UL>
<UL>This function does no bounds checking.<A NAME="I71"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>fd-input-available?</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E47"></A>
<DD>fd :: &lt;integer&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E48"></A>
<DD>input? :: &lt;boolean&gt;</DD>
</UL>
<UL>
<A NAME="E7E48"></A>
<DD>errno :: false-or(&lt;integer&gt;)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>This function returns whether there is any input available on the file descriptor.  The second return value is #f if <B>fd-input-available?</B> could determine whether input was available. If there is an error, the second return value is the error number.  You can convert the error number to a string using the <B>fd-error-string</B> function.<A NAME="I72"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>fd-sync-output</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E49"></A>
<DD>fd :: &lt;integer&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E50"></A>
<DD>win? :: &lt;boolean&gt;</DD>
</UL>
<UL>
<A NAME="E7E50"></A>
<DD>errno :: false-or(&lt;integer&gt;)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>This function calls the C <B>fsync</B> system call and returns #t and #f, if successful.  If the first value is #f, then the second value is the error number.  You can convert the error number to a string using the <B>fd-error-string</B> function.<A NAME="I73"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>fd-seek</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E51"></A>
<DD>fd :: &lt;integer&gt;</DD>
</UL>
<UL>
<A NAME="E7E51"></A>
<DD>offset :: &lt;integer&gt;</DD>
</UL>
<UL>
<A NAME="E7E51"></A>
<DD>whence :: &lt;integer&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E52"></A>
<DD>new-pos :: false-or(&lt;integer&gt;)</DD>
</UL>
<UL>
<A NAME="E7E52"></A>
<DD>errno :: false-or(&lt;integer&gt;)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>This function calls the C <B>lseek</B> system call and returns the new absolute position in the file and #f, if successful.  If the first value is #f, then the second value is the error number.  You can convert the error number to a string using the <B>fd-error-string</B> function.<A NAME="I74"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>fd-error-string</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E53"></A>
<DD>errno :: &lt;integer&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E54"></A>
<DD>msg :: false-or(&lt;byte-string&gt;)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>This function calls the C <B>strerror</B> system call and returns the string that describes the given error number.  If the error number is unknown, then <B>fd-error-string</B> return #f.<A NAME="I75"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>SEEK_SET</B> [Constant]<A NAME="I76"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>SEEK_CUR</B> [Constant]<A NAME="I77"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>SEEK_END</B> [Constant]<A NAME="I78"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>O_RDONLY</B> [Constant]<A NAME="I79"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>O_WRONLY</B> [Constant]<A NAME="I80"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>O_RDWR</B> [Constant]<A NAME="I81"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>O_APPEND</B> [Constant]<A NAME="I82"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>O_CREAT</B> [Constant]<A NAME="I83"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>O_TRUNC</B> [Constant]<A NAME="I84"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>O_EXCL</B> [Constant]<A NAME="I85"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>ENOENT</B> [Constant]<A NAME="I86"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>EIO</B> [Constant]<A NAME="I87"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>ENXIO</B> [Constant]<A NAME="I88"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>EACCES</B> [Constant]<A NAME="I89"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>EFAULT</B> [Constant]<A NAME="I90"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>EEXIST</B> [Constant]<A NAME="I91"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>ENOTDIR</B> [Constant]<A NAME="I92"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>EISDIR</B> [Constant]<A NAME="I93"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>EINVAL</B> [Constant]<A NAME="I94"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>ENFILE</B> [Constant]<A NAME="I95"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>EMFILE</B> [Constant]<A NAME="I96"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>ENOSPC</B> [Constant]<A NAME="I97"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>EROFS</B> [Constant]<A NAME="I98"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>ENAMETOOLONG</B> [Constant]<A NAME="I99"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>EBADF</B> [Constant]<A NAME="I100"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>EINTR</B> [Constant]<A NAME="I101"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>EPIPE</B> [Constant]<A NAME="I102"></A></FONT>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>EFBIG</B> [Constant]</FONT>
<UL>
<UL>These constants are mostly the same constants from the standard C libraries, <A NAME="I103"></A>file.h and <A NAME="I104"></A>errno.h, but a few names have been changed. Those names that have changed should be obvious.  The File-descriptors module exports all the constants users need to call the functions in the module, or test the functions&#146; return values.
<BR>
</UL></UL>
<BR>
<A NAME="E8E15"></A>
<H2><B>15. </B><B>The </B><A NAME="I105"></A><B>Cheap-io Module</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>The Cheap-io module exports some basic, unextendable I/O functionality. Mindy uses the Cheap-io functions internally. The Gwydion Project also provides the Streams, Print, and Format libraries (see <A HREF="#"></A><I>The Streams Library</I>, <A HREF="#"></A><I>The Print Library</I>, and <A HREF="#"></A><I>The Format Library</I>, respectively). It is an error to use both Cheap-IO functions and Streams/Print/Format functions on a single stream. (For example, if you are using the Streams library <B>*standard-input*</B>, do not also use the Cheap-io input functions) For this reason, if any library that you load into Mindy uses the Debugger-format library, the debugger will use <B>format</B> from the Format library. Also, look at <A HREF="#">the document </A><I>Gwydion Extensions</I> for Cheap-IO functionality also supported in other Gwydion compilers.<A NAME="I106"></A>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>prin1</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E55"></A>
<DD>object :: &lt;object&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E56"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Prints thing to stdout.  <B>Print</B> follows thing with a newline.  You cannot extend or specialize how objects are printed because these function&#146;s are written in C code, within Mindy&#146;s implementation.<A NAME="I107"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>puts</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E57"></A>
<DD>string :: &lt;byte-string&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E58"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Prints the contents of <I>string</I> to stdout.<A NAME="I108"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>putc</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E59"></A>
<DD>char :: &lt;byte-character&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E60"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Prints <I>char</I> to stdout.<A NAME="I109"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>getc</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E61"></A>
<DD><I>none</I></DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E62"></A>
<DD>char :: &lt;byte-character&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Read and return the next character from stdin.  Returns #f at EOF.<A NAME="I110"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>fflush</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E63"></A>
<DD><I>none</I></DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E64"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Forces out any pending output generated by <B>format</B>, <B>print</B>, <B>prin1</B>, <B>puts</B>, and <B>putc</B>.
<BR>
</UL></UL>
<BR>
<A NAME="E8E16"></A>
<H2><B>16. </B><B>The </B><A NAME="I111"></A><B>Threads Module</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>This module is in the Dylan library and exports an interface to <B>&lt;thread&gt;</B>s, <B>&lt;lock&gt;</B>s, and <B>&lt;event&gt;</B>s (objects on which threads can wait until a signalling thread indicates the events have occurred).
<A NAME="E10E11"></A>
<H3><B>16.1. </B><B>Classes and Functions</B></H3>
<P>The Threads module exports the following classes and functions:<A NAME="I112"></A>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>&lt;thread&gt;</B> [Class]</FONT>
<UL>
<UL>This class is a subclass of <B>&lt;object&gt;</B>.  Instances of this class are the handles by which programs manipulate threads.<A NAME="I113"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>spawn-thread</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E65"></A>
<DD>debug-name :: &lt;byte-string&gt;</DD>
</UL>
<UL>
<A NAME="E7E65"></A>
<DD>init-function :: &lt;function&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E66"></A>
<DD>thread :: &lt;thread&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Spawns a concurrent asynchronous thread and invokes <I>init-function</I> in that thread.  The dynamic context of the thread is the same as if it were the main thread of a program at the beginning of the program's execution.<A NAME="I114"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>kill-thread</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E67"></A>
<DD>thread :: &lt;thread&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E68"></A>
<DD>thread :: &lt;thread&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Kills <I>thread</I> immediately.  After calling this function, the argument <I>thread</I> never executes again.<A NAME="I115"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>current-thread</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E69"></A>
<DD><I>none</I></DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E70"></A>
<DD>thread :: &lt;thread&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns the thread handle of the current thread.<A NAME="I116"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>&lt;lock&gt;</B> [Abstract Class]</FONT>
<UL>
<UL>This class is a subclass of <B>&lt;object&gt;</B>.  Instances of this class provide logical locks.  A lock is locked when a thread successfully <I>grabs</I> a lock, and we say the thread <I>holds</I> the lock.  Holding a lock in no way prohibits access to a resource.  It is purely the convention of various threads to access a shared resource only after successfully grabbing a lock.  If <B>&lt;lock&gt;</B> is passed to <B>make</B>, <B>make</B> returns a <B>&lt;spinlock&gt;</B>.
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"> <A NAME="I117"></A><B>&lt;spinlock&gt;</B> [Sealed Class]</FONT>
<UL>
<UL>This class is a subclass of <B>&lt;lock&gt;</B>.  Instances of this class provide a single-locking model. Whenever a <B>&lt;spinlock&gt;</B> is locked, any thread that tries to grab it will block. Whenever a <B>&lt;spinlock&gt;</B> is locked, any thread may release it. Whenever a <B>&lt;spinlock&gt;</B> is unlocked, any thread may grab it.
<BR>
</UL></UL>
<UL>
<UL><B>&lt;spinlock&gt;</B>s are designed to be held for a very short period of time, several machine instructions at most.  Threads should only hold a <B>&lt;spinlock&gt;</B> for a very short period of time because other threads that are waiting for the lock are blocked and could be wasting CPU cycles by busy looping; that is, waiting for a <B>&lt;spinlock&gt;</B> does not necessarily use anything as heavy weight as a system call to sleep the thread waiting for the lock.  If only a couple threads are sharing a resource, it may be more efficient to actually hold a <B>&lt;spinlock&gt;</B> for a moderate amount of time while performing a high-level operation, rather than use a lock to build a more heavy-weight mutual exclusion mechanism (such as a semaphore) to isolate access to the shared resource.
<BR>
</UL></UL>
<UL>
<UL>Unlocking a <B>&lt;spinlock&gt;</B> when it is already unlocked signals an error.<A NAME="I118"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>&lt;multilock&gt;</B> [Sealed Class]</FONT>
<UL>
<UL>This class is a subclass of <B>&lt;lock&gt;</B>.  Instances of this class provide a multilocking model. Whenever a <B>&lt;multilock&gt;</B> is unlocked, any thread may grab it.  A thread that holds a <B>&lt;multilock&gt;</B> may grab the lock repeatedly without releasing the lock.  Each grab effectively increments a counter, and each release effectively decrements a counter.  A <B>&lt;multilock&gt;</B> is available to be grabbed by any thread when the counter returns to zero; therefore, a thread must release the lock for each grabbing of the lock.  This behavior is useful for implementing a high-level operation that needs to isolate access to a resource while calling a few lower-level operations that lock the resource; in this way, the high-level operation effectively calls all the lower-level operations atomically with no other threads affecting the state of the resource between the calls.
<BR>
</UL></UL>
<UL>
<UL>Whenever a <B>&lt;multilock&gt;</B> is locked, only the thread that holds the lock may release it.
<BR>
</UL></UL>
<UL>
<UL><B>&lt;multilock&gt;</B>s are designed to be held for as long as a thread requires. When other threads call the <B>grab-lock</B> function and block because a <B>&lt;multilock&gt;</B> is locked, the other threads are guaranteed to sleep until the lock is available.
<BR>
</UL></UL>
<UL>
<UL>Unlocking a <B>&lt;multilock&gt;</B> when it is already unlocked signals an error.<A NAME="I119"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>&lt;semaphore&gt;</B> [Sealed Class]</FONT>
<UL>
<UL>This class is a subclass of <B>&lt;lock&gt;</B>.  Instances of this class provide a single-locking model.
<BR>
</UL></UL>
<UL>
<UL>Whenever a <B>&lt;semaphore&gt;</B> is unlocked, any thread may grab it.  Whenever a <B>&lt;semaphore&gt;</B> is locked, any thread that tries to grab it will block. Whenever a d is locked, any thread may release it.
<BR>
</UL></UL>
<UL>
<UL><B>&lt;semaphore&gt;</B>s are designed to be held for as long as a thread requires. When other threads call the <B>grab-lock</B> function and block because a <B>&lt;semaphore&gt;</B> is locked, the other threads are guaranteed to sleep until the lock is available.
<BR>
</UL></UL>
<UL>
<UL>Unlocking a <B>&lt;semaphore&gt;</B> when it is already unlocked signals an error.<A NAME="I120"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>locked?</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E71"></A>
<DD>lock :: &lt;lock&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E72"></A>
<DD>locked? :: &lt;boolean&gt;</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns whether the lock is held by any thread.<A NAME="I121"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>grab-lock</B> [Generic Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E73"></A>
<DD>lock :: &lt;lock&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E74"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns after successfully grabbing the lock.  If the lock is not immediately available, this function waits for the lock to become available.<A NAME="I122"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>grab-lock</B> [G.F. Method]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E75"></A>
<DD>lock :: &lt;spinlock&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E76"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns after successfully grabbing the lock.  This method can only grab <I>lock</I> when it is unlocked.  When the lock is held, this method may busy-loop until the lock is unlocked.
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>grab-lock</B> [G.F. Method]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E77"></A>
<DD>lock :: &lt;semaphore&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E78"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns after successfully grabbing the lock.  This method can only grab <I>lock</I> when it is unlocked.  When the lock is held, this method puts the calling thread to sleep until the lock is available.
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>grab-lock</B> [G.F. Method]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E79"></A>
<DD>lock :: &lt;multilock&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E80"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Returns after successfully grabbing the lock.  A single thread may successfully call this method repeatedly, but the thread must call <B>release-lock</B> once for each call to <B>grab-lock</B>.  If the thread calls <B>release-lock</B> fewer times than <B>grab-lock</B>, the lock remains locked, and any threads waiting for the lock will continue to wait.  When a thread that does not hold the lock calls this method, the method puts the calling thread to sleep until the lock is available.<A NAME="I123"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>release-lock</B> [Generic Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E81"></A>
<DD>lock :: &lt;lock&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E82"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Releases the lock.  If <I>lock</I> is unlocked, this function signals an error.
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>release-lock</B> [G.F. Method]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E83"></A>
<DD>lock :: union(&lt;spinlock&gt;, &lt;semaphore&gt;)</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E84"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Releases the lock. If <I>lock</I> is unlocked, this function signals an error. Any thread may unlock a <B>&lt;spinlock&gt;</B> or <B>&lt;semaphore&gt;</B>, regardless of whether it is the thread that successfully grabbed the lock.
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>release-lock</B> [G.F. Method]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E85"></A>
<DD>lock :: &lt;multilock&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E86"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Releases the lock. If <I>lock</I> is unlocked, this function signals an error. Only the thread that holds <I>lock</I> may call this function, and if another thread tries to release the lock, this method signals an error.  When this function returns, <I>lock</I> may still be locked.  A thread that has repeatedly grabbed a <B>&lt;multilock&gt;</B> must call <B>release-lock</B> once for each call to <B>grab-lock</B>.<A NAME="I124"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>&lt;event&gt;</B> [Class]</FONT>
<UL>
<UL>This class is a subclass of <B>&lt;object&gt;</B>.  Threads use events to block without busy looping and to communicate to other threads that they should wake up.<A NAME="I125"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>wait-for-event</B> [Generic Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E87"></A>
<DD>event :: &lt;event&gt;</DD>
</UL>
<UL>
<A NAME="E7E87"></A>
<DD>lock :: &lt;lock&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E88"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Releases the lock and puts the calling thread to sleep until some other thread signals <I>event</I>.  After this function returns, the lock is unheld, and the calling thread must try to grab the lock before accessing any shared resources.  Due to implementation details, this function may return even when the lock is unavailable, or the event has not truly occurred; because of this, programs need to loop over <B>wait-for-event</B> and <B>grab-lock</B>, testing that the event actually occurred.  Methods exist for both <B>&lt;spinlock&gt;</B>s and <B>&lt;semaphore&gt;</B>s.<A NAME="I126"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>signal-event</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E89"></A>
<DD>event :: &lt;event&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E90"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Signals that the event occurred, indicating that Mindy should wake up a thread that is waiting on this event.<A NAME="I127"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>broadcast-event</B> [Function]</FONT>
<DL>
<DT><B>Arguments</B></DT>
<UL>
<A NAME="E7E91"></A>
<DD>&lt;event&gt;</DD>
</UL>
<DT><B>Values</B></DT>
<UL>
<A NAME="E7E92"></A>
<DD>meaningless :: singleton(#f)</DD>
</UL>
<DT><B>Description</B></DT>
</DL>
<UL>
<UL>Signals that the event occurred and causes Mindy to wake up every thread that is waiting on this event.
<BR>
</UL></UL>
<A NAME="E10E12"></A>
<H3><B>16.2. </B><B>Examples</B></H3>
<P>The following code shows how to use locks and events to isolate access to a queue:
<CODE>
<PRE>    // This example shows two routines, get-queue and release-queue.  Code 
<BR>    // that accesses the queue should call get-queue before doing so and call
<BR>    // release-queue when done.  Any code failing to isolate access to the
<BR>    // queue in this way has undefined behavior and is incorrectly written.
<BR>    //
    // This variable is #t if and only if the queue is generally available.
<BR>    //
<BR>    define variable queue-available? = #t;
    // This constant holds an event object used to signal when the queue 
<BR>    // becomes generally available again.
<BR>    //
<BR>    define constant queue-available = make(&lt;event&gt;);
    // This constant holds a lock object used to isolate access to
<BR>    // queue-available? for testing and setting purposes.
<BR>    //
<BR>    define constant queue-lock = make(&lt;lock&gt;);
    // When this function returns, the caller has exclusive access to the 
<BR>    // queue.  If necessary, this function waits for the queue to become 
<BR>    // available, but it does not busy loop.  This function returns #f as 
<BR>    // a meaningless return value. 
<BR>    //
<BR>    define method get-queue ()
<BR>      grab-lock(queue-lock); 
<BR>      while (~ queue-available?)
<BR>        wait-for-event(queue-available, queue-lock);
<BR>        grab-lock(queue-lock);
<BR>      end;
<BR>      queue-available? := #f;
<BR>      lock-release(queue-lock);
<BR>      #f;
<BR>    end;
    // This function releases the queue and signals that it is released so 
<BR>    // that someone waiting on the queue will be woken up.  This function 
<BR>    // returns #f as a meaningless return value. 
<BR>    //
<BR>    define method release-queue ()
<BR>      grab-lock(queue-lock);
<BR>      queue-available? := #t;
<BR>      release-lock(queue-lock);
<BR>      signal-event(queue-available);
<BR>      #f;
<BR>    end;</PRE>
</CODE>
<P>The following example shows how to use a lock to isolate queue access in a different way than the previous example:
<CODE>
<PRE>    // This constant holds an event object used to signal when an element 
<BR>    // exists in the queue. 
<BR>    //
<BR>    define constant something-available = make(&lt;event&gt;);
    // This constant holds a lock that is held whenever a thread is accessing 
<BR>    // queue.
<BR>    //
<BR>    define constant lock = make(&lt;lock&gt;);
    // This constant holds a queue object.
<BR>    //
<BR>    define constant queue = make(&lt;deque&gt;);
    // This function returns an element from queue.  If no element is 
<BR>    // immediately available, then this function blocks until it can return 
<BR>    // an element.  This function assumes only one or two other threads are 
<BR>    // ever waiting for the queue, and it assumes pop is a fast high-level 
<BR>    // operation. 
<BR>    //
<BR>    define method get-something()
<BR>      grab-lock(lock);
<BR>      while (empty?(queue))
<BR>        wait-for-event(something-available, lock);
<BR>        grab-lock(lock);
<BR>      end;
<BR>      let result = pop(queue);
<BR>      lock-release(lock);
<BR>      result;
<BR>    end;
    // This function adds thing to queue.  It assumes only one or two other 
<BR>    // threads are ever waiting for the queue, and it assumes push is a fast 
<BR>    // high-level operation. 
<BR>    //
<BR>    define method put-something(thing)
<BR>      grab-lock(lock);
<BR>      push(queue, thing);
<BR>      release-lock(lock);
<BR>      signal-event(something-available);
<BR>    end;</PRE>
</CODE>
<BR>
<A NAME="E8E17"></A>
<H2><B>17. </B><B>Miscellaneous Implementation Choices</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>The <B>error </B>method specialized on <B>&lt;byte-string&gt;</B> applies the <B>format</B> function to the arguments passed to <B>error</B>.  See <A HREF="mindy.htm#I30">section </A><I>The Extensions Module</I> for the details of <B>format</B> from the Cheap-io module of the Dylan library. See <A HREF="#">the document </A><I>The </I><I>Format Library</I> for the details of <B>format</B> from the Format library.
<P>Rest arguments in Mindy are <B>&lt;sequence&gt;</B>s.  You cannot use any functions on the rest argument that assumes the collection is an instance of any class more specific than <B>&lt;sequence&gt;</B>; for example, you cannot use the <B>head</B> or <B>tail</B> functions because they operate on instances of <B>&lt;pair&gt;</B>.
<P>Mindy&#146;s <B>&lt;character&gt;</B> implementation is equivalent to <A NAME="I128"></A>unicode characters. The <B>&lt;byte-character&gt;</B> class exported from the Extensions module of the Dylan library is a subclass of <B>&lt;character&gt;</B>.
<BR>
<A NAME="E8E18"></A>
<H2><B>18. </B><A NAME="I129"></A><B>Copyright and Terms of Use</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>Copyright (c) 1994, 1995, 1996, 1997 Carnegie Mellon University All rights reserved.  
<P>Use and copying of this software and preparation of derivative works based on this software are permitted, including commercial use, provided that the following conditions are observed:
<UL>
<LI>This copyright notice must be retained in full on any copies and on appropriate parts of any derivative works.
<LI>Documentation (paper or online) accompanying any system that incorporates this software, or any part of it, must acknowledge the contribution of the Gwydion Project at Carnegie Mellon University.
</UL>
<P>This software is made available <I>as is</I>.  Neither the authors nor Carnegie Mellon University make any warranty about the software, its performance, or its conformity to any specification.
<P><A NAME="I130"></A>Bug reports, questions, comments, and suggestions should be sent by E-mail to the Internet address gwydion-bugs@cs.cmu.edu. 

<P>
<CENTER><TABLE BORDER=1 CELLSPACING=1 ><TR>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="mindy.htm#E28E1">Mindy Compiler</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="debug.htm#E28E2">Mindy Debugger</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="inspect.htm#E28E3">Mindy Object</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="EXTENS~1.htm#E28E4">Extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="streams.htm#E28E5">Streams Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="STANDA~1.htm#E28E6">Standard IO</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="print.htm#E28E7">Print Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="format.htm#E28E8">Format Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="melange.htm#E28E9">Melange Interface</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="dylan-tk.htm#E28E10">TK Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="COLLEC~1.htm#E28E11">Collection extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="TABLE-~1.htm#E28E12">Table Extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="STRING~1.htm#E28E13">String extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="REGULA~1.htm#E28E14">Regular Expressions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="TRANSC~1.htm#E28E15">Transcendental Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="time.htm#E28E16">Time Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="random.htm#E28E17">Random Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="matrix.htm#E28E18">Matrix Library</A>
</TD></FONT>
</TR></TABLE>
</CENTER><P ALIGN=CENTER>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="gmindy/blrprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="gmindy/blrtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>
<A HREF="htindex.htm" TARGET="_self"><IMG SRC="gmindy/blrindex.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Index"></A>
<A HREF="debug.htm" TARGET="_self"><IMG SRC="gmindy/blrnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://legend.gwydion.cs.cmu.edu/gwydion" TARGET="_self"><IMG SRC="gmindy/blrhome.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="See Page"></A>

<P>
<ADDRESS>Copyright 1994, 1995, 1996, 1997 Carnegie Mellon University. All rights reserved.</ADDRESS>
<P><A HREF="MAILTO:gwydion-bugs@cs.cmu.edu">Send comments and bug reports to gwydion-bugs@cs.cmu.edu</A>
</BODY></HTML>
