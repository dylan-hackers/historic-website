<HTML>
<HEAD>
<TITLE>Gwydion Dylan Collection Extensions  The Collection extensions Library</TITLE>
<LINK REL="ToC" HREF="httoc.htm">
<LINK REL="Index" HREF="htindex.htm">
<LINK REL="Next" HREF="TABLE-~1.htm">
<LINK REL="Previous" HREF="dylan-tk.htm"></HEAD>
<BODY>

<H2>Collection Extensions</H2>
<P ALIGN=CENTER>
<A HREF="dylan-tk.htm" TARGET="_self"><IMG SRC="gmindy/blrprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="gmindy/blrtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>
<A HREF="htindex.htm" TARGET="_self"><IMG SRC="gmindy/blrindex.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Index"></A>
<A HREF="TABLE-~1.htm" TARGET="_self"><IMG SRC="gmindy/blrnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://legend.gwydion.cs.cmu.edu/gwydion" TARGET="_self"><IMG SRC="gmindy/blrhome.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="See Page"></A>

<P>
<CENTER><TABLE BORDER=1 CELLSPACING=1 ><TR>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="mindy.htm#E28E1">Mindy Compiler</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="debug.htm#E28E2">Mindy Debugger</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="inspect.htm#E28E3">Mindy Object</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="EXTENS~1.htm#E28E4">Extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="streams.htm#E28E5">Streams Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="STANDA~1.htm#E28E6">Standard IO</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="print.htm#E28E7">Print Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="format.htm#E28E8">Format Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="melange.htm#E28E9">Melange Interface</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="dylan-tk.htm#E28E10">TK Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="COLLEC~1.htm#E28E11">Collection extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="TABLE-~1.htm#E28E12">Table Extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="STRING~1.htm#E28E13">String extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="REGULA~1.htm#E28E14">Regular Expressions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="TRANSC~1.htm#E28E15">Transcendental Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="time.htm#E28E16">Time Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="random.htm#E28E17">Random Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="matrix.htm#E28E18">Matrix Library</A>
</TD></FONT>
</TR></TABLE>
</CENTER><HR ALIGN=CENTER>
<P>
<UL>
<LI>
<A HREF="#E8E77" >1. Introduction</A>
<LI>
<A HREF="#E8E78" >2. The Self-Organizing-List Module</A>
<LI>
<A HREF="#E8E79" >3. The Subsequence Module</A>
<LI>
<A HREF="#E8E80" >4. The Vector-Search Module</A></UL>
<HR ALIGN=CENTER>
<P ALIGN=CENTER><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<A NAME="E28E11"></A>
<H1 ALIGN=CENTER>
<CENTER><B>The </B><A NAME="I2"></A><B>Collection extensions Library</B></CENTER></H1>
<P ALIGN=CENTER><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P ALIGN=CENTER>
<CENTER><B>Designed by the Gwydion Project</B></CENTER>
<P ALIGN=CENTER>
<CENTER><B>Copyright (c) 1994, 1995, 1996 Carnegie Mellon University All rights reserved.</B></CENTER>
<BR>
<A NAME="E8E77"></A>
<H2><B>1. </B><B>Introduction</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>The various modules in this library contain a few new types and operations which are compatible with the collection types specified in the Dylan Reference Manual, but which are not part of that specification. 
<P>It is to be expected that more collection types will appear in time, and they will likely be added to this library.  This may also result in reorganizations which could force incompatible changes to the existing modules.  We hope to minimize such imcompatibilities and, when forced to them, will include sufficient information to facilitate conversion of existing code. 
<P>Collection-extensions exports these modules:
<DL>
<DT><B>self-organizing-list</B></DT>
<UL>
<UL>
<DT>Provides &quot;self-organizing lists&quot;.  These explicit key collections provide roughly the semantics of hash tables, but use a probabilistic implementation which provides O(n) worst case performance but can provide very fast constant time access in the best case.</DT>
</UL></UL>
<DT><B>subseq</B></DT>
<UL>
<UL>
<DT>Provides &quot;subsequences&quot;, which represent an aliased reference to some part of an existing sequence.  These are analogous to slices (in Ada or Perl) or displaced arrays (in Common Lisp).  Subsequences are themselves subclasses of <B>&lt;sequence&gt;</B>, and can therefore be passed any <B>&lt;collection&gt;</B> or <B>&lt;sequence&gt;</B> operation.</DT>
</UL></UL>
<DT><B>vector-search</B></DT>
<UL>
<UL>
<DT>Provides a small assortment of specialized operations for searching and modifying <B>&lt;vector&gt;</B>s.  These operations are analogous to existing collection operations but provide keywords and efficiency improvements which are meaningful only within the more limited domain. </DT>
</UL></UL></DL>
<BR>
<A NAME="E8E78"></A>
<H2><B>2. </B><B>The </B><A NAME="I3"></A><B>Self-Organizing-List Module</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>The &quot;Self Organizing List&quot; is a poor man&#146;s hash table.  More precisely, <A NAME="I4"></A><B>&lt;self-organizing-list&gt;</B> is a subclass of <B>&lt;mutable-</B><B>explicit-key-collection&gt;</B> and <B>&lt;stretchy-collection&gt;</B> for which addition and retrieval are both linear in the worst case, but which use a probabilistic strategy which yields nearly constant time in the best case.
<P>Because they have a very low overhead, self-organizing lists may provide better peformance than hash tables in cases where references have a high degree of temporal locality.  They may also be useful in situations where it is difficult to create a proper hash function.
<P>Instantiate <B>&lt;self-organizing-list&gt;</B>s with 
<CODE>
<PRE>            make(&lt;self-organizing-list&gt;, test: test)</PRE>
</CODE>
<P><I>Test</I> is expected to be an equality function.  In particular, it is expected to satisfy the identity and transitivity requirements as described in the DRM.  If not specified, <I>test</I> defaults to <B>\==</B>. 
<BR>
<A NAME="E8E79"></A>
<H2><B>3. </B><A NAME="I5"></A><B>The Subsequence Module</B><A NAME="I6"></A></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P><B>&lt;Subsequence&gt;</B> is a new subclass of <B>&lt;sequence&gt;</B>.  A subsequence represents an aliased reference to some part of an existing sequence.  Although they may be created by <B>make</B> (with required keywords source:, start: and end:) on one of the instantiable subclasses, they are more often created by calls of the form 
<CODE>
<PRE>            <A NAME="I7"></A>subsequence(sequence, start: 0, end: 3)</PRE>
</CODE>
<P>where start: and end: are optional keywords which default to the beginning and end, respectively, of the source sequence.  No other new operations are defined for subsequences, since all necessary operations are inherited from <B>&lt;sequence&gt;</B>.  
<P>Because subsequences are aliased references into other sequences, several properties must be remembered:  
<UL>
<LI>The contents of a subsequence are undefined after any destructive operation upon the source sequence.  
<LI>Destructive operations upon subsequences may be reflected in the source.  The results of <B>reverse!</B> and <B>sort!</B> should be expected to affect the source sequence for vector subsequences. 
</UL>
<P>If the source sequences are instances of <B>&lt;vector&gt;</B> or <B>&lt;string&gt;</B>, then the implementation will use subclasses of <B>&lt;subsequence&gt;</B> which are also subclasses of <B>&lt;vector&gt;</B> or <B>&lt;string&gt;</B>.  
<P>Efficiency notes:  
<UL>
<LI>The implementation tries to insure that subsequences of subsequences can be accessed as efficiently as the original subsequence.  (For example, the result of 
</UL>
<CODE>
<PRE>            subsequence(subsequence(source, start: 1), start: 2)</PRE>
</CODE>
<P>would produce a subsequence identical to the one produced by 
<CODE>
<PRE>            subsequence(source, start: 3)</PRE>
</CODE>
<UL>
<LI>Vector subsequences, like all other vectors, implement constant time element access.  
<LI>Non-vector subsequences may take non-constant time to create, but will provide constant-time access to the first element.  This should produce the best performance provided some element of the subsequence is accessed at least once. 
</UL>
<BR>
<A NAME="E8E80"></A>
<H2><B>4. </B><B>The </B><A NAME="I8"></A><B>Vector-Search Module</B></H2>
<P ALIGN=LEFT><IMG SRC="gmindy/navyl.gif" WIDTH = 750 HEIGHT = 9>
<P>The vector-search module provides basic search and replace capabilities upon restricted subsets of <B>&lt;sequence&gt;</B> -- primarily <B>&lt;vector&gt;</B>.  Exploiting the known properties of these types yields substantially better performance than can be achieved for sequences in  general. 
<P>The following functions are supplied: <A NAME="I9"></A>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>find-first-key</B>(<I>vector</I>, <I>predicate?</I>, #key <I>start</I>, <I>end</I>, <I>failure</I>) =&gt; <I>key</I>  [Function]</FONT>
<UL>
<UL>Find the index of first element (after <I>start</I> but before <I>end</I>) of a vector which satisfies <I>predicate?</I>.  If no matching element is found, return <I>failure</I>.  The defaults for <I>start</I>, <I>end</I> and <I>failure</I> are, respectively,  0, size(vector), and #f.  This function is like <B>find-key</B>, but accepts start: and end: rather than skip:.<A NAME="I10"></A>
<BR>
</UL></UL>
<P ALIGN=LEFT><IMG SRC="gmindy/navys.gif" WIDTH = 360 HEIGHT = 9>
<P>
<FONT SIZE="+1"><B>find-last-key</B>(<I>vector</I>, <I>predicate?</I>, #key <I>start</I>, <I>end</I>, <I>failure</I>) =&gt; <I>key</I>  [Function]</FONT>
<UL>
<UL>This is like <B>find-first-key</B>, but goes backward from <I>end</I>. 
<BR>
</UL></UL>
<P>
<CENTER><TABLE BORDER=1 CELLSPACING=1 ><TR>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="mindy.htm#E28E1">Mindy Compiler</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="debug.htm#E28E2">Mindy Debugger</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="inspect.htm#E28E3">Mindy Object</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="EXTENS~1.htm#E28E4">Extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="streams.htm#E28E5">Streams Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="STANDA~1.htm#E28E6">Standard IO</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="print.htm#E28E7">Print Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="format.htm#E28E8">Format Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="melange.htm#E28E9">Melange Interface</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="dylan-tk.htm#E28E10">TK Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="COLLEC~1.htm#E28E11">Collection extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="TABLE-~1.htm#E28E12">Table Extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="STRING~1.htm#E28E13">String extensions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="REGULA~1.htm#E28E14">Regular Expressions</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="TRANSC~1.htm#E28E15">Transcendental Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="time.htm#E28E16">Time Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="random.htm#E28E17">Random Library</A></TD>
</FONT>
<TD VALIGN=top ><FONT SIZE="-1" ><A HREF="matrix.htm#E28E18">Matrix Library</A>
</TD></FONT>
</TR></TABLE>
</CENTER><P ALIGN=CENTER>
<A HREF="dylan-tk.htm" TARGET="_self"><IMG SRC="gmindy/blrprev.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Previous Page"></A>
<A HREF="httoc.htm" TARGET="_self"><IMG SRC="gmindy/blrtoc.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="TOC"></A>
<A HREF="htindex.htm" TARGET="_self"><IMG SRC="gmindy/blrindex.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Index"></A>
<A HREF="TABLE-~1.htm" TARGET="_self"><IMG SRC="gmindy/blrnext.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="Next Page"></A>
<A HREF="http://legend.gwydion.cs.cmu.edu/gwydion" TARGET="_self"><IMG SRC="gmindy/blrhome.gif" WIDTH = 32 HEIGHT = 32 BORDER = 0 ALT="See Page"></A>

<P>
<ADDRESS>Copyright 1994, 1995, 1996, 1997 Carnegie Mellon University. All rights reserved.</ADDRESS>
<P><A HREF="MAILTO:gwydion-bugs@cs.cmu.edu">Send comments and bug reports to gwydion-bugs@cs.cmu.edu</A>
</BODY></HTML>
