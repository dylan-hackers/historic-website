@SysInclude { report }
@Report
@DateLine { Yes }
@Title {
Post-Facto Type Inference
}
@Author { Gabor Greif }
@AbstractDisplay { Yes }
# @AbstractFormat { @Centre @Title @DP @Body }
@Abstract {

We explore a novel kind of type inference in
object-oriented, dynamically dispatched setting.
The inference is based on the observation that
the absence of certain semantics-dictated errors
can be exploited to draw conclusions about the
dynamic type of function call arguments. We
sketch the implementation of post-facto type
inference in the Gwydion Dylan compiler and
provide empirical data about the effects of the
resulting optimization and its applicability.
}
//

##################################
##################################
##################################
@Section
@Title { Structure of the Paper }
@Begin
@PP
In this report we first introduce the needed
concepts and vocabulary, and then describe the
type inference algorithm. A section is devoted
to the description of the implementation in the
Gwydion Dylan @F d2c compiler along with measurements
on the effectivity of the applicable optimizations.
The last three sections compare our method to
other work, explore future lines of thought
and conclude.
@End @Section

##################################
##################################
##################################
@Section
@Title { Introduction }
@Begin
@PP
We start out by providing a short informal tour
of dynamic typing in object-oriented languages.
Folowing that we describe a distinguishing feature of
the Dylan programming language, namely @I { multiple
dispatch } with its associated concept of @I { generic
functions }.

#################
@BeginSubSections

###########
@SubSection @Title { Dynamic Typing }
@Begin
@PP
In dynamically typed languages the compiler needs no
knowledge of the exact type of an object. Instead, a
run-time typecheck gets inserted for every assertion
the compiler makes, so that no object behaviour is
invoked that has not been specified. This is one way
to achieve type safeness. A type-safe program cannot
go wrong as long as enough resources are available.
For some languages or implementations the compiler
is able to determine the type of a dynamic object
by either taking the @I { type annotations } in consideration
or by @I inferring a more restricted @I subtype of
the class @DClass object. In this case we talk about @I
{ statically known } types. But there is no way to
generally figure out the @I { dynamic type } of an
object, since classes may be added in other libraries,
or even at runtime, outside of the compilers know.
@End @SubSection

###########
@SubSection @Title { Multiple Dispatch }
@Begin
@PP
In contrast to the conventional @I { single receiver }
languages, which allow polymorpic behaviour only on
the distinguished receiver argument, @I { multiply dispatched }
languages such as Dylan allow an ordered set of arguments
determine behaviour in cooperation. The classical example
of the usefulness of this feature is the output of different
documents on a range of devices. In Dylan one would declare
@IndentedDisplay @F @Verbatim
{
define generic render (doc :: <document>, dev :: <device>) => ();
}
and specialize @F {method}s with either one or both arguments'
types given more precisely:
@IndentedDisplay @F @Verbatim
{
define method render (doc :: <html-document>, dev :: <laser-printer>) => ();
}
@End @SubSection

###########
@SubSection @Title { Generic Functions and Sealing }
@Begin
@PP
The mechanism how Dylan manages to find an appropriate
method that best approximates the dynamic types of
invocation arguments is accomplished via @I { generic
functions }. Generic functions (also GFs for brevity)
hold a set of methods internally, each having a @I signature
which tells the GF for which dynamic types of the arguments
each method becomes @I applicable.
The exact workings of this are rather arcane, but well
described in the @DRM. For our purposes we simply recognize
that the applicable methods get determined by the GF and
sorted by @I { specificity }. In this process the @I ambiguous
methods (i.e. those that are neither less nor more
specific than another method) get separated away and not
considered any more. From the remaining methods the most
specific gets called to obtain behaviour or a function result.
To obtain good performance even in multi-dispatched setting
a compiler will try to resolve to the most-applicable method
at compile time. Naturally, being able to do this depends
on the closed world assumption. To aid the compiler in closing
the small worlds of generic functions, the Dylan language
specifies the @I library as the unit of compilation and gives
the library writer a tool called @I sealing. By using
@IndentedDisplay @F @Verbatim
{
define sealed domain render (<document>, <laser-printer>) => ();
}
the GF @F render is prohibited from accepting methods specialized
on subtypes of the given signature that originate outside the
library being the provider of the seal. Sealed domains also arise
implicitly by not declaring GFs as being @F { open }.
@End @SubSection

@EndSubSections

@End @Section


##################################
##################################
##################################
@Section
@Title { The Post-Facto Analysis }
@Begin
Our analysis centers around the observation that a successful function
call automatically implies that all semantics dictated constraints w.r.t.
the function's call and return preconditions are fulfilled. To stay with
our running example from the introduction, if a call @F { render(a, b) }
returns, we can safely assume that the constraints @F { instance?(a, <document>) }
and @F { instance?(b, <device>) } hold true.
@PP

#################
@BeginSubSections

###########
@SubSection @Title { Using the Function Signature }
@Begin
@PP
In Dylan (among other dynamically typed safe languages) a
functions signature conveys two contracts:
@BulletList
   @ListItem { the caller promises to only invoke the function
with the number and types of arguments as laid down in the @I { argument
declaration } of the signature, and }
   @ListItem { the function promises to return the number and types of
   values as laid down in the @I { return declaration } of the signature. }
@EndList
In the case that any of these contracts are violated, the function does
not return, but @I { signals an error }.
In summary the function call return is an evidence that the contract
by types has been fulfilled. Naturally, if the language provides means of
intercepting runtime errors (Dylan provides @F {block}s and @F {let handler}s
for this purpose) the inference domain ends at these @I { error boundaries }.
@PP This analysis is certainly widely known and exploited, e.g. by @I { type
checking } arguments before the call to the function and propagating the type-refined
expressions furtheron. Also the declared types of the returned values can be
used in the obvious way. Our contribution is the exploration of the described
principle in a multiply dispatched setting.
@End @SubSection

###########
@SubSection @Title { Determining Call Candidates }
@Begin
@PP
For sealed generic functions (more precisely sealed GF domains) the closed-world
assumption holds, and the compiler is in the posession of every method that belongs
to the GF domain, along with their signatures. This allows the compiler to rule out
any method as being not applicable where the static types of the arguments are
provably disjoint to the respective argument type of the method. What remains is the
set of possibly applicable methods. In addition the compiler is able to determine
the @I { definitive set } of methods that are provably applicable by checking that
the static types of arguments are subtypes of the respective argument types in the
signature. Leaving away the definitive set from the applicable set the @I { maybe set }
remains.
@PP The Dylan language semantics describes [@I refDRM] that from the set of
applicable methods the one with the most specific argument types will be called
(which in turn may call @F next-method to pass control to the next specific one
for code reuse purposes).
@End @SubSection

###########
@SubSection @Title { Extracting Typing Constraints }
@Begin
@PP
When the compiler can determine exactly one most specific method that is to be called,
the widely known and applied optimization arises: the return type of the function can
be utilized to track the type of the value returned from the function call.
@PP This is not our focus however. We are interested in the amount of information that
can be extracted from the call to the GF when it is not exactly known to the compiler
which method form the maybe set will be invoked at runtime. In the terms of the previous
section the compiler infers a nonempty fixed applicable set (because of sealig), and an
empty definitive set (because the knowledge of argument types is not precise enough).
Our optimization tries to turn this vice of multiple dispatch to a virtue, nevertheless.
@PP We observe that since all methods in the maybe set are applicable, one of them @I
{ will be called }. This can be stated in terms of typing: the type of argument @I n
must have been in the type union of the methods in the maybe set at argument position
{@I n}, if the function call returns @I {without signalling an error}. In the dominance
domain of this call we can assume that the type constraint holds.
We introduce some notation to be able to formalize this a bit. Let sigma(tau1, tau2, ..., taun)
denote the product type of an {@I n}-ary method's argument signature. The maybe set then
can be described as a set of distinct signatures: "{" sigma1, sigma2, ..., sigmam "}".
We denote the projection operator to extract the type of argument 1<={@I i}<=n from a
method signature: sigma(tau1, tau2, ..., taun) "|i" = taui.
@PP This allows to formulate our above notion as known-type(i, "{" sigma1, sigma2, ..., sigmam "}") <=
type-union(sigma1 "|i", ..., sigmam "|i"). One might ask for the reason of the inequality in
this formula. It simply states that we can do even @I better than the formula suggests!
@End @SubSection

###########
@SubSection @Title { Polynomial Constraints }
@Begin
@PP
Consider the following Dylan snippet:

@Verbatim {

define method theory-of-everything(t == #t, v == 42) ...
define method theory-of-everything(t == #f, v == 0) ...

...
    theory-of-everything(truth, value);
    if (truth)
        format-out("there is hope: %d", value);
    else
        format-out("ask again: %d", value);
    end if;
}

Here the first argument to @F foo selects one of the
methods @F "foo{#t, 42}" or @F "foo{#f, 0}". In the two
arms of the @F if statement a similar selection is performed:
since @F truth can only be @F #t or @F #f the first arm is
entered in the former and the second in the latter case.
Surprisingly knowing the value (or type) of @F truth, we
can deduce the @F value since @F #t for the first argument
automatically implies @F 42 for the second and @F #f for
@F truth implies @F 0 for value.



signature unions, indexed by argument. gives rise to
multiple constraints

@End @SubSection

###########
@SubSection @Title { Type Algebra of Tuple Unions }
@Begin
@PP
Consider the following 

signature unions, indexed by argument. gives rise to
multiple constraints

@End @SubSection


@EndSubSections


@End @Section


##################################
##################################
##################################
@Section
@Title { Other Inference Methods }
@Begin
@PP
propagating inferred information in
form of types.
@End @Section


##################################
##################################
##################################
@Section
@Title { Implementing Polynomial Constraints }
@Begin
@PP

@End @Section


##################################
##################################
##################################
@Section
@Title { Measurements of Inference Effectivity }
@Begin
@PP

It is expected that our method is most effective on sparsely
type-annotated programs.
@End @Section


##################################
##################################
##################################
@Section
@Title { Further Work }
@Begin
@PP
@StarList
   @ListItem { using the fact that an error happened? }
   @ListItem { using the definitive set to add information? }
   @ListItem { using the known ambiguities to add information?
Certain type combinations would lead to ambibuities, thus
calls could succeed where a specific method failed (e.g. type error on a keyword arg) }
   @ListItem { using the type of returned objects to
recognize (constrain) several argument
types at the same time }
   @ListItem { connection to CPS? }
   @ListItem { new entrypoint that checks types (only), no checks at call site? }
   @ListItem { @F apply and argument sequence size, keywords and keyword parameters
(every 2nd is <symbol> and oneof(keywords), the following ones are of specific type) }
   @ListItem { using @F primary to ensure type disjointness (similarly getter return value
conflicts) }
@EndList

@End @Section


##################################
##################################
##################################
@Section
@Title { Conclusion }
@Begin
@PP
@End @Section


##################################
##################################
##################################
@Section
@Title { Thanks }
@Begin
@PP
Peter Housel, Kim Barrett
@End @Section


##################################
##################################
##################################
@Section
@Title { Bibliography }
@Begin
@PP

@End @Section


