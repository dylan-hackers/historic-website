<?php
require "fragments.inc";
code_header("Everything's a Value");
?>

<P>Every Dylan statement or expression returns a value. Control constructs
and functions return the value of the last expression in their
body.</P>

<BLOCKQUOTE><PRE>
define function absolute-value(x :: &lt;integer&gt;)
 => (result :: &lt;integer&gt;)
  if (x >= 0)
    x;
  else
    -x;
  end;
end;
</PRE></BLOCKQUOTE>

<P>Several other aspects of Dylan are visible in this example:</P>

<UL>

<LI><P>Dylan identifiers may contain several characters that aren't usually
allowed by other languages, such as '-', '*', '&lt;', '&gt;', and '$'.  This
means identifiers must often be surrounded by whitespace.  This is a good
thing, since whitespace aids readability.  The special characters are mainly
used for naming conventions.  For example, <code>*foo*</code> indicates a
module variable, <code>&lt;foo&gt;</code> indicates a class, and
<code>$foo</code> indicates a constant.</p>

<LI><P>Blocks of code begin with a normal header, but don't have an
<CODE>{</CODE> bracket or a <CODE>begin</CODE> statement.  Blocks do, however,
have an <CODE>end</CODE> keyword at the bottom. You can omit semi-colons at the
end of blocks, which if often done to indicate that the value is expected to be
returned.</P>

</UL>

<?php code_footer(); ?>
