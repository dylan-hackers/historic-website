<?php
require "fragments.inc";
code_header("Classes and make()");
?>

<P>Dylan makes it easy to deal with objects. You don't normally need to
write constructors or accessor functions, which saves a lot of boring
typing. You can initialize slots (a.k.a. "member variables") using keyword
arguments, default values or full-fledged expressions. A small percentage
of classes still need constructors, which can be defined by overriding
<CODE>initialize</CODE>.</P>

<BLOCKQUOTE><PRE>
define class &lt;car> (&lt;object>)
  slot serial-number :: &lt;integer> = unique-serial-number();
  slot model-name :: &lt;string>,
    required-init-keyword: model:;
  slot has-sunroof? :: &lt;boolean>,
    init-keyword: sunroof?:,
    init-value: #f;
end class &lt;car>;

define variable *unique-serial-number* = 0;

define function unique-serial-number() => (usn :: &lt;integer>)
  let serial = *unique-serial-number*;
  *unique-serial-number* := *unique-serial-number* + 1;
  serial;
end function;

define constant $blue-car = make(&lt;car>, model: "Viper");
define constant $black-car = make(&lt;car>, model: "Town Car", sunroof?: #t);
define constant $red-car = make(&lt;car>, model: "F40", sunroof?: #f);
</PRE></BLOCKQUOTE>

<?php code_footer(); ?>
