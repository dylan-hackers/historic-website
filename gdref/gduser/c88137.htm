<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML
><HEAD
><TITLE
>Working with LID (Library Interchange Definition) Files</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet version 1.13"><LINK
REL="HOME"
TITLE="Gwydion Dylan User's Guide"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Using d2c"
HREF="c88.htm"><LINK
REL="PREVIOUS"
TITLE="Using d2c"
HREF="c88.htm"><LINK
REL="NEXT"
TITLE="Invoking d2c"
HREF="c88206.htm"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>Gwydion Dylan User's Guide</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="c88.htm"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 3. Using <B
CLASS="COMMAND"
>d2c</B
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="c88206.htm"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><H1
><A
NAME="GDUSER-WORKING-WITH-LID"
>Working with LID (Library Interchange Definition) Files</A
></H1
><P
>As described in the DRM, in the Dylan language the basic
      unit of compilation is the library.  FIXME more to say about this.</P
><P
>A LID file is composed of entries of the form
      <TT
CLASS="LITERAL"
>keyword: <TT
CLASS="PARAMETER"
><I
>value</I
></TT
></TT
>,
      similar to mail headers and to the Dylan file header
      format. Currently <B
CLASS="COMMAND"
>d2c</B
> expects the list of source files to
      appear as the "main body" of the LID file, after the header and
      a blank line. In the Harlequin LID format, there is a
      <TT
CLASS="LITERAL"
>Files:</TT
> entry which is used instead, and which
      we do not yet support. </P
><P
><B
CLASS="COMMAND"
>d2c</B
> recognizes these LID entries:</P
><P
></P
><DL
><DT
><TT
CLASS="LITERAL"
>Library:
	  <TT
CLASS="PARAMETER"
><I
>dylan-library-name</I
></TT
></TT
></DT
><DD
><P
>The Dylan name for the library that we are
	    defining. There must be a corresponding <TT
CLASS="LITERAL"
>define
	    library</TT
> somewhere in the source for this
	    library.</P
></DD
><DT
><TT
CLASS="LITERAL"
>Unit-prefix:
	  <TT
CLASS="PARAMETER"
><I
>c_legal_identifier_fragment</I
></TT
></TT
></DT
><DD
><P
>This prefix is used to make the C translation of
	    names in this library unique w.r.t. any other libraries
	    that might be used. This defaults to the library name, so
	    only needs to be specified if the library name contains
	    illegal C name characters (such as
	    "<TT
CLASS="LITERAL"
>-</TT
>").</P
></DD
><DT
><TT
CLASS="LITERAL"
>Unique-ID-base:
	  <TT
CLASS="PARAMETER"
><I
>decimal-integer</I
></TT
></TT
></DT
><DD
><P
>Unique class identifiers for classes defined in this
	    library are assigned sequentially starting with the
	    specified integer. This should always be specified, but
	    you won't get a sensible error if it is missing. The base
	    should be sufficiently far from the base for any other
	    library so that class IDs won't overlap. You will get a
	    compile-time error if overlap occurs. A good base for user
	    code would be 30000.</P
></DD
><DT
><TT
CLASS="LITERAL"
>Executable:
	  <TT
CLASS="PARAMETER"
><I
>result-file-name</I
></TT
></TT
></DT
><DD
><P
>Specifies that we are building a runnable
	    application rather than a library. The executable is
	    generated with the specified name.</P
></DD
><DT
><TT
CLASS="LITERAL"
>Entry-Point:
	  <TT
CLASS="PARAMETER"
><I
>dylan-module</I
></TT
>:<TT
CLASS="PARAMETER"
><I
>dylan-variable</I
></TT
></TT
></DT
><DD
><P
>When generating an executable, this LID option
	    specifies which Dylan function is called as the main entry
	    point. You can also have no main entry point, in which
	    case the program exits after running all of the top level
	    forms. This entry-point function is called with two
	    arguments, argc (an integer) and argv (a raw
	    pointer). Note that this is incompatible with Mindy, and
	    rather brutal as well. You can get the <B
CLASS="COMMAND"
>mindy</B
> semantics
	    of calling <TT
CLASS="LITERAL"
>Extensions:Main</TT
> by using the
	    <TT
CLASS="LITERAL"
>Extensions</TT
> module in your main module
	    and then specifying: <TT
CLASS="LITERAL"
>Entry-Point:
	    <TT
CLASS="PARAMETER"
><I
>mymodule</I
></TT
>:%main</TT
> in the LID
	    file. The <TT
CLASS="LITERAL"
>%Main</TT
> function parses the
	    arguments and then calls <TT
CLASS="LITERAL"
>Main</TT
>. </P
></DD
><DT
><TT
CLASS="LITERAL"
>Linker-options:
	  <TT
CLASS="PARAMETER"
><I
>various-ld-flags</I
></TT
></TT
></DT
><DD
><P
>This option specifies flags which must be passed to
	    <B
CLASS="COMMAND"
>ld</B
> when linking against this
	    library. This is primarily used when a foreign library is
	    called via one of the undocumented callout mechanisms. For
	    example, <TT
CLASS="FILENAME"
>Dylan.lid</TT
> specifies
	    <SPAN
CLASS="OPTION"
>-lm</SPAN
> so that it can use the math
	    library. This dependency is automatically propagated to
	    users of the library.</P
></DD
><DT
><TT
CLASS="LITERAL"
>Features:
	  <TT
CLASS="PARAMETER"
><I
>features-list</I
></TT
></TT
></DT
><DD
><P
>The argument is a space-separated list of features
	    or misfeatures. If the token begins with
	    <TT
CLASS="LITERAL"
>~</TT
>, then the rest of the token is
	    interpreted as a feature to remove. Otherwise, the token
	    is added as a feature.</P
></DD
></DL
><P
>Here is a sample LID file:</P
><PRE
CLASS="PROGRAMLISTING"
>rcs-header: $Header: /scm/cvs/www/gdref/gduser/Attic/c88137.htm,v 1.1 1998/12/08 17:14:37 andreas Exp $
library: my-program
unit-prefix: myprog
unique-id-base: 30000
executable: mp
entry-point: main:%main

myprog-exports.dylan
myprog.dylan</PRE
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="c88.htm"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="c88206.htm"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Using <B
CLASS="COMMAND"
>d2c</B
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="c88.htm"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Invoking <B
CLASS="COMMAND"
>d2c</B
></TD
></TR
></TABLE
></DIV
></BODY
></HTML
>