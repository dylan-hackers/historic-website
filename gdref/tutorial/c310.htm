<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML
><HEAD
><TITLE
>Objects</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet version 1.13"><LINK
REL="HOME"
TITLE="Getting Started with 
Dylan"
HREF="book1.htm"><LINK
REL="PREVIOUS"
TITLE="Keyword Arguments"
HREF="c215295.htm"><LINK
REL="NEXT"
TITLE="Slots"
HREF="c310337.htm"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>Getting Started with 
<SPAN
CLASS="TRADEMARK"
><A
HREF="http://www.cambridge.apple.com/dylan/dylan.html"
TARGET="_top"
>Dylan</A
></SPAN
></TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="c215295.htm"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="c310337.htm"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><H1
><A
NAME="OBJECTS"
>Chapter 4. Objects</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>Table of Contents</B
></DT
><DT
><A
HREF="c310.htm#BUILT-IN-CLASSES"
>Built-In Classes</A
></DT
><DT
><A
HREF="c310337.htm"
>Slots</A
></DT
><DT
><A
HREF="c310361.htm"
>Getters and Setters</A
></DT
><DT
><A
HREF="c310370.htm"
>Generic Functions and Objects</A
></DT
><DT
><A
HREF="c310401.htm"
>Initializers</A
></DT
><DT
><A
HREF="c310414.htm"
>Abstract Classes and Overriding Make</A
></DT
></DL
></DIV
><P
>The feautres of Dylan's object system don't map directly onto the
    features found in <SPAN
CLASS="ACRONYM"
>C++</SPAN
>. Dylan handles access control using
    <I
CLASS="GLOSSTERM"
>modules</I
>, not <TT
CLASS="LITERAL"
>private</TT
> declarations within
    individual objects. Standard Dylan has no destructors, but instead
    relies upon the garbage collector to recover memory and on exception
    handling blocks to recover other resources. Dylan objects don't even
    have real member functions.</P
><P
>Despite these oddities, Dylan's object system is at least as
    powerful as that of <SPAN
CLASS="ACRONYM"
>C++</SPAN
>. Multiple inheritance works smoothly,
    constructors are rarely needed and there's no such thing as object
    slicing. Alternate constructs replace the missing <SPAN
CLASS="ACRONYM"
>C++</SPAN
> features. Quick
    and dirty classes can be turned into clean classes with little editing
    of existing code.</P
><P
>Before starting, temporarily set aside any low-level expertise in
    <SPAN
CLASS="ACRONYM"
>C++</SPAN
> or Object Pascal. Dylan differs enough that such knowledge can
    actually interfere with the initial learning process.</P
><H1
><A
NAME="BUILT-IN-CLASSES"
>Built-In Classes</A
></H1
><P
>Dylan has a large variety of built-in classes. Several of these
      represent primitive data types, such as <TT
CLASS="LITERAL"
>&#60;integer&#62;</TT
> and
      <TT
CLASS="LITERAL"
>&#60;character&#62;</TT
>. A few represent actual language-level
      entities, such as <TT
CLASS="LITERAL"
>&#60;class&#62;</TT
> and
      <TT
CLASS="LITERAL"
>&#60;function&#62;</TT
>. Most of the others implement collection
      classes, similar to those found in <SPAN
CLASS="ACRONYM"
>C++</SPAN
>'s Standard Template
      Library. A few of the most important classes are shown in <A
HREF="c310.htm#FIGURE.CLASS-TREE"
>Figure 4-1</A
>.</P
><DIV
CLASS="FIGURE"
><P
><B
><A
NAME="FIGURE.CLASS-TREE"
>Figure 4-1. Several Standard Dylan Classes</A
></B
></P
><P
><IMG
SRC="class-tree.pic"
ALT=""></P
></DIV
><P
>The built-in collection classes include a number of common data
      structures. Arrays, tables, vectors, ranges and deques should be
      provided by all Dylan implementations. The language specification
      also standardizes strings and byte-strings, certainly a welcome
      convenience.</P
><P
>Not all the built-in classes may be subclassed. This allows the
      compiler to heavily optimize code dealing with basic numeric types
      and certain common collections. The programmer may also mark classes
      as <I
CLASS="GLOSSTERM"
>sealed</I
>, restricting how and where they may be
      subclassed. See <A
HREF="c471.htm"
>Chapter 6</A
> for details.</P
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="c215295.htm"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="c310337.htm"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Keyword Arguments</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Slots</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>