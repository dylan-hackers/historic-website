<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML
><HEAD
><TITLE
>Multiple Dispatch</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet version 1.13"><LINK
REL="HOME"
TITLE="Getting Started with 
Dylan"
HREF="book1.htm"><LINK
REL="PREVIOUS"
TITLE="Abstract Classes and Overriding Make"
HREF="c310414.htm"><LINK
REL="NEXT"
TITLE="Modules & Libraries"
HREF="c471.htm"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>Getting Started with 
<SPAN
CLASS="TRADEMARK"
><A
HREF="http://www.cambridge.apple.com/dylan/dylan.html"
TARGET="_top"
>Dylan</A
></SPAN
></TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="c310414.htm"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="c471.htm"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><H1
><A
NAME="MULTIPLE-DISPATCH"
>Chapter 5. Multiple Dispatch</A
></H1
><P
><I
CLASS="GLOSSTERM"
>Multiple dispatch</I
> is one of the most powerful and
    elegant features of Dylan. As explained in the section on <A
HREF="c310370.htm"
>generic functions and objects</A
>,
    Dylan methods are declared separately from the classes upon which they
    act. <I
CLASS="GLOSSTERM"
>Polymorphism</I
>, the specialization of methods for use
    with particular classes, can be implemented by declaring several
    methods with different parameters and attaching them to one generic
    function:</P
><PRE
CLASS="PROGRAMLISTING"
>define generic inspect-vehicle(v :: &#60;vehicle&#62;, i :: &#60;inspector&#62;) =&#62; ();

define method inspect-vehicle(v :: &#60;vehicle&#62;, i :: &#60;inspector&#62;) =&#62; ();
	look-for-rust(car);
end;

define method inspect-vehicle(car :: &#60;car&#62;, i :: &#60;inspector&#62;) =&#62; ();
	next-method(); // perform vehicle inspection
	check-seat-belts(car);
end;

define method inspect-vehicle(truck :: &#60;truck&#62;, i :: &#60;inspector&#62;) =&#62; ();
	next-method(); // perform vehicle inspection
	check-cargo-attachments(truck);
end;</PRE
><P
>However, different types of vehicle inspectors may have different
    policies. A state inspector, in addition to the usual procedures, will
    also typically check a car's insurance policy. To implement this, add
    another method to the generic function
    <TT
CLASS="FUNCTION"
><B
>inspect­vehicle</B
></TT
>:</P
><PRE
CLASS="PROGRAMLISTING"
>define method inspect-vehicle(car :: &#60;car&#62;, i :: &#60;state-inspector&#62;) =&#62; ();
	next-method(); // perform car inspection
	check-insurance(car);
end;

let inspector = make(&#60;state-inspector&#62;);
let car = make(&#60;car&#62;);
inspect-vehicle(car, inspector);</PRE
><P
>Calling the generic function <TT
CLASS="FUNCTION"
><B
>inspect-vehicle</B
></TT
> with
    these arguments performs three separate tasks:
    <TT
CLASS="FUNCTION"
><B
>look-for-rust</B
></TT
>, <TT
CLASS="FUNCTION"
><B
>check-seat-belts</B
></TT
> and
    <TT
CLASS="FUNCTION"
><B
>check-insurance</B
></TT
>. The most specific method on
    <TT
CLASS="FUNCTION"
><B
>inspect-vehicle</B
></TT
>&#8212;the one for the classes
    <TT
CLASS="LITERAL"
>&#60;car&#62;</TT
> and <TT
CLASS="LITERAL"
>&#60;state-inspector&#62;</TT
>&#8212;is
    invoked first and calls <TT
CLASS="FUNCTION"
><B
>next-method</B
></TT
> to invoke the
    less-specific methods in turn.</P
><P
>For an exact definition of &#8220;specific&#8221;, see the 
<A
HREF="http://www.cambridge.apple.com/dylan/drm/drm-1.html"
TARGET="_top"
><I
CLASS="CITETITLE"
>Dylan Reference Manual</I
></A
>
.</P
><H1
><A
NAME="SINGLETON-DISPATCH"
>Dispatching on Specific Objects</A
></H1
><P
>Dylan also allows functions to dispatch on specific
      objects. For example, state inspectors might pass the governor's car
      without actually looking at it. Dylan expresses this situation using
      <I
CLASS="GLOSSTERM"
>singletons</I
>, objects which are treated as though they were
      in a class of their own. For example:</P
><PRE
CLASS="PROGRAMLISTING"
>define constant $governors-car = make(&#60;car&#62;);

define method inspect-vehicle(car == $governors-car,
	i :: &#60;state-inspector&#62;) =&#62; ();
	wave-through(car);
end;</PRE
><P
>(In this example, none of the usual inspection methods will be
      invoked since the above code neglects to call
      <TT
CLASS="FUNCTION"
><B
>next-method</B
></TT
>.)</P
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="c310414.htm"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="c471.htm"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Abstract Classes and Overriding Make</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Modules &#38; Libraries</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>