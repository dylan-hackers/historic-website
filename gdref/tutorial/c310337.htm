<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML
><HEAD
><TITLE
>Slots</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet version 1.13"><LINK
REL="HOME"
TITLE="Getting Started with 
Dylan"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Objects"
HREF="c310.htm"><LINK
REL="PREVIOUS"
TITLE="Objects"
HREF="c310.htm"><LINK
REL="NEXT"
TITLE="Getters and Setters"
HREF="c310361.htm"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>Getting Started with 
<SPAN
CLASS="TRADEMARK"
><A
HREF="http://www.cambridge.apple.com/dylan/dylan.html"
TARGET="_top"
>Dylan</A
></SPAN
></TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="c310.htm"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 4. Objects</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="c310361.htm"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><H1
><A
NAME="SLOTS"
>Slots</A
></H1
><P
>Objects have <I
CLASS="GLOSSTERM"
>slots</I
>, which resemble the data members
      found in most other object-oriented languages. Like variables, slots
      are bound to values; they don't actually contain their data. A simple
      Dylan class shows how slots are declared:</P
><PRE
CLASS="PROGRAMLISTING"
>define class &#60;vehicle&#62; (&#60;object&#62;)
	slot serial-number;
	slot owner;
end;</PRE
><P
>The above code would quick and convenient to write while
      building a prototype, but it could be improved. The slots have no
      types, and worse, they have no initial values. (That's no easy
      achievement in Dylan, to create an uninitialized variable!) The
      following snippet fixes both problems:</P
><PRE
CLASS="PROGRAMLISTING"
>define class &#60;vehicle&#62; (&#60;object&#62;)
	slot serial-number :: &#60;integer&#62;,
		required-init-keyword: sn:;
	slot owner :: &#60;string&#62;,
		init-keyword: owner:, // optional
		init-value: "Northern Motors";
end class &#60;vehicle&#62;;</PRE
><P
>The type declarations work just like type declarations anywhere
      else in Dylan; they limit a binding to objects of a given class or of
      one of its subclasses, and they let the compiler optimize. The new
      keywords describe how the slots get their initial values. (The
      keyword <TT
CLASS="LITERAL"
>init-function</TT
> may also be used; it must be followed
      by a function with no arguments and the appropriate return type.)</P
><P
>To create a vehicle object using the new class declaration, a
      programmer could write one of the following:</P
><PRE
CLASS="PROGRAMLISTING"
>make(&#60;vehicle&#62;, sn: 1000000)
make(&#60;vehicle&#62;, sn: 2000000, owner: "Sal")</PRE
><P
>In the first example, <TT
CLASS="FUNCTION"
><B
>make</B
></TT
> returns a vehicle with
      the specified serial number and the default owner. In the second
      example, <TT
CLASS="FUNCTION"
><B
>make</B
></TT
> sets both slots using the keyword
      arguments.</P
><P
>Only one of <TT
CLASS="LITERAL"
>required-init-keyword</TT
>,
      <TT
CLASS="LITERAL"
>init-value</TT
> and <TT
CLASS="LITERAL"
>init-function</TT
> may be
      specified. However, <TT
CLASS="LITERAL"
>init-keyword</TT
> may be paired with either
      of the latter two if desired. More than one slot may be initialized
      by a given keyword.</P
><P
>Dylan also provides for the equivalent of <SPAN
CLASS="ACRONYM"
>C++</SPAN
>
      <TT
CLASS="LITERAL"
>static</TT
> members, plus several other useful allocation
      schemes. See the 
<A
HREF="http://www.cambridge.apple.com/dylan/drm/drm-1.html"
TARGET="_top"
><I
CLASS="CITETITLE"
>Dylan Reference Manual</I
></A
>
 for the full specifications.</P
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="c310.htm"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="c310361.htm"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Objects</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="c310.htm"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Getters and Setters</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>