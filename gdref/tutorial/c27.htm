<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML
><HEAD
><TITLE
>Why 
<SPAN
CLASS="TRADEMARK"
><A
HREF="http://www.cambridge.apple.com/dylan/dylan.html"
TARGET="_top"
>Dylan</A
></SPAN
>
?</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet version 1.13"><LINK
REL="HOME"
TITLE="Getting Started with 
Dylan"
HREF="book1.htm"><LINK
REL="PREVIOUS"
TITLE="Getting Started with 
Dylan"
HREF="book1.htm"><LINK
REL="NEXT"
TITLE="Functional Languages"
HREF="c2744.htm"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>Getting Started with 
<SPAN
CLASS="TRADEMARK"
><A
HREF="http://www.cambridge.apple.com/dylan/dylan.html"
TARGET="_top"
>Dylan</A
></SPAN
></TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="book1.htm"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="c2744.htm"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><H1
><A
NAME="WHY-DYLAN"
>Chapter 1. Why 
<SPAN
CLASS="TRADEMARK"
><A
HREF="http://www.cambridge.apple.com/dylan/dylan.html"
TARGET="_top"
>Dylan</A
></SPAN
>
?</A
></H1
><DIV
CLASS="TOC"
><DL
><DT
><B
>Table of Contents</B
></DT
><DT
><A
HREF="c27.htm#DYNAMIC-VS-STATIC"
>Dynamic vs. Static Languages</A
></DT
><DT
><A
HREF="c2744.htm"
>Functional Languages</A
></DT
><DT
><A
HREF="c2759.htm"
>Algebraic Infix Syntax</A
></DT
><DT
><A
HREF="c2767.htm"
>Object Orientation</A
></DT
><DT
><A
HREF="c2778.htm"
>Garbage Collection</A
></DT
><DT
><A
HREF="c2792.htm"
>Why Not Dylan?</A
></DT
></DL
></DIV
><P
>What earthly reason could there be for learning yet
    <I
CLASS="EMPHASIS"
>another</I
> computer language? And why should that language be
    Dylan?</P
><P
>Dylan has an interesting combination of features. It is a dynamic
    language, but is designed to perform nearly as well as a static
    language. It is a <A
HREF="c2744.htm"
>functional</A
>
    language&#8212;like Scheme or TCL&#8212;but uses an algebraic infix
    syntax similar to C's. Dylan is object-oriented from the ground up,
    supports multiple inheritence and exceptions, implements <A
HREF="c441.htm"
>multiple dispatch</A
>, and <A
HREF="c2778.htm"
>collects garbage</A
>.</P
><H1
><A
NAME="DYNAMIC-VS-STATIC"
>Dynamic vs. Static Languages</A
></H1
><P
><I
CLASS="GLOSSTERM"
>Static</I
> languages need to know the type of every
      variable at compile time. Examples of static languages include C,
      Pascal and Eiffel. Code written in static languages typically
      compiles efficiently, and strong type-checking reduces the risk of
      errors.</P
><P
><I
CLASS="GLOSSTERM"
>Dynamic</I
> languages allow the programmer to create
      variables without explicitly specifying the type of information they
      contain. This simplifies prototyping and cleans up certain kinds of
      object oriented code. Typical dynamic languages include LISP, Perl
      and SmallTalk.</P
><P
>Dylan provides a good balance between the advantages of static
      and dynamic languages. The programmer may choose to specify or omit
      type declarations as desired. Code using explicit variable types can
      be compiled very efficiently, and type mismatch errors can be caught
      at compile time. Code omitting those type declarations gains the
      flexibility of a dynamic language.</P
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="book1.htm"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="c2744.htm"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Getting Started with 
<SPAN
CLASS="TRADEMARK"
><A
HREF="http://www.cambridge.apple.com/dylan/dylan.html"
TARGET="_top"
>Dylan</A
></SPAN
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Functional Languages</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>