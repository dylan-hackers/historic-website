<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML
><HEAD
><TITLE
>Object Orientation</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet version 1.13"><LINK
REL="HOME"
TITLE="Getting Started with 
Dylan"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Why 
Dylan
?"
HREF="c27.htm"><LINK
REL="PREVIOUS"
TITLE="Algebraic Infix Syntax"
HREF="c2759.htm"><LINK
REL="NEXT"
TITLE="Garbage Collection"
HREF="c2778.htm"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>Getting Started with 
<SPAN
CLASS="TRADEMARK"
><A
HREF="http://www.cambridge.apple.com/dylan/dylan.html"
TARGET="_top"
>Dylan</A
></SPAN
></TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="c2759.htm"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 1. Why 
<SPAN
CLASS="TRADEMARK"
><A
HREF="http://www.cambridge.apple.com/dylan/dylan.html"
TARGET="_top"
>Dylan</A
></SPAN
>
?</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="c2778.htm"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><H1
><A
NAME="OBJECT-ORIENTED"
>Object Orientation</A
></H1
><P
>Unlike many other object-oriented languages, Dylan uses objects
      for every data value. Integers and strings are objects, as are
      functions and classes themselves.</P
><P
>Dylan's design makes this reasonably efficient. Compile-time
      analysis and explicit <A
HREF="c98199.htm"
>type
      declarations</A
> allow the compiler to optimize away most of the
      overhead. Other language features permit the programmer to mark
      certain classes as <I
CLASS="GLOSSTERM"
>sealed</I
>, that is, inelligible for
      further subclassing.</P
><P
>Dylan's object model, detailed in the following sections of
      this tutorial, differs from that of <SPAN
CLASS="ACRONYM"
>C++</SPAN
> in several important
      respects. Multiple inheritance may be used freely, without concern
      for <I
CLASS="GLOSSTERM"
>object slicing</I
>, erroneous down-casting or a whole
      host of other gotchas familiar to <SPAN
CLASS="ACRONYM"
>C++</SPAN
> programmers. Methods are
      separate from class declarations, allowing a programmer to write new
      polymorphic functions without editing the relevant base
      class. Methods may also dispatch ploymorphically on more than one
      parameter, a powerful technique known as <I
CLASS="GLOSSTERM"
>multiple
      dispatch</I
>. All of these features will be explained in greater detail
      later on.</P
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="c2759.htm"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="c2778.htm"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Algebraic Infix Syntax</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="c27.htm"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Garbage Collection</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>