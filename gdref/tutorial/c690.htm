<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML
><HEAD
><TITLE
>Conditions</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet version 1.13"><LINK
REL="HOME"
TITLE="Getting Started with 
Dylan"
HREF="book1.htm"><LINK
REL="PREVIOUS"
TITLE="Sealing"
HREF="c471675.htm"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>Getting Started with 
<SPAN
CLASS="TRADEMARK"
><A
HREF="http://www.cambridge.apple.com/dylan/dylan.html"
TARGET="_top"
>Dylan</A
></SPAN
></TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="c471675.htm"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
></TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
>&nbsp;</TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><H1
><A
NAME="CONDITIONS"
>Chapter 7. Conditions</A
></H1
><P
>Dylan offers sophisticated exception handling, allowing programs
    to recover smoothly from error conditions. Like <SPAN
CLASS="ACRONYM"
>C++</SPAN
>, Dylan represents
    errors with objects. Dylan also supports advisory warnings and
    potentially correctable errors.</P
><P
>When something unusual happens, a program can <I
CLASS="GLOSSTERM"
>signal</I
>
    a <I
CLASS="GLOSSTERM"
>condition</I
>. <I
CLASS="GLOSSTERM"
>Handlers</I
> specify how to react to
    various sorts of conditions.</P
><H1
><A
NAME="BLOCKS"
>Blocks</A
></H1
><P
>A <I
CLASS="GLOSSTERM"
>block</I
> is a group of statements. As with other
      control structures, it may return a value. A simple block might
      appear as follows:</P
><PRE
CLASS="PROGRAMLISTING"
>block ()
  1 + 1;
end; // returns 2</PRE
><P
>Blocks also support non-local exits. These allow a block to
      exit at any time, optionally returning a value. In some ways, they
      are similar to <TT
CLASS="LITERAL"
>goto</TT
> statements or the <SPAN
CLASS="ACRONYM"
>POSIX</SPAN
>
      <TT
CLASS="FUNCTION"
><B
>longjmp</B
></TT
> function. To use them, specify a name in the
      parentheses following a <TT
CLASS="LITERAL"
>block</TT
> statement. Dylan binds this
      name to an <I
CLASS="GLOSSTERM"
>exit function</I
> which can be called from
      anywhere within the block or the functions it calls. The following
      block returns either <TT
CLASS="LITERAL"
>"Weird!"</TT
> or <TT
CLASS="LITERAL"
>"All's well."</TT
>,
      depending on the color of the sky.</P
><PRE
CLASS="PROGRAMLISTING"
>block (finished)
	if (sky-is-green())
		finished("Weird!");
	end;
	"All's well."
end block;</PRE
><P
>Many programs need to dispose of resources or perform other
      cleanup work, regardless of how a block is exited. Blocks may contain
      an optional <TT
CLASS="LITERAL"
>cleanup</TT
> clause, which doesn't affect the return
      value of the block and will always be executed.</P
><PRE
CLASS="PROGRAMLISTING"
>let fd = open-input-file();
block (return)
	let (errorcode, data) = read-data(fd);
	if (errorcode)
		return(errorcode);
	end if;
	process-data(data);
cleanup
	close(fd);
end;</PRE
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="c471675.htm"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>&nbsp;</TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Sealing</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
>&nbsp;</TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>&nbsp;</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>