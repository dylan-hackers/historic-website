<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML
><HEAD
><TITLE
>Stream classes</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet version 1.13"><LINK
REL="HOME"
TITLE="Gwydion Dylan Library Reference Guide"
HREF="book1.htm"><LINK
REL="UP"
TITLE="The Streams Library"
HREF="c730.htm"><LINK
REL="PREVIOUS"
TITLE="Streams, growing sequences, and object identity"
HREF="c730841.htm"><LINK
REL="NEXT"
TITLE="The Standard-IO Library"
HREF="c1279.htm"></HEAD
><BODY
BGCOLOR="#FFFFFF"
TEXT="#000000"
><DIV
CLASS="NAVHEADER"
><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>Gwydion Dylan Library Reference Guide</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="c730841.htm"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 3. The Streams Library</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="c1279.htm"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><H1
><A
NAME="AEN860"
>Stream classes</A
></H1
><P
>The exported streams class heterarchy is as follows:</P
><DIV
CLASS="FIGURE"
><P
><B
>Figure 3-1. Streams library classes. </B
></P
><P
></P
></DIV
><P
>Except for the classes
      <TT
CLASS="CLASSNAME"
>&#60;stream&#62;</TT
>,
      <TT
CLASS="CLASSNAME"
>&#60;buffered-stream&#62;</TT
>, and
      <TT
CLASS="CLASSNAME"
>&#60;positionable-stream&#62;</TT
>, these are
      instantiable classes.</P
><H2
><A
NAME="AEN870"
>Class Reference</A
></H2
><H2
><A
NAME="AEN1079"
>Creating streams</A
></H2
><P
>The following functions are used to create streams.</P
><H3
><A
NAME="AEN1082"
>File streams</A
></H3
><P
>File streams are intended only for accessing the
	  contents of files. They are not intended to provide a
	  general file handling facility of renaming, deleting,
	  moving, parsing directory names and so on.</P
><H3
><A
NAME="AEN1148"
>Options when creating file streams</A
></H3
><P
>When creating file streams, you can can supply the
	  following init-keywords to <TT
CLASS="FUNCTION"
><B
>make</B
></TT
> in
	  addition to the usual direction: </P
><P
></P
><DL
><DT
><TT
CLASS="LITERAL"
>if-exists:</TT
></DT
><DD
><P
>An action to take if the file already exists.</P
></DD
><DT
><TT
CLASS="LITERAL"
>if-does-not-exist:</TT
></DT
><DD
><P
>An action to take if the file does not already
		exist.</P
></DD
><DT
><TT
CLASS="LITERAL"
>element-type:</TT
></DT
><DD
><P
>How the elements of the underlying file are
		accessed.</P
></DD
></DL
><P
>The <TT
CLASS="LITERAL"
>if-exists:</TT
> init-keyword allows
	  you to specify an action to take if the file named by
	  <TT
CLASS="PARAMETER"
><I
>locator</I
></TT
> already exists. The options
	  are:</P
><P
></P
><DL
><DT
><TT
CLASS="LITERAL"
>#f</TT
></DT
><DD
><P
>No action. This is the default when the stream's
		direction is <TT
CLASS="LITERAL"
>#"input"</TT
> or
		<TT
CLASS="LITERAL"
>#"input-output"</TT
>.</P
></DD
><DT
><TT
CLASS="LITERAL"
>#"new-version"</TT
></DT
><DD
><P
>If the underlying file system supports file
		versioning, a new version of the file is created. This
		is the default when the stream's direction is
		<TT
CLASS="LITERAL"
>#"output"</TT
>.</P
><P
>If the file system does not support file
		versioning, the implementation should substitute one
		of the other <TT
CLASS="LITERAL"
>if-exists:</TT
> behaviors;
		the <TT
CLASS="LITERAL"
>#"replace"</TT
> behavior is a good
		choice. </P
></DD
><DT
><TT
CLASS="LITERAL"
>#"overwrite"</TT
></DT
><DD
><P
>Set the stream's position to the beginning of
		the file, but preserve the current contents of the
		file. This is useful when the direction is
		<TT
CLASS="LITERAL"
>#"input-output"</TT
> and you want to
		overwrite an existing file.</P
></DD
><DT
><TT
CLASS="LITERAL"
>#"replace"</TT
></DT
><DD
><P
>Delete or rename the existing file and create a
		new file.</P
></DD
><DT
><TT
CLASS="LITERAL"
>#"append"</TT
></DT
><DD
><P
>Set the stream's initial position to the end of
		the existing file so that all new output occurs at the
		end of the file.</P
></DD
><DT
><TT
CLASS="LITERAL"
>#"truncate"</TT
></DT
><DD
><P
>If the file exists, it is truncated, setting the
		size of the file to 0. If the file does not exist,
		create a new file.</P
></DD
><DT
><TT
CLASS="LITERAL"
>#"signal"</TT
></DT
><DD
><P
>Signal a
		<TT
CLASS="CLASSNAME"
>&#60;file-exists-error&#62;</TT
>
		condition. </P
></DD
></DL
><P
>The <TT
CLASS="LITERAL"
>if-does-not-exist:</TT
> init-keyword
	  allows you to specify an action to take if the file named by
	  <TT
CLASS="PARAMETER"
><I
>locator</I
></TT
> does not exist. The options
	  are:</P
><P
></P
><DL
><DT
><TT
CLASS="LITERAL"
>#f</TT
></DT
><DD
><P
>No action.</P
></DD
><DT
><TT
CLASS="LITERAL"
>#"signal"</TT
></DT
><DD
><P
>Signal a
		<TT
CLASS="CLASSNAME"
>&#60;file-does-not-exist-error&#62;</TT
>
		condition. This is the default when the stream's
		direction is <TT
CLASS="LITERAL"
>#"input"</TT
>.</P
></DD
><DT
><TT
CLASS="LITERAL"
>#"create"</TT
></DT
><DD
><P
>Create a new zero-length file. This is the
		default when the stream's direction is
		<TT
CLASS="LITERAL"
>#"output"</TT
> or
		<TT
CLASS="LITERAL"
>#"input-output"</TT
>.</P
></DD
></DL
><P
>Because creating a file stream always involves an
	  attempt to open the underlying file, the aforementioned
	  error conditions will occur during file stream instance
	  initialization.</P
><P
>If an implementation checks file permissions when
	  creating and opening file streams, and it detects an attempt
	  to read a file for which the user has no read permission, or
	  to write a file for which the user has no write permission,
	  then an
	  <TT
CLASS="CLASSNAME"
>&#60;invalid-file-permissions-error&#62;</TT
>
	  condition is signalled at the time the file stream is
	  created.</P
><P
>The <TT
CLASS="LITERAL"
>element-type:</TT
> init-keyword
	  controls how the elements of the underlying file are
	  accessed. </P
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Implementation Note: </B
>Ideally, element-type could be any valid Dylan type
	    such as <TT
CLASS="LITERAL"
>limited(&#60;integer&#62;, min: 0, max:
	    255)</TT
> or
	    <TT
CLASS="CLASSNAME"
>&#60;unicode-character&#62;</TT
>. This
	    approach may make it possible to implement a potentially
	    inefficient but general set of file streams. Unfortunately
	    the current language definition does not include adequate
	    support for this approach, so we specify instead an
	    interim minimum set of three element types. The element
	    types are for the time being exported from the streams
	    module of the Streams library.</P
></BLOCKQUOTE
><P
>The three possible element types are: </P
><P
></P
><DL
><DT
><TT
CLASS="CLASSNAME"
>&#60;byte-character&#62;</TT
></DT
><DD
><P
>The file is accessed as a sequence of 8-bit
		  characters.</P
></DD
><DT
><TT
CLASS="CLASSNAME"
>&#60;unicode-character&#62;</TT
></DT
><DD
><P
>The file is accessed as a sequence of 16-bit Unicode
		  characters.</P
></DD
><DT
><TT
CLASS="CLASSNAME"
>&#60;byte&#62;</TT
></DT
><DD
><P
>The file is accessed as a sequence of unsigned 8-bit
		  integers.</P
></DD
></DL
><BLOCKQUOTE
CLASS="NOTE"
><P
><B
>Portability Note: </B
>Portable code can count on the existence of these
	    three element types, but implementations are free to
	    provide more. </P
></BLOCKQUOTE
><H3
><A
NAME="AEN1268"
>Sequence streams</A
></H3
><P
>There are make methods on
	  <TT
CLASS="CLASSNAME"
>&#60;sequence-stream&#62;</TT
>,
	  <TT
CLASS="CLASSNAME"
>&#60;string-stream&#62;</TT
>,
	  <TT
CLASS="CLASSNAME"
>&#60;byte-string-stream&#62;</TT
> and
	  <TT
CLASS="CLASSNAME"
>&#60;unicode-string-stream&#62;</TT
>. The
	  <TT
CLASS="FUNCTION"
><B
>make</B
></TT
> methods on
	  <TT
CLASS="CLASSNAME"
>&#60;sequence-stream&#62;</TT
> and
	  <TT
CLASS="CLASSNAME"
>&#60;string-stream&#62;</TT
> might not
	  create direct instances of those classes, but instead an
	  instance of a subclass determined by
	  <TT
CLASS="FUNCTION"
><B
>type-for-sequence-stream</B
></TT
>.</P
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="c730841.htm"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="c1279.htm"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Streams, growing sequences, and object identity</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="c730.htm"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>The Standard-IO Library</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>